(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    385475,       7616]
NotebookOptionsPosition[    380784,       7467]
NotebookOutlinePosition[    381258,       7486]
CellTagsIndexPosition[    381215,       7483]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData["Today"], "Input",
 CellChangeTimes->{{3.732703826304205*^9, 3.732703831894826*^9}, {
  3.732725372991439*^9, 3.732725373350218*^9}, {3.733869997510895*^9, 
  3.733869998355564*^9}}],

Cell[BoxData[
 TemplateBox[{RowBox[{"\"Fri 27 Apr 2018\""}],RowBox[{"DateObject", "[", 
     RowBox[{"{", 
       RowBox[{"2018", ",", "4", ",", "27"}], "}"}], "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellChangeTimes->{
  3.7327038343517647`*^9, 3.732707213078493*^9, 3.7327073849709873`*^9, 
   3.732725462805406*^9, 3.732729024104542*^9, 3.732730201981536*^9, 
   3.732730764114509*^9, 3.7327312997776403`*^9, 3.732731994772262*^9, 
   3.732732128380671*^9, 3.732732166280648*^9, 3.732732303884386*^9, 
   3.732733848344542*^9, 3.732734318609826*^9, 3.732734513943429*^9, {
   3.732734606693088*^9, 3.732734636686253*^9}, 3.732734879120913*^9, 
   3.732754170446026*^9, 3.732754332195063*^9, 3.7327578861890783`*^9, 
   3.73295640946634*^9, 3.733306232462496*^9, 3.733306468873796*^9, 
   3.7338700112409477`*^9, 3.7338714718512163`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Solving problems with propositional logic",
 FontSize->36]], "Title",
 CellChangeTimes->{{3.732703849975521*^9, 3.732703884493453*^9}, {
  3.732725115546892*^9, 3.7327251188897343`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "Mechanical computers are really nothing more complicated than very high \
speed machines that perform elementary logical operations on zeros and ones. \
Higher level concepts and their operations such as integers and their \
arithmetic are built up from these basic logical operations implemented in \
the computer hardware, and these concepts are then used to build higher \
abstraction structures and superstructures. But deep down, all computation \
boils down to zeros and ones and the elementary operations to use them to \
produce more zeros and ones.\nA fundamental result from the theory of ",
 StyleBox["computational complexity",
  FontSlant->"Italic"],
 " says that all computational problems that can be solved in practical time \
can be mechanistically converted to a set of propositional variables and a \
corresponding set of logical ",
 StyleBox["clauses",
  FontSlant->"Italic"],
 " that constrain the possible value combinations of those variables, so that \
these clauses all together are ",
 StyleBox["satisfiable",
  FontSlant->"Italic"],
 " if and only if the original problem has a solution. This construction will \
then allow us to reconstruct the solution of the original problem from the \
truth values of the propositions of the corresponding satisfiability problem. \
With modern satisfiability solvers, it is often actually easier and even more \
efficient to solve problems by converting them to propositional logic instead \
of trying to implement the backtracking algorithm and think up to the \
dependencies inside the problem that can be used to guide this search, since \
we can just let the satisfiability solver implicitly discover these \
dependencies.\n",
 StyleBox["Sudoku puzzles",
  FontSlant->"Italic"],
 " are established enough so that they no longer need their rules explained \
every time a new instance is printed in the daily newspaper. Here is one \
possible sudoku found online, described on that web page as being quite \
difficult for human solvers. "
}], "Text",
 CellChangeTimes->{{3.732703891806569*^9, 3.73270392369298*^9}, {
   3.732704091347698*^9, 3.732704319838628*^9}, {3.732704380087566*^9, 
   3.732704412741858*^9}, {3.732704889583099*^9, 3.7327049187819843`*^9}, {
   3.7327049853487873`*^9, 3.732705068571509*^9}, {3.732725121738626*^9, 
   3.73272513932941*^9}, {3.732754885358161*^9, 3.732754888254139*^9}, 
   3.7327549757101717`*^9, {3.732788816318816*^9, 3.7327889003238173`*^9}, {
   3.7327889447012053`*^9, 3.7327889486616917`*^9}, {3.733305877200941*^9, 
   3.733306015757564*^9}, {3.73330607214865*^9, 3.733306076492867*^9}, {
   3.733870695313272*^9, 3.733870777085658*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{
  RowBox[{"sudokuBoard", "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "2", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "6", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "3"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "7", ",", "4", ",", "0", ",", "8", ",", "0", ",", "0", ",", 
       "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "3", ",", "0", ",", 
       "0", ",", "2"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "8", ",", "0", ",", "0", ",", "4", ",", "0", ",", "0", ",", 
       "1", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "6", ",", "0", ",", "0", ",", "5", ",", "0", ",", "0", ",", "0", ",", 
       "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "7", ",", 
       "8", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "5", ",", "0", ",", "0", ",", "0", ",", "0", ",", "9", ",", "0", ",", 
       "0", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
       "4", ",", "0"}], "}"}]}], "\[IndentingNewLine]", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.732705073716917*^9, 3.732705101595195*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "An ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-by-",
 StyleBox["n",
  FontSlant->"Italic"],
 " sudoku where each tile must be filled with one of the ",
 StyleBox["n",
  FontSlant->"Italic"],
 " possible values can be encoded as ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "3"], TraditionalForm]]],
 " propositions to express the claims of the form \[OpenCurlyDoubleQuote]The \
tile in coordinates (",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 ") has the value ",
 StyleBox["v",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] with ",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 " and ",
 StyleBox["v",
  FontSlant->"Italic"],
 " each going through the integers 1 to ",
 StyleBox["n",
  FontSlant->"Italic"],
 ". For the ordinary 9-by-9 Sudoku, this creates a system of 729 \
propositional logic variables. The rules of Sudoku then enforce a bunch of \
logical clauses to express ",
 StyleBox["constraints",
  FontSlant->"Italic"],
 " that say that whenever the tile has a particular value, then no other tile \
in the same row, column or box is allowed to have that same value. \
Furthermore, we must also remember to write ",
 StyleBox["constraint clauses",
  FontSlant->"Italic"],
 " that say that each tile must have ",
 StyleBox["some",
  FontSlant->"Italic"],
 " value, so that this problem could not be trivially \
\[OpenCurlyDoubleQuote]solved\[CloseCurlyDoubleQuote] by refraining from \
giving its tiles any values at all, which would be within the rules  of the \
previous constraintsm but not in their spirit. A mindless program trying to \
solve a problem has no concept of what we finger-quotes \
\[OpenCurlyDoubleQuote]intended\[CloseCurlyDoubleQuote] when defining that \
problem, so the constraint clauses must really explicitly say everything that \
is allowed and not allowed. (An artificial intelligence may always find \
surprising lateral thinking solutions for any optimization problems that we \
give it.)\nWe start by defining the tiles as list of pairs of the form (x, \
y), followed by a utility function ",
 StyleBox["sameBox",
  FontWeight->"Bold"],
 " that checks whether two tiles are inside the same box."
}], "Text",
 CellChangeTimes->{{3.732705113668605*^9, 3.732705174545103*^9}, {
   3.732705237009396*^9, 3.732705432453315*^9}, {3.732705749552911*^9, 
   3.732705750968432*^9}, 3.732754851950451*^9, {3.732755040467618*^9, 
   3.732755137306119*^9}, {3.732788911613899*^9, 3.732788927221345*^9}, {
   3.733306032487069*^9, 3.733306202626408*^9}, {3.733870790855546*^9, 
   3.733870899451869*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tiles", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "1", ",", "9"}], "}"}]}], "]"}], ",", "1"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sameBox", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1_", ",", "y1_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2_", ",", "y2_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x1", "-", "1"}], ")"}], "/", "3"}], "]"}], "\[Equal]", 
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x2", "-", "1"}], ")"}], "/", "3"}], "]"}]}], "&&", 
    RowBox[{
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"y1", "-", "1"}], ")"}], "/", "3"}], "]"}], "\[Equal]", 
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"y2", "-", "1"}], ")"}], "/", "3"}], "]"}]}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.7327054232819033`*^9},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "Two tiles are neighbours if they reside either in the same row, in the same \
column, or inside the same 3-by-3 square called a ",
 StyleBox["box",
  FontSlant->"Italic"],
 ". These three tables are straightforward to generate, after which ",
 StyleBox["Union",
  FontWeight->"Bold"],
 " combines them into one list with the duplicate elements removed. From this \
union, the last thing we have to remember to do is to remove that tile \
itself. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " list filtering functions ",
 StyleBox["Select",
  FontWeight->"Bold"],
 " and ",
 StyleBox["DeleteCases",
  FontWeight->"Bold"],
 " (the latter one used in the function ",
 StyleBox["sudokuNeighbour",
  FontWeight->"Bold"],
 " defined below to eliminate the tile (",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 ") from the list of its neighbours) are useful for this sort of construction \
of lists whose values should not contains duplicates. In any 9-by-9 Sudoku, \
each individual tile has exactly 20 neighbours, no more and no less, which \
will then produce that same number of separate implication clauses that \
prevent these neighbours from also having the value that was used to fill in \
this tile. "
}], "Text",
 CellChangeTimes->{{3.732705452749921*^9, 3.732705464540552*^9}, {
  3.73270550039594*^9, 3.732705617138091*^9}, {3.732705648059314*^9, 
  3.7327057422005043`*^9}, {3.732705782425363*^9, 3.732705792767531*^9}, {
  3.732755162195388*^9, 3.732755248184627*^9}, {3.732788958830233*^9, 
  3.732788978628963*^9}, {3.733306248378199*^9, 3.733306252097012*^9}, {
  3.733870913355945*^9, 3.73387096722619*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sudokuNeighbour", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Union", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"k", ",", "y"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1", ",", "9"}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "k"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "1", ",", "9"}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Select", "[", 
        RowBox[{"tiles", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"sameBox", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "y"}], "}"}]}], "]"}], ")"}], "&"}]}], 
        "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"sudokuNeighbour", "[", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2"}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7327054757769012`*^9, 3.732705516836979*^9}, {
  3.732705590811376*^9, 3.732705593315072*^9}, {3.732705638460638*^9, 
  3.732705662028817*^9}, {3.732707165601616*^9, 3.732707169673133*^9}, {
  3.732788996190427*^9, 3.7327889986054087`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.732705594113226*^9, 3.7327056633966417`*^9, 3.732707213209971*^9, 
   3.732707385082418*^9, 3.732725463107555*^9, 3.732729024316989*^9, 
   3.732730202334683*^9, 3.732730764281557*^9, 3.732731300033128*^9, 
   3.732731994933456*^9, 3.732732128534399*^9, 3.73273216644555*^9, 
   3.732732304207582*^9, 3.732733848524418*^9, 3.732734318741137*^9, 
   3.732734514090312*^9, {3.732734606909214*^9, 3.732734636815415*^9}, 
   3.7327348794217157`*^9, 3.732754170635742*^9, 3.7327543324929247`*^9, 
   3.732757886358405*^9, 3.732788999201227*^9, 3.73295640971942*^9, 
   3.733306232704691*^9, 3.7333064691217613`*^9, 3.7338700114731483`*^9, 
   3.7338714720618563`*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Unlike predicate logic and higher order logics all the way up to our \
natural language, propositional logic does not allow us to express ",
 StyleBox["global constraints",
  FontSlant->"Italic"],
 " such as \[OpenCurlyDoubleQuote]If a tile has value ",
 StyleBox["v",
  FontSlant->"Italic"],
 ", then none of its neighbours can have the value ",
 StyleBox["v",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] in one swoop. Instead, a separate clause has to be \
added for every single individual tile on the board, as silly and redundant \
as this might initially seem. For this reason, whenever interesting \
computational problems are encoded as sets of propositional logic formulas, \
they will typically explode into thousands or even millions of propositional \
variables, so we cannot just use the letters ",
 StyleBox["A",
  FontSlant->"Italic"],
 ", ",
 StyleBox["B",
  FontSlant->"Italic"],
 ", ",
 StyleBox["C",
  FontSlant->"Italic"],
 ", ... to denote these propositions the way that this is conventionally done \
in the introductory logic textbooks. Instead, most satisfiability solvers \
simply number these propositions with positive integers 1, 2, 3, ...\nWith \
the fully symbolic nature of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can avoid the pointless step of computing which one of these linear \
numbers would represent the three-dimensional proposition \
\[OpenCurlyDoubleQuote]Tile (",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 ") contains the value ",
 StyleBox["v",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote] defined by three parameters, since we can simply \
directly define the propositional variables to be symbolic expressions that \
carry these three subscripts within that expression. The function ",
 StyleBox["sudokuLiteral",
  FontWeight->"Bold"],
 " builds up such symbols that we can then use to build up the clauses to \
represent the constrains between values of neighbouring tiles."
}], "Text",
 CellChangeTimes->{{3.732705809400028*^9, 3.732705981428804*^9}, {
  3.732706029580768*^9, 3.7327061059543333`*^9}, {3.732706170467834*^9, 
  3.7327062000494337`*^9}, {3.732755256161261*^9, 3.732755352646969*^9}, {
  3.73278902026233*^9, 3.732789176841281*^9}, {3.733306260218225*^9, 
  3.733306311224729*^9}, {3.733870971978818*^9, 3.733871086800083*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sudokuLiteral", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], ",", "v_"}], "]"}], ":=", 
   RowBox[{"Subscript", "[", 
    RowBox[{"s", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "v"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"sudokuLiteral", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", " ", "7"}], "]"}]}], "Input",
 CellChangeTimes->{{3.732705997392521*^9, 3.73270605060385*^9}, {
  3.732706130120346*^9, 3.7327061310300503`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 SubscriptBox["s", 
  RowBox[{"{", 
   RowBox[{"2", ",", "2", ",", "7"}], "}"}]]], "Output",
 CellChangeTimes->{
  3.7327060517294703`*^9, 3.732706162580639*^9, 3.732707213266129*^9, 
   3.732707385160171*^9, 3.732725463173501*^9, 3.732729024389194*^9, 
   3.732730202435647*^9, 3.732730764370348*^9, 3.7327313001145477`*^9, 
   3.732731994989485*^9, 3.732732128639039*^9, 3.732732166547797*^9, 
   3.732732304311194*^9, 3.732733848608809*^9, 3.732734318820685*^9, 
   3.732734514167138*^9, {3.732734606996274*^9, 3.732734636898562*^9}, 
   3.732734879484941*^9, 3.7327541707147303`*^9, 3.732754332748028*^9, 
   3.732757886444306*^9, 3.732956409833527*^9, 3.733306232798889*^9, 
   3.73330646920114*^9, 3.733870011572647*^9, 3.733871472138315*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "The function ",
 StyleBox["sudokuConstraint",
  FontWeight->"Bold"],
 " now produces the constraint clause for the two tiles and value ",
 StyleBox["v",
  FontSlant->"Italic"],
 " given to it as parameters."
}], "Text",
 CellChangeTimes->{{3.732706108649818*^9, 3.732706122289915*^9}, {
   3.732706154882284*^9, 3.732706159144884*^9}, {3.732706215098678*^9, 
   3.732706215336399*^9}, {3.732755358616989*^9, 3.7327553820221977`*^9}, 
   3.7338710969997997`*^9},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"sudokuConstraint", "[", 
    RowBox[{"t1_", ",", "t2_", ",", "v_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Implies", "[", 
    RowBox[{
     RowBox[{"sudokuLiteral", "[", 
      RowBox[{"t1", ",", "v"}], "]"}], ",", 
     RowBox[{"Not", "[", 
      RowBox[{"sudokuLiteral", "[", 
       RowBox[{"t2", ",", "v"}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"sudokuConstraint", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", "7"}], "]"}]}], "Input",
 CellChangeTimes->{{3.732706132356843*^9, 3.73270614259435*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{
  SubscriptBox["s", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "7"}], "}"}]], "\[Implies]", 
  RowBox[{"!", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3", ",", "7"}], "}"}]]}]}]], "Output",
 CellChangeTimes->{
  3.732706143630816*^9, 3.732707213331684*^9, 3.732707385227482*^9, 
   3.732725463239861*^9, 3.732729024456278*^9, 3.732730202536075*^9, 
   3.7327307644572897`*^9, 3.732731300176588*^9, 3.7327319950587683`*^9, 
   3.732732128735692*^9, 3.732732166639876*^9, 3.732732304407493*^9, 
   3.732733848692432*^9, 3.732734318908675*^9, 3.732734514251404*^9, {
   3.732734607093774*^9, 3.7327346369824057`*^9}, 3.732734879551491*^9, 
   3.7327541707988367`*^9, 3.732754332930683*^9, 3.732757886526883*^9, 
   3.7329564099340754`*^9, 3.733306232902534*^9, 3.733306469285112*^9, 
   3.733870011669849*^9, 3.733871472200488*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Before building up the entire set of clauses that the solution to the \
Sudoku problem must satisfy to qualify as a legal solution, let us take a \
sidebar to demonstrate the fully symbolic nature of  ",
 StyleBox["Mathematica. ",
  FontSlant->"Italic"],
 "During computation, ",
 StyleBox["everything is an expression and kept as such",
  FontSlant->"Italic"],
 ", to be simplified by the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s powerful pattern matching engine only when needed. \
Literal values such as 42 are simply special cases of arbitrary expressions \
that will then not simplify any further. Even though we usually think of ",
 StyleBox["Length",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Part",
  FontWeight->"Bold"],
 " and similar operations specifically as list operations, in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " they are actually operations on arbitrary expressions, of which lists are \
just a special case. Each expression is a tree structure that consists of a \
",
 StyleBox["head",
  FontSlant->"Italic"],
 " that determines the dynamic type of the expression, combined with some \
number of ",
 StyleBox["arguments",
  FontSlant->"Italic"],
 " (internally converted to the canonical sorted form) that we can extract \
with ",
 StyleBox["Part",
  FontWeight->"Bold"],
 ", usually abbreviated with the ",
 StyleBox["[[ ]]",
  FontWeight->"Bold"],
 " notation."
}], "Text",
 CellChangeTimes->{{3.732706228416073*^9, 3.7327064101644773`*^9}, {
  3.732706539203331*^9, 3.732706589609972*^9}, {3.7327891962892103`*^9, 
  3.732789287135298*^9}, {3.733871103385067*^9, 3.733871111368053*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"example1", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"42", ",", " ", "hello", ",", " ", 
     RowBox[{"foo", " ", "+", " ", "bar"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"example2", " ", "=", " ", 
   RowBox[{"zup", "[", 
    RowBox[{"42", ",", " ", "hello", ",", " ", 
     RowBox[{"foo", " ", "+", " ", "bar"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "example1", "]"}], ",", 
   RowBox[{"example1", "[", 
    RowBox[{"[", "3", "]"}], "]"}], ",", " ", 
   RowBox[{"Head", "[", "example2", "]"}], ",", " ", 
   RowBox[{"example2", "[", 
    RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.732706418621851*^9, 3.7327065625708237`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"List", ",", 
   RowBox[{"bar", "+", "foo"}], ",", "zup", ",", 
   RowBox[{"bar", "+", "foo"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7327064362406797`*^9, 3.732706465959734*^9}, 
   3.7327065633052464`*^9, 3.732707213399633*^9, 3.732707385292603*^9, 
   3.7327254633107653`*^9, 3.7327290245097103`*^9, 3.7327302026537447`*^9, 
   3.732730764536545*^9, 3.73273130024787*^9, 3.732731995123695*^9, 
   3.732732128839658*^9, 3.732732166752748*^9, 3.73273230450812*^9, 
   3.732733848776054*^9, 3.732734319003462*^9, 3.7327345143347597`*^9, {
   3.732734607194598*^9, 3.732734637069826*^9}, 3.732734879622016*^9, 
   3.73275417088234*^9, 3.732754333081153*^9, 3.732757886610724*^9, 
   3.732956410053653*^9, 3.7333062330006113`*^9, 3.733306469368264*^9, 
   3.73387001175665*^9, 3.733871472273466*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "For practical reasons, lists are defined to be special in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " in that many built-in functions are defined to have the attribute ",
 StyleBox["Listable",
  FontWeight->"Bold"],
 " so that the pattern matching engine can automatically apply them to the \
elements of a list. Whenever you define your own function ",
 StyleBox["foo",
  FontWeight->"Bold"],
 ", you can make it similarly listable by saying ",
 StyleBox["SetAttributes[foo, Listable]",
  FontWeight->"Bold"],
 ", after which ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can automatically thread it over list arguments."
}], "Text",
 CellChangeTimes->{{3.732706597713208*^9, 3.732706664280095*^9}, {
  3.732706710279442*^9, 3.732706712367532*^9}, {3.732789300976666*^9, 
  3.732789395933737*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sin", "[", 
   RowBox[{"{", 
    RowBox[{"2", ",", " ", 
     RowBox[{"\[Pi]", "/", "2"}], ",", " ", 
     RowBox[{"foo", " ", "+", " ", "bar"}]}], "}"}], "]"}], " "}]], "Input",
 CellChangeTimes->{{3.7327066690737753`*^9, 3.73270669152984*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "2", "]"}], ",", "1", ",", 
   RowBox[{"Sin", "[", 
    RowBox[{"bar", "+", "foo"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.732706679265843*^9, 3.732706693354257*^9}, 
   3.7327072134661283`*^9, 3.732707385345757*^9, 3.7327254633880987`*^9, 
   3.732729024571999*^9, 3.732730202753809*^9, 3.732730764603818*^9, 
   3.732731300314187*^9, 3.7327319951738977`*^9, 3.7327321289371758`*^9, 
   3.7327321668670597`*^9, 3.732732304608412*^9, 3.7327338488449297`*^9, 
   3.732734319089048*^9, 3.732734514418974*^9, {3.732734607277589*^9, 
   3.732734637149599*^9}, 3.7327348796848927`*^9, 3.732754170966745*^9, 
   3.73275433324839*^9, 3.7327578866949453`*^9, 3.7329564101705923`*^9, 
   3.7333062331045103`*^9, 3.733306469452189*^9, 3.73387001185323*^9, 
   3.73387147235603*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Because ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has such powerful functions to produce specifically lists, many other \
expressions are much easier to build up piecemeal by building up their \
structure as a nested lists, of which we then replace the head with a \
different, more desirable head to turn that expression into an expression \
that is not a list. The function ",
 StyleBox["Apply",
  FontWeight->"Bold"],
 " can take any expression and replace its ",
 StyleBox["Head",
  FontWeight->"Bold"],
 " with an arbitrary symbol. This allows us to build a complex expression \
with the list processing functions, and then use ",
 StyleBox["Apply",
  FontWeight->"Bold"],
 " to to turn the list into the desired expression. Like all frequently used ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions, ",
 StyleBox["Apply",
  FontWeight->"Bold"],
 " has a common shorthard form ",
 StyleBox["@@",
  FontWeight->"Bold"],
 ". In the next example, ",
 StyleBox["items",
  FontWeight->"Bold"],
 " is defined to be a list, but then turned into the sum of its elements with \
simple replacement of its head. "
}], "Text",
 CellChangeTimes->{{3.732706727736421*^9, 3.7327068422536287`*^9}, {
  3.7327894073654633`*^9, 3.7327895057239532`*^9}, {3.733871122576474*^9, 
  3.733871156550955*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"items", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"2", ",", " ", "5", ",", " ", 
     RowBox[{"nicedoggie", "/", " ", 
      RowBox[{"Cos", "[", "2", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Plus", " ", "@@", " ", "items"}]}], "Input",
 CellChangeTimes->{{3.732706806231497*^9, 3.732706851525935*^9}, {
  3.732706982519137*^9, 3.732706999380539*^9}, {3.733306341098411*^9, 
  3.7333063423628187`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"7", "+", 
  RowBox[{"nicedoggie", " ", 
   RowBox[{"Sec", "[", "2", "]"}]}]}]], "Output",
 CellChangeTimes->{
  3.7327068519070473`*^9, {3.732706983221257*^9, 3.732706999851859*^9}, 
   3.732707213534924*^9, 3.732707385411825*^9, 3.732725463455435*^9, 
   3.732729024639735*^9, 3.732730202843314*^9, 3.732730764688272*^9, 
   3.7327313003818617`*^9, 3.732731995240058*^9, 3.732732129037444*^9, 
   3.732732166981947*^9, 3.7327323047085533`*^9, 3.732733848926434*^9, 
   3.7327343191725616`*^9, 3.7327345145049334`*^9, {3.73273460736473*^9, 
   3.732734637233775*^9}, 3.732734879734908*^9, 3.732754171053339*^9, 
   3.73275433336415*^9, 3.73275788677887*^9, 3.732956410285282*^9, 
   3.733306233204494*^9, 3.73330646953507*^9, 3.7338700119368153`*^9, 
   3.733871472440021*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "The logical formula that enforces the constraints between the tiles in the \
Sudoku board is a giant ",
 StyleBox["logical conjunction",
  FontSlant->"Italic"],
 " between these individual clauses, since all of these formulas must be \
simultaneously true for the solution to be legal. Each clause is itself a \
logical conjunction of the ",
 StyleBox["implicative constraints",
  FontSlant->"Italic"],
 " between the tile and its neighbours, and the ",
 StyleBox["logical disjunction",
  FontSlant->"Italic"],
 " of the possible nine values for that particular tile to enforce that each \
tile must have some value filled in it. For the tiles that are given a fixed \
value in the problem specification, the clauses for that tile consist of only \
the one literal that says that the tile must have that very value in the \
solution. The clauses for the neighbours of this tiles enforce that their \
values will not contradict the given fixed value for this tile."
}], "Text",
 CellChangeTimes->{{3.732706871909748*^9, 3.732706973091441*^9}, {
  3.7327070553554697`*^9, 3.732707148696213*^9}, {3.732707255998749*^9, 
  3.7327072763904667`*^9}, {3.7327583908630238`*^9, 3.732758403924183*^9}, {
  3.732789511708488*^9, 3.7327896248105183`*^9}, {3.733306348857936*^9, 
  3.7333063570317783`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"sudokuClauses", "[", 
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"sudokuBoard", "[", 
        RowBox[{"[", 
         RowBox[{"x", ",", "y"}], "]"}], "]"}], ">", "0"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"sudokuLiteral", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", 
        RowBox[{"sudokuBoard", "[", 
         RowBox[{"[", 
          RowBox[{"x", ",", "y"}], "]"}], "]"}]}], "]"}], 
      "\[IndentingNewLine]", ",", 
      RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"And", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Or", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"sudokuLiteral", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"x", ",", "y"}], "}"}], ",", "v"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"v", ",", "1", ",", "9"}], "}"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"And", "@@", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"And", "@@", "\[IndentingNewLine]", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"sudokuConstraint", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"x", ",", "y"}], "}"}], ",", "n", ",", "v"}], "]"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", 
                RowBox[{"sudokuNeighbour", "[", 
                 RowBox[{"{", 
                  RowBox[{"x", ",", "y"}], "}"}], "]"}]}], "}"}]}], "]"}]}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"v", ",", "1", ",", "9"}], "}"}]}], "]"}]}]}], "]"}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"sudokuProblem", "=", 
   RowBox[{"And", "@@", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"sudokuClauses", "[", 
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "1", ",", "9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", "1", ",", "9"}], "}"}]}], "]"}], ",", "1"}], 
     "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.732707017256134*^9, 3.732707047915554*^9}, {
   3.7327071021717987`*^9, 3.7327071072664957`*^9}, {3.732707154997518*^9, 
   3.73270722982584*^9}, 3.7327554096072693`*^9},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "As expected, the problem encoding to propositional logic produces quite a \
few individual clauses. Using the well-known conversion to the standard ",
 StyleBox["conjunctive normal form",
  FontSlant->"Italic"],
 ", the number of clauses decreases quite a bit. The exact number of clauses \
depends on the complexity of the particular Sudoku instance; the more tiles \
the problem already gives the value to, the fewer constraints those tiles add \
to the entire problem, making that problem easier to solve when the search \
has fewer available alternatives to fill in the value of the next tile. This \
seems intuitively obvious."
}], "Text",
 CellChangeTimes->{{3.732707236039764*^9, 3.7327072470547857`*^9}, {
  3.7327072851737347`*^9, 3.732707322733575*^9}, {3.7327074825467*^9, 
  3.732707514290371*^9}, {3.732755431814465*^9, 3.7327554731893387`*^9}, {
  3.732755516091887*^9, 3.732755524875876*^9}, {3.732758407756289*^9, 
  3.732758422460147*^9}, {3.732789631281795*^9, 3.732789695473139*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Length", "[", "sudokuProblem", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", 
  RowBox[{"BooleanConvert", "[", 
   RowBox[{"sudokuProblem", ",", " ", "\"\<CNF\>\""}], "]"}], "]"}]}], "Input",\

 CellChangeTimes->{{3.7327073280949097`*^9, 3.7327073764293947`*^9}, {
  3.732707507356879*^9, 3.732707507679494*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData["11241"], "Output",
 CellChangeTimes->{{3.732707378236655*^9, 3.7327073858360157`*^9}, 
   3.732707508396398*^9, 3.73272546395853*^9, 3.732729025045066*^9, 
   3.732730203355204*^9, 3.732730765088731*^9, 3.7327313007959757`*^9, 
   3.732731995641521*^9, 3.732732129447403*^9, 3.7327321674677343`*^9, 
   3.732732305188167*^9, 3.732733849344689*^9, 3.7327343195628347`*^9, 
   3.732734514884511*^9, {3.732734608046629*^9, 3.732734637654858*^9}, 
   3.732734880141664*^9, 3.732754171538108*^9, 3.732754333937107*^9, 
   3.73275788717458*^9, 3.732956410835663*^9, 3.733306233959754*^9, 
   3.7333064699146433`*^9, 3.733870012706543*^9, 3.733871472946328*^9},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData["7056"], "Output",
 CellChangeTimes->{{3.732707378236655*^9, 3.7327073858360157`*^9}, 
   3.732707508396398*^9, 3.73272546395853*^9, 3.732729025045066*^9, 
   3.732730203355204*^9, 3.732730765088731*^9, 3.7327313007959757`*^9, 
   3.732731995641521*^9, 3.732732129447403*^9, 3.7327321674677343`*^9, 
   3.732732305188167*^9, 3.732733849344689*^9, 3.7327343195628347`*^9, 
   3.732734514884511*^9, {3.732734608046629*^9, 3.732734637654858*^9}, 
   3.732734880141664*^9, 3.732754171538108*^9, 3.732754333937107*^9, 
   3.73275788717458*^9, 3.732956410835663*^9, 3.733306233959754*^9, 
   3.7333064699146433`*^9, 3.733870012706543*^9, 3.733871473091639*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Having built up the clauses to define the problem, we can now solve it with \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s built-in satisfiability solver",
 StyleBox[",",
  FontSlant->"Italic"],
 " trusting its variation of the classic ",
 StyleBox["DPLL algorithm",
  FontSlant->"Italic"],
 " to utilize the best known ",
 StyleBox["variable ordering",
  FontSlant->"Italic"],
 " and other heuristics during its backtracking search that tries out the \
value combinations of propositions. Given the problem and the list of \
propositional variables to solve, the function ",
 StyleBox["SatisfiabilityInstances",
  FontWeight->"Bold"],
 " generates one solution that satisfy the problem. This function receives a \
propositional logic formula without any information about the semantic \
meaning of those propositions. Being agnostic to the high level details of \
the problem described in these formulas, the function just twiddles the low \
level propositions until it finds some working solution, and by doing so, \
solves the high level problem. (In some problems, useful high level details \
stemming from symmetry of the problem can be supplied as part of the formula \
as additional ",
 StyleBox["helper clauses",
  FontSlant->"Italic"],
 " that further restrict and prune the search space, which allows the \
solution then to be discovered faster.)\nSince we know that every properly \
constructed Sudoku problem has exactly one solution, we can unconditionally \
extract this solution as the first element of the solution list. The ",
 StyleBox["Table",
  FontWeight->"Bold"],
 " function is then used to construct the propositions as a three-dimensional \
structure that we ",
 StyleBox["Flatten",
  FontWeight->"Bold"],
 " down to one dimension."
}], "Text",
 CellChangeTimes->{{3.7327075263549356`*^9, 3.732707749750514*^9}, {
  3.732755529947913*^9, 3.7327556131467543`*^9}, {3.732758434839383*^9, 
  3.732758659921014*^9}, {3.7327897032280397`*^9, 3.732789769672949*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sudokuVars", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"sudokuLiteral", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], ",", "v"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "1", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"y", ",", "1", ",", "9"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", "1", ",", "9"}], "}"}]}], "]"}], ",", "2"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"solution", "=", 
   RowBox[{"First", "[", 
    RowBox[{"SatisfiabilityInstances", "[", 
     RowBox[{"sudokuProblem", ",", "sudokuVars"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.732707686020545*^9, 3.732707691883411*^9}, {
  3.732707727463635*^9, 3.732707763326853*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "The returned ",
 StyleBox["solution",
  FontWeight->"Bold"],
 " is a list of 729 truth values for the 729 propositions listed in the same \
order that those propositions appear in the list ",
 StyleBox["sudokuVars",
  FontWeight->"Bold"],
 ". Exactly 81 of these propositions should be ",
 StyleBox["True",
  FontWeight->"Bold"],
 ", since every Sudoku tile must be given exactly one value. We can verify \
that as a quick sanity check to ensure that the computation we have performed \
so far makes at least a modicum of sense."
}], "Text",
 CellChangeTimes->{{3.7327077793267393`*^9, 3.732707878572042*^9}, {
  3.732707993938567*^9, 3.732708004602371*^9}, {3.732755642089902*^9, 
  3.732755688210788*^9}, {3.732789797335092*^9, 3.732789797911421*^9}, {
  3.73330638747013*^9, 3.733306410318213*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"Cases", "[", 
   RowBox[{"solution", ",", " ", "True"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.732707847198173*^9, 3.732707864366089*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData["81"], "Output",
 CellChangeTimes->{
  3.7327078809965*^9, 3.732725464207953*^9, 3.732729025308407*^9, 
   3.7327302036389427`*^9, 3.732730765365078*^9, 3.732731301158269*^9, 
   3.73273199589229*^9, 3.732732129692688*^9, 3.7327321677354507`*^9, 
   3.7327323054600782`*^9, 3.73273384961075*^9, 3.732734319849886*^9, 
   3.7327345151704884`*^9, {3.73273460829783*^9, 3.73273463799131*^9}, 
   3.732734880504087*^9, 3.732754172005494*^9, 3.732754334350586*^9, 
   3.7327578875512733`*^9, 3.732956411125758*^9, 3.7333062342551003`*^9, 
   3.733306470279725*^9, 3.7338700129615993`*^9, 3.733871473513212*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Given two lists ",
 StyleBox["sudokuVars",
  FontWeight->"Bold"],
 " and ",
 StyleBox["solution",
  FontWeight->"Bold"],
 " of the same length, how can we select precisely those elements of ",
 StyleBox["sudokuVars",
  FontWeight->"Bold"],
 " where the element of the corresponding position of ",
 StyleBox["solution",
  FontWeight->"Bold"],
 " is ",
 StyleBox["True",
  FontWeight->"Bold"],
 "? The first way uses the canonical trick of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to \[OpenCurlyDoubleQuote]zip\[CloseCurlyDoubleQuote] two lists into a \
single list that consists of pairs of elements by transposing the matrix that \
has these lists as rows. From these pairs, we extract those whose second \
element is ",
 StyleBox["True",
  FontWeight->"Bold"],
 ", and then ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " the function ",
 StyleBox["First",
  FontWeight->"Bold"],
 " over this list of true propositions to extract those propositions."
}], "Text",
 CellChangeTimes->{{3.7327078952290688`*^9, 3.7327079825865707`*^9}, {
  3.7327080127782373`*^9, 3.732708086665209*^9}, {3.7327557131453342`*^9, 
  3.732755725520838*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sollit", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"First", ",", " ", 
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"sudokuVars", ",", " ", "solution"}], "}"}], "]"}], ",", " ", 
      
      RowBox[{"{", 
       RowBox[{"x_", ",", " ", "True"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.732708044086155*^9, 3.732708051018362*^9}, 
   3.7327080885403833`*^9},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "5", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "6", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "7", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "8", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"1", ",", "9", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "6", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "7", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "8", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"2", ",", "9", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "1", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "2", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "6", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "7", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "8", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"3", ",", "9", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "1", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "2", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "3", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "4", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "5", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "6", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "7", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "8", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"4", ",", "9", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "1", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "2", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "3", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "4", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "5", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "7", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "8", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"5", ",", "9", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "1", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "2", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "3", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "4", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "5", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "6", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "8", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"6", ",", "9", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "1", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "2", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "3", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "4", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "5", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "6", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "7", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "1", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "2", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "3", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "4", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "5", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "6", ",", "9"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "7", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "8", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"8", ",", "9", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "1", ",", "7"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "2", ",", "3"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "3", ",", "1"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "4", ",", "8"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "5", ",", "5"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "6", ",", "2"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "7", ",", "6"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "8", ",", "4"}], "}"}]], ",", 
   SubscriptBox["s", 
    RowBox[{"{", 
     RowBox[{"9", ",", "9", ",", "9"}], "}"}]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.732708089618734*^9, 3.732725464275301*^9, 3.732729025375698*^9, 
   3.732730203740383*^9, 3.732730765440258*^9, 3.7327313012338943`*^9, 
   3.7327319959589787`*^9, 3.7327321298064327`*^9, 3.7327321678562593`*^9, 
   3.7327323055612593`*^9, 3.7327338496960897`*^9, 3.732734319925085*^9, 
   3.7327345152539053`*^9, {3.732734608401124*^9, 3.7327346380852737`*^9}, 
   3.732734880571979*^9, 3.732754172088504*^9, 3.732754334468573*^9, 
   3.732757887631298*^9, 3.7329564112260437`*^9, 3.733056528510497*^9, 
   3.7333062343540154`*^9, 3.733306470354384*^9, 3.733870013092215*^9, 
   3.733871473596712*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "With a little bit of squinting, we could already read the answer from \
there. But since we have all this computational power in our fingertips, we \
might as well display the answer in a graphical format more friendly to \
humans. So, let us define a function to convert the given propositional \
symbol to a display tile in the graphical display so that the coordinates (",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 ") in the subscript of the proposition symbol determine its position on the \
display, and the value ",
 StyleBox["v",
  FontSlant->"Italic"],
 " in the subscript determines the number to show in that position. To make \
the display seem more whimsical and hand-made, the number shown inside the \
tile is rotated around its center point by a small random angle left or right."
}], "Text",
 CellChangeTimes->{{3.732708104089353*^9, 3.732708173576152*^9}, {
  3.73270824235205*^9, 3.732708272102682*^9}, {3.732755733627153*^9, 
  3.7327557857678223`*^9}, {3.7327575374051113`*^9, 3.732757599713813*^9}, {
  3.732956292145711*^9, 3.732956365005864*^9}, {3.733306438206979*^9, 
  3.733306439214014*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"sh", "[", 
     RowBox[{"Subscript", "[", 
      RowBox[{"s", ",", 
       RowBox[{"{", 
        RowBox[{"x_", ",", "y_", ",", "v_"}], "}"}]}], "]"}], "]"}], ":=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Thickness", "[", ".004", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Background", " ", "\[Rule]", " ", "White"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"y", "-", ".45"}], ",", 
           RowBox[{"10", "-", "x", "-", ".45"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"y", "-", ".45"}], ",", 
           RowBox[{"10", "-", "x", "+", ".45"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"y", "+", ".45"}], ",", 
           RowBox[{"10", "-", "x", "+", ".45"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"y", "+", ".45"}], ",", 
           RowBox[{"10", "-", "x", "-", ".45"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"y", "-", ".45"}], ",", 
           RowBox[{"10", "-", "x", "-", ".45"}]}], "}"}]}], "}"}], "]"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"Rotate", "[", 
       RowBox[{
        RowBox[{"Text", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"v", ",", 
            RowBox[{"FontSize", "\[Rule]", "40"}], ",", " ", 
            RowBox[{"FontWeight", " ", "\[Rule]", " ", "Bold"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"y", ",", 
            RowBox[{"10", "-", "x"}]}], "}"}]}], "]"}], ",", 
        RowBox[{"RandomReal", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".1"}], ",", ".1"}], "}"}], "]"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"sh", "[", 
    RowBox[{"Subscript", "[", 
     RowBox[{"s", ",", " ", 
      RowBox[{"{", 
       RowBox[{"3", ",", "3", ",", "5"}], "}"}]}], "]"}], "]"}], ",", " ", 
   RowBox[{"ImageSize", " ", "\[Rule]", " ", "Tiny"}], ",", " ", 
   RowBox[{"Background", " ", "\[Rule]", " ", "White"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7327081868528547`*^9, 3.7327082347167063`*^9}, {
  3.7327248318422623`*^9, 3.7327248361428213`*^9}, {3.732724890586102*^9, 
  3.7327248906472588`*^9}, {3.7327250051186533`*^9, 3.7327250083238287`*^9}, {
  3.732753829158965*^9, 3.732753831559437*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 GraphicsBox[
  {Thickness[0.004], 
   StyleBox[{
     LineBox[{{2.55, 6.55}, {2.55, 7.45}, {3.45, 7.45}, {3.45, 6.55}, {2.55, 
      6.55}}], GeometricTransformationBox[InsetBox[
       StyleBox["5",
        StripOnInput->False,
        FontSize->40,
        FontWeight->Bold], {3, 7}], {{{
       0.9963442803187622, -0.08542877194533396}, {0.08542877194533396, 
       0.9963442803187622}}, Center}]},
    Background->GrayLevel[1]]},
  Background->GrayLevel[1],
  ImageSize->Tiny]], "Output",
 CellChangeTimes->{{3.732708213386042*^9, 3.7327082351010923`*^9}, 
   3.732708273900323*^9, 3.732724838035989*^9, 3.732724891048319*^9, 
   3.732725015608885*^9, 3.732725464358315*^9, 3.732729025444646*^9, 
   3.732730203856481*^9, 3.7327307655238028`*^9, 3.7327313013000393`*^9, 
   3.732731996042989*^9, 3.732732129905781*^9, 3.732732167969473*^9, 
   3.732732305661043*^9, 3.732733849779778*^9, 3.73273432000769*^9, 
   3.732734515358088*^9, {3.73273460850202*^9, 3.732734638169341*^9}, 
   3.732734880645619*^9, 3.7327538320234957`*^9, 3.7327541721722383`*^9, 
   3.73275433463519*^9, 3.7327578877150497`*^9, 3.732956411608975*^9, 
   3.733306234850216*^9, 3.733306470440585*^9, 3.733870013158782*^9, 
   3.7338714736987057`*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "With the problem itself automatically solved, we might as well demonstrate \
some handy but little know image processing primitives to display the result \
in a less boring fashion. ",
 StyleBox["Image convolution",
  FontSlant->"Italic"],
 " is a simple but powerful operation on two-dimensional pixel images that \
produces a result image of the same size but where each pixel is computed as \
a weighted average of the original pixel neighbourhood, each neighbour \
weighted by the given ",
 StyleBox["kernel",
  FontSlant->"Italic"],
 ". Many important image processing operations such as blur, sharpen or edge \
detection are just special cases of image convolution with a cleverly chosen \
kernel. To maintain the overall brightness of the image, the kernel weights \
should add up to one, but of course that is not any kind of law of nature."
}], "Text",
 CellChangeTimes->{{3.732708285630178*^9, 3.732708475683786*^9}, {
  3.732708693775915*^9, 3.7327087145596933`*^9}, {3.7327557955515747`*^9, 
  3.7327558074398127`*^9}, {3.73330646567225*^9, 3.7333064663097143`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testimg", " ", "=", " ", 
   RowBox[{"Image", "[", 
    RowBox[{
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{"Red", ",", 
        RowBox[{"Disk", "[", "]"}]}], "}"}], "]"}], ",", " ", 
     RowBox[{"ImageSize", " ", "\[Rule]", " ", "200"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{"testimg", ",", " ", 
   RowBox[{"ImageConvolve", "[", 
    RowBox[{"testimg", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{".2", ",", "0", ",", ".2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", ".2"}], ",", "0", ",", 
         RowBox[{"-", ".2"}]}], "}"}]}], "}"}]}], "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.732708491052685*^9, 3.732708494922658*^9}, {
  3.7327085266201057`*^9, 3.73270857084778*^9}, {3.732708660673931*^9, 
  3.7327086894565487`*^9}, {3.732708720593091*^9, 3.732708794217743*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJztncFLHVcUxtNWUYIxGxeV4KKQopKFuzRgNq17BQWF7FpsCYbQkBaKIYIB
F1m5lazUf0FBcSW6kLp7bgyuImrWrkQU5fR7REJKcLxz38x89858P34Va57z
zj3n8Jw37869P/z25/Af3966deuvVnwZ/vWfn1++/HVypAn/88vk37//9h2+
+ffqv/r3JoQQQgjhwsUFOwIRD5eXdnBgGxu2uGhv3tjEhI2O2sCA9fVZV5d1
dFh7u7W02DffGE5H8RXf4yf4Of4Vj8Ej8Xj8Fn4XR8BxcDQcU1SN/X1bWrKZ
GRsbs95ea26uN0y24pg4Mo6PZ8Fz4RlF+Tg/t+1tm521kRH7/vvsu8hFPC+e
HTEgEsQj4gWvEnNzNjhobW2cXrpOxIOoEJtexyKiVrNXr6ynh98/LiJORIuY
RZjs7trUlHV381vFT0SO+DEKEQInJ7awYP39/MbISowFI8K4BIW9PXv2zO7e
5XdCHmJcGB3GKApjc9OGhq4uKJVbjBEjxXhFriwv28OH/HIXL0aNsYvMWVur
aEd96U8/1fMgMmFryx4/5tc0HJEN5ER4c3hoT57w6ximyAzyI1Jxelr/GPf2
bX75Qhb5QZaQK+HC+rrdv8+vWiz++GM9YyKB42MbH6/EBYRsRcaQN2RPfM3K
Cm2yQTns7KznUHwGZwjPn/PrUg6RSZ1xgZ0de/CAX44yiXwiq1Vmft5aW/mF
KJ/IKnJbQc7O7OlTfv7LLTKMPFeHoyN79Iif9iqIPH/8yK53IdRqdu8eP+HV
Edku/XzU1VW7c4ef6qqJnCPzZeXdO2tq4ie5miLzyH/5ePuWn1uJKpSJ16/5
KZWfRC3KwYsX/GTKL0VFYkdNFaZRt5b+/IVspH8QdaIevtGdxuMtLT1p0sWI
Lj6sruo6VTSiUlFcMq3VdEU9MlGvwD/oOTrSZ39RiqoF+/H02ZlmKUQsahfm
pBrNp4pdVDA05uf5aZGNG9Qs050dTScuiahjIHPjT09140OpRDVDuKNHt2iV
T9SUy8oKPwkyD4m3uB4f6w7l0trZSbsxf3ycP3yZn6hv8ayva4GOkov6FrxS
Dd4vaCmhKogqF/necHqaP2RZjKh1MRweaiW9ColaF7PgpNb8rJqoeN5sbfGH
KYs37xWYteR1NUXd82NtjT9AyTK/LQm040OVRfXzYHmZPzTJNY89evRiJTN/
ydrc5A9KhmC2m9YNDvJHJENwaCizptrb00fM8kp0Qla7uE5M8IcjwxH90Dgn
J6XdQ1n6iX5ofFvzhQX+QGRooisapL+fPwoZmuiKRtjd5Q9Bhil6w5upKX78
MkzRG950d/Pjl2GK3vCjVuMHL0PWb9WsyUl+5DJk0SEe9PTwI5chiw5Jy4cP
/LBl+O7vp+uruTl+zDJ80Sep0AQG6SL6xJ3zc2tr48cswxd9gm5xZHubH7CM
RXSLI7Oz/GhlLKJbHBke5kcrY3FkxLWvtFqadBfd4sL+Pj9UGZcuV7GWlvhx
yrhEz9zIzAw/ThmX6JkbGR3lxynjcmzs5r7q7eXHKeMSPZPM5aU1N/PjlHGJ
nkHnJHBwwA9Sxig6J4GNDX6EMkbROQksLvIjlDGKzkngzRt+hDJG0TkJaCkG
6Wfyog26eCX9ROckMDDAj1DGKDongb4+foQyRtE5CXR18SOUMYrOSaCjgx+h
jFF0TgLt7fwIZYyicxJoaeFHKGMUnZOA1qeVfqJzruPigh+ejFf0j16vZLYm
vF7p/Ep6m3x+pfeD0s/k94O6fiX9TL5+pevt0s/k6+36fFD6mfz5oOYzSD+T
5zNo/pX0M3n+leaLSj+T54tqfrv0M3l+u+7HkX4m34+j+weln8n3D+p+Z+ln
8v3OWp9Benjj+gym9WRkem9cTwaMjfHjlHHpsv6V1uuTaXVZr0/ri8q0uqwv
qvWQZVodd/XS+u3SXcf128HICD9aGYvu+01ofxzprvv+ONrPS7rrvp+X9h+U
jqbaf9C0X6p0M9V+qab9naWbafd31n700sW0+9GDnh5+2DJk0SEeTE7yI5ch
++qVT1/VavzIZciiQ/zo7uYHL8MUveHN1BQ/fhmm6A1v3r/nxy/DFL3RCP39
/CHI0ERXNMjCAn8UMjTRFQ1ycmJ37/IHIsMR/YCuaJxnz/hjkeGIfsiEvT2t
ZyuvRCegH7JiaIg/IhmC6IQM2dzkj0iGIDohWx4+5A9KckUPZM7yMn9ckit6
IA/0klVl83ix+sTaGn90kiWqnx+PH/MHKIsXdc+VrS3+GGXxou558+QJf5iy
SFHxAjg8tNu3+YOVxYhao+LFMD3NH68sxuQFtLPl9NTu3+cPWeYtqoxaF8n6
uj6MLrmoL6pcPOPj/LHL/ER9KRwfawW20trZWa8vi5UVfgZkHqKyXJ4/5ydB
ZitqSgfvFx484KdCZiWqWfB7wOvY2bHWVn5CZOOijqhmOMzP83MiGxd1DI2n
T/lpkY2ICgbI2Zk9esRPjvQTtUMFw+TjR7t3j58imVZUDbULmVrN7tzhJ0q6
i3p5r2RVJKur1tTET5d0EZVCvWLh3Tt+xqSLqFRcvH3LT5pMFjWKkdev+amT
14nqxMuLF/wEyq9FXWJHrRWaJWiqT+gPYjhG/efva3QaH4KRnqgng7e0uq7F
EpmP7pKCO6uruhpPEDmP6OKnH7WaPkMsVGQ7io9pGufoSDMfChJ5DvwD5Ww5
O9N8rdxFhoOd+pIr8/OawJyLyGqAMz+LZGdHt11kLPIZ1Bx1FqenulksM5HJ
QO6mCYSVlfo9tvS6xCuyR7+ZNEyOj+trAmg5kbQiY8gb8bb3KFhf1yJIKUSu
KKu+xAjOEKantSrgDSI/yJLOptJyeKi1TK8VmSlsecZSsrWlxb3/J7JRwOrE
FWFtTbtd1DOQ6+L8lWV5uaLdhVHntDeN+Mzmpg0OVuJyBMaIkWa+NZtIYG/P
JiZKu/c0xoXRZbgzqUjFyUl9b/T+fn4nZCXGghFlsjG3aJzdXZuasu5ufmP4
icgRP0YhwqRWs8lJ6+nht4qLiBPRVmQ+Zzn48MHm5urnvW1t/P75UsSDqBAb
IhTxcn5u29s2O2vDw7QF5/G8eHbEgEgQjygf+/u2tGQzMzY6ar291tycfRfh
mDgyjo9nwXPhGUXVuLy0gwPb2LDFxfreVXh3j34YGLC+Puvqso4Oa2+3lpar
y2X4iu/xE/wc/4rH4JF4PH4Lv4sj4Dg4Go4phCMXF+wIhBBCCCFERfkP/qT5
IQ==
      "], {{0, 200}, {200, 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSize->200,
    ImageSizeRaw->{200, 200},
    PlotRange->{{0, 200}, {0, 200}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
pSj6NRK/J8uyXP3M+wzvP7wv3XN4enBP7M++eB/j/Y33Pd4PlVKqsgUde1vw
3VOvseD+9c624GZFuR6C8xZ0DxCc0eP4AMGLsreWoujjJn6/lWVZHrbsk1JU
cb86Ia9HgODi1wZ4qOK+9/qfr7Hg5ZE9cnlH/btFpdQP4++b6j/vNgsuPret
Bb/x+usOwUFpVoDgFWWtAwRPnzbNR7DeA0GW5WQx71e8j/H+tmzpBQGquB/y
PjkgsncOiO2f+j4upVKzx16634KPuvd6C75hWKYFNxy500Mw/xzY1U2OCRC8
PqOkFEUfN/H7pCzL8qFyZM4qRRX3vS2buwao4j7J+yfvq7zfKqWqX0Nf6GnB
tXLaWXDnL35mwb/q/3cfwXtu+U2A4P7HzvNR9LESv+/Jsiwnyrwf8j7J+yfv
q7zf8j6slEquJq192IL7z73VgnsUt7XgeXPnOgRPbnF1gOC67zUKEBw0rOOj
6OMmfk+TZVkOm3mf5P2T91Xeb3kffiiyNz8U259531ZKhaezi3It+KKfdrJg
fk/jRfVrOQRPu/DaAMHl3ff55bH3Q84pKX8RRR838XuXLMtyspj3T95Xeb/l
fbjL6Iutivv2+FdyrYr7vFKqajqz8H4LfuKCDhZ86f2/tuAH0hr5CG72dZsA
wX3TZvko+liJ35dkWZarq3m/5X2Y9+fL+p1pVdzPeZ9XSsWv0x/tbcG177za
gscX1bPga7bXChA8+KSWAYLrb83wUfSxEr/nyLIsp5p5H07f0TJAFffts2+t
Z1Xc53n/V0odfOlD7rbgO0qyLXjXzp0OwQ/8okmA4L5pjQIEt8mdU4qij5X4
vUWWZVmOmvdn3rd5P+d9nvd/PheUUgfe1fVzLLh83VUWfOonLzgEFzVtEyC4
63+OCRAcuUdLUfSxEr+HyLIsy/+7ed/m/Zz3ed7/+Vzg80Ip9cPyFnS3YL53
7jn8CYfglrXbBwguXLnbR3BOSfaLKPpYid8rZFmW5R9n3s95n+f9n88FPi8e
iZwhj8TOEaVSuflX3m7BfI/c8N/DHIp9PEBw3b7v+ij6+YnfB2RZluWqMe//
fC5UOC++O0f4fFEqFdrfTLX0mrsdin38u3unqOkrPop+fuLvcVmWZTmx5nOB
z4sK54hmLVXt29/f/TUvftih2Me/u0fqb13oo+jnJ/5elmVZlsNpPi/4HKlw
vujvEFW1aX/fo76xxWSHYh/XTCXLsiwfEu9v1qpw7uh741XSxf9mltfwR1cv
dij2cf3dnyzLshxX7+/vECucR9+dU3rPBxW2+D3f+P1Jcmdvcgi+fcKVAYL1
PeqyLMtyVZrPHT6P+Jzi80vvZaoSFf/MAn5/3cIxdS34X22bB8g+Tv/GNgz3
mizLspya5vPoe+cUnV98ruln9Kh4xz9DmX8+1Kynz7DgZelHBAjm94jT+1PJ
sizLYTCfR3xO8fn183fPsGA+7/Szp9WhatLahy2Yf755g08utOCXburnI5h/
xoHeR12WZVkOs/mc4vOLz7VTP21lwXwO8vmoVGXrP/dWC57U/CoLrvP2DA/B
/DOU9fP+ZFmW5WQ0n1/8s6f5vGu+r60FPxQ5Gx+KnY9KHUhDX+hpwefVbGfB
e1aPcwhu9nWbAMH889DDcI/IsizL8sGYzzU+7/gc5PORz02luMdeut+Ca+W0
s+CB+TUteM8tvwkQ3Ddtlo+in5/4e0GWZVmW42E+7/gc5PORz00+T1Vqtq7b
wxZ81L3XW/CHV55jwUHDOgGCy7vv81H08xO/5mVZlmW5Ks3nIJ+PfG7yebo2
csau7abv0Uq1+s+7zYL5zznP+upSD8F132sUIDinpPxFFP38xK9zWZZlWa5K
8znI5yOfm3yeDoicsQNi56yq3gUde1twzZx2Frz58tkOwfznn5HZ3EfRz0/8
2pZlWZblMJjPRz43+Tzlc3Z55Oxd3lHvWVqdmvhqfwu+e+o1Fjx1ykkWfG3B
hQGC+x87z0c/Zr3JsizLcqqZz80Xll4QIJjP2df/fI0F87mskrctm7ta8N5u
bS148+bNpQhe3eSYAFXFOpRlWZbl6mo+T8vKykoRzOcvn8squep8Rh8LnnJ+
ewu+6L6nHIJHnX5RgOD1GSWlKCzrU5ZlWZaT0dOnTStFMJ+z9/30KYdgPpf5
vFbhjP89YOaR11lwv6PPtOBjNjUJUGwN+Cgsa1KWZVmWq5P5nOXzl89lPq/1
7w3D2Ql5PSyYv8/qgbRGHoIzehwfIDinJHsZCss6lGVZluXqZD5n+fzlc5nP
az7HVWJb0zXXgmvf1d6CF2VvdQje2dEFKPbxUhSWtSfLsizLqWA+fyucy9+d
13yOvxI521/pqp8lnag2fXCzBU8857cW/MLSpT6Cc0rKfRSWNSbLsizLqWw+
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
pZRSSimllFJKKaVUVfV/ACDO3bA=
      "], {{0, 200}, {200, 0}}, {0., 1.},
      ColorFunction->RGBColor],
     BoxForm`ImageTag[
     "Real32", ColorSpace -> "RGB", Interleaving -> False, Magnification -> 
      Automatic],
     Selectable->False],
    BaseStyle->"ImageGraphics",
    ImageSize->200,
    ImageSizeRaw->{200, 200},
    PlotRange->{{0, 200}, {0, 200}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.732708727657934*^9, {3.7327087696877813`*^9, 3.732708794957828*^9}, 
   3.732725464586939*^9, 3.7327290255585203`*^9, 3.732730204129034*^9, 
   3.732730765665176*^9, 3.732731301509788*^9, 3.732731996216147*^9, 
   3.7327321300601873`*^9, 3.732732168125249*^9, 3.732732305900489*^9, 
   3.73273384991998*^9, 3.732734320184173*^9, 3.7327345155216007`*^9, {
   3.7327346087328987`*^9, 3.7327346382982903`*^9}, 3.732734880893867*^9, 
   3.732754172402606*^9, 3.732754335279591*^9, 3.732757887845302*^9, 
   3.7329564120026417`*^9, 3.733306235360859*^9, 3.733306470671987*^9, 
   3.7338700138135157`*^9, 3.733871474458384*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "However, not quite as well known is the inverse operation of ",
 StyleBox["image deconvolution",
  FontSlant->"Italic"],
 ": given the kernel and the result image, solve the convolution equation \
backwards to compute a pre-image that produces the result image when \
convolved forward with that same kernel. And solving sets of equations is the \
daily bread and butter of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Again, the kernels out to be squares of odd length and their weights \
normally should add up to one, but this is not a law of nature, and the \
reader might want to experiment with deconvolution using  kernels of \
different shapes and sum to experience the glitchy results that deconvolution \
can create, especially when combined with color space conversions followed by \
the use of different kernels for each separated component of that colour \
space. However, a balanced deconvolution whose weights sum up to one, as the \
simple 3-by-3 kernel used below, smooths out the image and makes it look more \
natural than the original lifeless computer-generated image."
}], "Text",
 CellChangeTimes->{{3.732708805047011*^9, 3.7327089564595413`*^9}, {
  3.7327248559502*^9, 3.732724865158113*^9}, {3.732724904014724*^9, 
  3.732724951620799*^9}, {3.7327250357824097`*^9, 3.732725084442911*^9}, {
  3.73275581496758*^9, 3.732755987053149*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"kernel", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", ".1"}], ",", ".3", ",", ".1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{".2", ",", "1", ",", 
       RowBox[{"-", ".3"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", ".3"}], ",", 
       RowBox[{"-", ".3"}], ",", ".2"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ImageDeconvolve", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    RowBox[{"Graphics", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"sh", "[", "v", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"v", ",", "sollit"}], "}"}]}], "]"}], ",", 
      RowBox[{"Background", " ", "\[Rule]", " ", "White"}], ",", 
      RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}], "]"}], ",", 
   "kernel"}], "]"}]}], "Input",
 CellChangeTimes->{{3.7327248720187893`*^9, 3.732724882910439*^9}, {
  3.732724916830544*^9, 3.732724960829164*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQkgVO33x7OOwdj3fd9LRZZotYUolKWEsm/J0oZKQpv2SGmV0k6hRYVU
RMmafQuVSvu+/4+5zDuvet+3Zuaa6/ef7/+X/5h3ms5zn3PO55x7n/tc+QUh
9j7MI0aMCOeAH/bzl04JC5u/3IEVfpm6PMJ7AQu8cIL/7gx/+l7/YIghhhhi
iCGGGGKIIYYYYoghhhhiiCGGGGKIIYYYYoghhhhiiCGGGGKIIYYYYoghhhhi
iCGGGGKIIYYYYoghhhhiiCGGGGKIIYYYYoghhhhiiCGGGGKIoeGg79+/t7e3
19bWVlVVVVZWVmBMlUQhtt0lqqmp6cuXL+RDePr0aUNDQ3V1NQbtrxgYAmJb
eXk52Pnw4cNBs9DV1VVXV4fNIQyaAhgCmPrmzRty+9+/f9/S0lJTU4N9LwL7
4Sf4/KAp6Onpqa+vx+YUVPzkRXCoe3t7Bw2ho6Pj3r172J8CxIsgZj9+/Ehu
//PnzxsbG4fLFMBYHjx4MGgKuru7h1Egg7e8ePHiD4nxa8HEZWVlHT58+MCB
A/swoL1kQt7ZTxS82LNnD7yZmZlJngSKi4s3b94cFRW1bNmyJX/XYnoLMWMp
UfBrSEhIUFDQqlWrzp8/T7L/69evR44ciYmJ+dl+rA0hIiIiODg4LCxsx44d
4DakIQDZk5OTV6xYsXz5cmwOAbEfXoSGhsIUwKE+duwYHHnSEC5evLhu3brI
yEjkY1izn3wKFi5cCI4E1t68eZNk/7NnzyB+wbUw60VLBxQeHg5eBAOBWAZ2
k4Zw+/btrVu3RkdHY3AIvwxkMPXs2bMk+6EgP3HiRGxsLAbtX/wrL4JYgAMO
HQRpCG1tbSkpKStXrsTsEAYFMrxIS0t7/fo1lRCEVAAEDAgImDcgtwHNw4bA
Enei5s6da2dnN336dG9vb/A3xP5Pnz4dPHgQPuPg4DB//nxfX18YSyC9FUAU
8homK5gosM3Z2dnc3HzmzJnbtm0jJWHopMDrYGiOjo4LFizw8/ND/hZdR/CL
IcBPLy8ve3t7GAKM5cqVK+QQgUmBIcA0+fj4IH8RC0NAXpCmwN/fHzzKiigo
PB49eoTY/+rVK0gIMDuzZs0CL8LyFMDhBT+BKZgzZ056ejppCqBIXrRoEUwB
vA/TBCMNxOoQwMlnzJgBQ4BUBlU9aQhHjx4F/wEH8/DwwHIgg3u4uLhYWFjY
2Nhs3LgRUhBiP7gTEATsnz17NvYDGRImTAG8IK/J8/PzwWzwIsioWA5keAdc
xdraGmYBau+WlhYqOfj06dOEhASYUMgAANy1a9dCb7WVqC0D2kwnIf86WALU
gJ9QAEMnAnMEpu7atevz588/iCci4DMQVuCZ8FeAj7m5uZeIukjUBboKDABL
Ll++DD+hjYU2ChwPOLh+/XrSGRVo7QEiMKEwv7t374aPwV/EyBAQA/Ly8mAI
8OL48ePgLUiYw3EmeVFGRgaEla2tLfgPvM7JyUEGTnf7LwxMQR5R2dnZ+/bt
Ay8CU6H26OzsROx/8OABNLMQVgBBmKNTp05BcsDIFFz4uxedPn0a/BzSFFAb
+inSFBQVFSGIh3FBYwh9CvkU0N2LkCmAIcCvwDsoQmAKANYlJSWI/e/evUtK
SoJABsonJiaCp2EzkGEUWVlZYCqQGoawZs0asBwZQmNjI+TqadOmQZaGrurM
mTMXsBrIkCchnTo5OQFNwE6SF8FriG7AAYzryJEjmA1kMAycHIAFpkI1VVdX
RyUHIRVERUVBBgDUQgaurq5ub2/vIgr+0316C2wASyBNwQvo32GaoOiFihf8
EOHI48ePgSlAFngfUsGzZ8++f/9O5TFBSW/evCkrKwMHA2Rv2LCBxMGKigoo
gCEDIOcoSGGFQT158gSyE1SMUCuSOAiNLbTkSDMI7trT0/Pt2zf62vlPgtK9
oaEBiihwocjISHAw5P2Ojg7AB3gR1PMwRy9fvqSvnf+iFy9eXLt2DayFo03O
QchvMCiAyKFDh1pbWwddt8KOIDwhnKHSAJQDNYqLi5H34ZhDQQtTAG8WFBT0
9vZiNpDfvn1bXl4OJR+UInFxcaSAheCFuIBABo5DIoWP0dfOfxG0P4AVpDEk
5yBS0Lq6ukId9fDhQ/ILB5gSNEHNzc3g/5BLoaylnoMQMshJOcjPTU1NNDES
PYGnxcfHAzWSk5ORSH/06BEUNhD+sbGxpLSGWYFrQbsBGWDjxo2kTAUxBW0I
TOixY8c+fPhAXwv/U2AtOB6gkMRBgMv+/fshfKCfJb/WgE29f/8eimE44FD+
kRwGomDp0qXgRdu3b4cUQV8L/1OQASAKoCWH3pb0JpTKc+fOhXEBEOlo228K
SlZvb29wGBIHoYLdtGnTrFmzoqOj29ra6GvefwrKb6imoAGHiSBxsKqqCjgI
cExLS8MyBBFVVlaCz4PBJA5C4QE9IPSD0M+Sn6/GpgCF0LgBC8LDw6nnYEtL
C3AQyQCvXr2iiYXoCSpJCBbIACQOAlmgH4RKGGow7NsPxTyED1Ty5P3gnTt3
YETwJjT79DXvdwSkW7x4MXCQZC0MBDgILgTvQ/NOX/N+RxA+cMDJ+0GkGgSO
AFkGLeXFoLq7u6H28/T0JO8HgYOQlv39/UtLS+lo22/q1q1bvr6+0I+Qc3Dz
5s0AkYSEhOfPn9PXvP/Umzdv4OAP4iCQBeICqlzyDguzamhoWL58OTkHv337
lp6eDlMAhS5EBH3N+x1BKQ6FH004CLUlHA3gyJ49ezDbBZMEZRgEC4w9KSkJ
aZ0QDkIjv23bNsyeCyIJSA0chEgBm0mtH3DQy8sL0lpeXh59zfsd3bt3LyIi
ApJYdnY28g7CQQgfIMuTJ0/oa97vCDgILgRu39HRgbwD1SD8CqUIVPL0te13
BNUgcBCGkJqaSnoTOAj2Q4dVUVFBR9t+UwBryMCBgYGkJa+9vb0Q2lCKbNy4
EcuXBhCBhcBBSDtxcXGk1g84CHUIlFjDoqBtbGwEn4eu/PTp08g7yMJ1YAH0
icOioAUOQj8I1IakROVXAQchfcGEkp9jwayAg9APwth37txJ4iD0VkAWeAf7
lfzLly+hk4WjPYiD4I2AwqtXr9LXvN8R9INQgIHB586dQ95BOOji4hIdHQ1V
PX3N+x1BAQzIgAaQnIMQBeBXkAfoa9vvCPrBtWvXgrWDOAjvhISEVFdX09G2
3xT0g+BCAQEBN27cQN4BDm7ZsgVCAwIc+1cHgH1w8IHaa9asIXGwqqoKRgQF
7YULF+hr3u8I+kHgHaSdU6dOIe8gHIRBAR9/vkEYg4J6AwI5NDSUJhyMioqC
Bv/AgQO0MA1d9fT0JCYmwtiBeu/fv/8xwEF4BzpE7PezwEGwE4Id6nlSsJeX
l3sTlZ+fT1/zfkc1NTVQgA3iIDgPlJErVqzA/hktEBTAUDhBEiDdhdra2goc
hA7r6NGjdDXttwQcTEhIAOrt2bOH9CbCwUWLFsEE0dG231RJSQlyc8cgDkIi
gq4Q+yd2gH1w8MHnY2NjSRsyIByEcV28eJG+5v2O6uvrIQSA2oM4CNkJYoF0
SxGWlZ2dDYEMPk8rDsK3HTx4kCa2oSrg4MaNG4F6O3bsIHEQeWdYcPDFixdA
cKi4gIOI/T8GOOjj4zNcOAgFGAT7IA7CoFauXMng4BCoq6srPj4efH4QB8H+
4cLB4uJiyMC/5CD8JN2Rh1kB+3bv3v0zBwMDAyGWhwsHlyxZMtw5CA4DPk/9
8rzhxUGYnUEcJL0zrDnoQxSDg0Ojf+LgggULhi8H8/LyhjUHnz17xuDgUOqX
HAT/H0YchBT0/5mDYC2Dg/TS/yoHIQoYHBwyMThId9XV1f3PcPD/23lRBgfp
LgYH6a7/VQ5u3bqVwcEhE4OD5GJwcCjF4CAWxODgv+jbkOziwuAg3cXgILnQ
4+D3Fx03r+YcPXxw7/60o1lX77TS4J6gIbg++L63u/rmtfOZp48dPZqenn7k
SMaJk6dzL12taOigfoeIoePgh96WmuL8i+cyT588efLEmcysS1cKapo6qc8v
9OLgh5dPH3Z1dnU+fPr8PZVfNRQc/Pr+UVvjnWsFl3Kyz549d+78pfxbFc2P
aLNdG0oc/Piw+vyZI3v3pOxKSUndt+9Q2uGjGcdOnDqdeTb3/KVr12+VV9U1
tN7v7HnS+/L12w+fvlCzdx7qHPzQ21x1Iy/3zIljR9IPH05Pzzh5OudKYeX9
J7S5tWooOPjt6/s3r5/2PGprbrx759blyxez+pJS+sH9e/fs3rV3/4GcK9ef
UVGzoM/BDw/b6q7n50EKOnrkyGGYhSN9s3C1sLLzyWeqv7xPw4CDHx4WpO8M
93K1mWZhOm2Gk0/UtjOV1IMQVQ6+e9J69VzGpthIP7c59jbTp1lYmJubW0yb
Nt1mhrOrx6Llq7cfOnm1pouaQBoKDn58Xl2Qs2/zmnB/d+dZM2ys+56tYDtj
5px58yOi1qQcPnOr8TE1X08PDn5qu3UhbceGNSuioqNXb9i8N/tyDTWzgCoH
v755XHw1N3V7YmRo8AIXZ4eZM+Dg2zm6uPuFRCVsSTt9obab2mfEoMPBL/eu
HFoa5G5jaTZ58qTJU6aamplZTLO0sraxnTnL0dl9vrd/cGj4sqjo1bFxa9dv
TNy8dduO5N370k/l3Kht+eO0hiIHv7xquHb+IPi/n5ujvY3VNGIUW1jZznT2
8Apfs3Hv2bzKF1TDED0Ovmm6nX/2RNre3Tu2bF6XELcyKjJs0ULPBe6zZ9lP
t7YyNzOdMnnipEmTLG3tFq1af7ON8kfvocjBb2+ab17J2LU5OizQ1XmWzXQr
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
yC2kMN7ab8vJG9ScmqYtB7903UheZD5SAjktyiwkqTsvKLnupzOendezIi0n
q/BwEU+cMAtKKVt7hJ6h6OoAKhz81J2VtGTiGAUOVjjQrFx8imPHz/QPXRGf
sG7N6phlS5eEhoWHL41avX5L6tHMgqpWKp/RSPvrgy9bszaHTtaUxvUdX1Ze
EaXJ1gu27L/U/rS/2uuqLdq4zEdXWQoHDTkrXlbdwCN06612yseBKQ4+rSrY
6OtuM3GSvaPbqo3JF4rK6uvvXT99IMRiojIfAfpfZgh7g1lhydhcJ/Pf+tpd
k7F64VQ1qf5VKKy8yuOsQzdld/15FkODgy03T3pPNxLjZuu/OCgiY2jqEL1u
046d2+Niovx9Fjg7zpo1e7a7l9/ymHWHTmS3PKZqXzJUOfiq/XbymqApOkq8
eDZmNi4haTVd05kuLrNNtBQleHCszExsPKKqk5yW7Ls+TDj4tbej/trpw3Fh
PhPHqiHXfUaw88poT5yzbHt+C4Ub9Q0pBz/2XEpZ6zhxLLJ4g5lDQFPfctmm
4/eeUnVWgcYc7C7eFTZtgIOswlI6cwO21/zE6Y5rZxZbTVYicPZHipjcVJeA
tBvtFNiPCgdfNR3b4GeoKUl0EyYWdkFxaQ0dPeMJEyYYGuiNGa2tNXLkyNE6
+hOmWDnMCVi+5uCZi91UbPWIwnrR9zWXDi2ynaTUty6XnZtXTG3UBCf30HVb
d6elp+9L2bZs4YIJOuo8xFMieD5xAzOnremF1GxWiSkOfn3aln8iI/1g+qXC
0s5exCW+3b9xNsrGRJWPeM2KQ0jeYFZo8rVhycE3D4v2bvKZqifZv4ir725I
Q1vPnTmVFFy6RoODdy/tt5+qy4vvX57EISKkqD1mqpWlxTQzI0M9DTVlWRkp
KWkZZTVNgwlTXeb7bdpztKqLkpsfEaHIwdcd2clxsyaPFeXBMTGx8ooq6pvM
DV+9Zdu61fMm6SkKENiZmNl5xDRN5sZk3KZmj74h42DbtdPJsYvnzzDXUZUj
4Fj6z+xKaEx2XbI7r5bi27iHkoPtNzKj5tmoivAiJ7vElXRcw9Zfre6h8mtp
fH3wSWVazBxdBT5m5MqUuJbtvKgLVYPOP32szEqdb2IgjmcfWMghbeTgs6eA
knUaaHDwe8/dvVGOOoqku4TY8Fz8IqISEpISoiLC/Hy8BO6+mwj5hESk5JXH
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
QdxaT4eKynamnZ2jo7Ob23xvb/+AoNCwJavjt2Scy+/58zun0eTg157GglP7
10eGuDvZWZmbTJk0ccIE4wkTJ002s7CaPdcjYuXatDMX2p9//u9v+ldhjYOd
VTkp60KcbCZqq8tJigkLCwsJEyUkJCQsJCohKaeqrjvJZLZP8PojZ6upyWEo
cfBrb+vJA1vmO1uP1VIQFeLl5ubk5IL/wR8QNw+vgJikvNaY8TNcvOKT0+92
UY5Ccg6S30dPCw4+LToS5+VgqjdKXVlBXl5OTo74Q0ZGWkJCQlRUFGZDECQs
KqmoaWDruTK9hDJiocvBtw9vnj0YFz5/hrmRtoaytJSEqJioCFgvJi4pI6+i
OcZ4qo2779LktOw2KpoqNDj45n7F4e2xc21MRyrKCPESOPEcOA4cUex9wuHw
3AQBEXEFNW1jK8eA1UnZtU8otn+IOPi08fSmKPvxoyX5uNlZ2Dj4xNUnOS7Z
V0iTjRKGkINf6wuOrfB00FNXEOYjcHPziMmpmjr577tCVdmPBgefVFyJm2uv
ryArwstL4Cbw8PLy8QsIQgoVERGFYkpcHAJZQkpKSlZWVkFBUUkZavSRo3Sm
WMxasia1+s9BiBoHP7XdPrljteesafqjVGUkxAACgn1/+iQkIiYhr6Q6zmiy
03y/TXsz6nqoqmgxxcE37TdSEgKmTx4lJULAsTKxsLICOoRERMXFRIX4eLkh
HbBxcHEDSlR0DG18wzdfqqQ8A6DCwW8vitJ2etuZq0qLcLAxjRgxgpWDk09Q
BDxPVFiQwIVnY2Vjx+F5BUWVtMZaOXuu23uqnVISosjBJ1WHV7mbjpYTJnCw
sbKwsrHhOPoEOZiVlZWFmZmpb2QjRjCzcQhIqk50DE2++oiicxMocvBtV176
zoVzbPQ15UX4uYEgcNw58Jx4Ts4+nABKuHiExWQ0xxjNcluYfLSQYhLSnoPv
u3N3r3W1nKAgys+GHGZ2cBhhcUkpKWkpcVEhHm4OFhZmFlZ2Th5+cUXN8Tau
kbtOtlJ6cmQoOPjh0Y1j2wJsJykJExDHGcEhKG9oH5pS0EuDbx86Dr5qKdm5
yn/KGGU+DlZkHFxCUsZ2XnvyqHqqCBoc7Cg+Gw5ZSEQA1x+rTMwsfYHcV0UR
YxkCgo2NlZUd4gIRBw+vqNqoyd7hOyu7scLBJ7WXtq/0sDBUkRDEs7MgOCAI
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
kVZYdbebGb5u3rdmlo+1RmdohiEpGDqHzttez9ZMPRocfNFYvmR2QsCwwS7O
A51cPX3HRKavLrvbgxBv7+5ZMc3VUKFzCUVAVNPSd9qKo2yUyOL6Ofq2awdn
jnJSFEUSVZy4rJ7PmBmll39Wj/cte1fEuxjKIR8SEJG2Ghqy5uitP249U1Di
YNOZklljffXkJFj+WIAopW/uP3tx0bnKxidPX719+/bFsyf379ZXX60oP3r0
5LHymw3sLIv0Igffn9691AWydaby8wvS9N3GZO28xuYt2t2Emxz82n5q67zA
QTbqSrI0ECm6jKy8gqKSsrKyioqKspKSvKw0VfCnjJAPJ0yT07Gwcx4WNDZt
8coLLX98pBldDj6vL0ybaKnaOSlKltAYPH72mXpOzjv+i6DAwc83Dq6ZNmmk
q4OVsZGRiaXD0HFxeYereuCg6dLu6eNdlSQ7Y0VhaVWv4CmlbOGAVzj4teP4
xgxX485NDliSiJqJ44QZi8uudttR9vnR+Z3ZE92NpbquWBVX1B4RkXT6Njtz
3dzn4LP67RmhHqYacpJUqhhNUcXYY0j4otUHau48+/zl27tHTScLciKG2il2
rcELiMhaeI9dsb+SPVeABgcf1xxJmTjcREMJekCVlFHRsxo8bvrq/Ze7VVx5
f/P0tmljXZUlOnUPL6ZoM3TymiPslJThOgc/tF1bnzrWVEWcOfeGoVDlzJ2H
zcotrHn4D8ubLu2ZOdFThUbqzLLoal7jpuy/zo7t/ECJg+23CjPj3QzVhbrd
+kogS2npu4wJmZKesWDJkiWLFs6fnTYzIS5i0rjRo4aPHD8+KnvF7vt/vten
Fzn4sbx0uZt116w1UVzDIWBmwQXOd2twdZ/M93vVJzevXTo3Y3ZaWvrsOZlz
s+YtWJCdvWjxYnjoixfNz0yNDwt0MZYTpyAwxOBFFQ1dxs5cmFdcdrzmLjup
OqocfH7rxJxgT7XOyBAjqWYTkrKlkcsYRIOD7yv3LA8eZKMoLQ7JuLC4jJal
6/jkxQeu/DPD9vRu5ap5cfZGSl2FxrDSaqajY7IrmtmZ2uEVDv74WntiW5iX
rTSyaoPBi8uqW7uPjE3N2Vp6orKqtubqud3rFkSPdNSS6jpKjCWrmDhGLNjI
Xj7FfQ6+v394deIgCzURxqQtP5EiqaplNWRk2Kw5i5bl5mQlxY1ys9GgCXU5
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
QeSdfg72svxf5WBycnI/B3tN+jnY53Lr1q1f88G/lIP986L9HOxl6edgn8v/
VQ7m5ub2c7DXpJ+D3aWfgyDfv337/OUbp6Vaf0P6jINfv3z88IEru4j6Odjn
0s/BP5dv37gaJPdzkBeEVzn49dn925VnThwsLdnJqAtXtHPX7kPHT99s5toj
RYODr5qv7Nu5Zc3qvJWr8tasy9+wqXDL1m3bdxTvKindu6/s0JGz5y5WVt+s
b7p778Gj9qfPXr5+yz5Qep2D31svl+/fsilvae6SnGVrt+651PLuf/+j/yqo
c/Dbu/v11aePHiwp3sEsLLhj1+6yE2eqW9u5thm4lzj4/eu7Vy9fPINH8vLV
m3efuRdmoc3B9y+etDQ31tfX1d68WfuzwJffuFHNvKi8pq7h/nN2qx/1Ggfb
rlSUbStct3L5qrzVxWUnHnHpZFUvcPDbq/ZbFWcO7CzauG7NqpUrV6xYuXLV
mnUbCrfvLjt1tb6d4x21vcbBz+9etrU036y9cb2qsqq29m5bO7dGl/c4+OF+
zemSTcsyZsRODBrp5zPIywPE03vw0KCxITPS5xfsKqt/xIWzsShw8GnFjuzY
CcM9XZ3s7e0dHJ0Guri4uXt4eg3y9hky1HfEyMCx4yeFR8clTE9MTkmbnZGZ
tSB78Yo1G0qOnr/z5x3qZQ62V5/MS40fPcTLyc7W1sl92MTpy/dVc2hAaHLw
w72qE9vXLpoZFxY0ws/by9PdnaFEQ3wDxk9KyMzO33f0+gtuwBBlDr5vvVVx
aPfmNStyFmTNzczIyMzMmr9w0bJV67bs2n+qqonzeluocvDbqzslW9bMSUuO
nxIXFR3FEuRlZGREeHhYWGhYeERcYvKiwuJLr9n6Lb3DwdeNV9ZlzBzr5+Pi
6ODmNTgiOetkA3cq1aDLwc8vak4eWLdgdszYUb6e7s6OjvZ29nZ2DO/k7OY5
eHjQxLjk7LXbj15v5cQaUOfg9zfNVWf3Fq3PWZCRND0hKio8LCIsMm5Kcvq8
leuKjpy++ZJjW+YtDn58cmlfQWb8BF9XW2MddSVZGTqNRpMEoUnTZZXVNM1s
HIePmZy5vKDiNqeHrLnPwRc3i+eHeFlpyEmJiQgLCYuIiIpRxSUkJGk0KWm6
jKyCopKqmqa2jp6+oZGxiYmpqZmZpbWti7dfWPKCPdf++Khpdw52Pz+ICgef
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
QghDn4YQKDI23kHbTt9h8NtZxMFvT5q2LvA3USIjfgxPkrdwmLIsbdv+g6Un
yk6UHj5cvGd37rat69dlpK1N37A5p/jE+VZUW36YvV/065Pb9WdPlh0vPX6i
orLq3IXay1euXb9558691nv3blytKzu4K2nOVH11WV7qZC9WUNzAZmxS5sG7
DKyvs46DLzrvlO7bvih6ppuNibyoMO9P87nDyNLyXkFRp+6g3N5DL0znYHPV
zqmeNhSB3ibziys7TIredvjcg2dvIVh69+LxxYriBSG+mvLiGF4eLh4MSVze
ym1iam4Vun1jrODg+/a6tbGBllqKgjg+bm6MiJz2iKBFRaebupH7MD+9unm6
JCXIQ1dOFMvNCQ5MRE7NPWBOcR3KGS1WcPBty9mV00epUwjIKGCE5Sw9QzcU
n7r95BX4hc9vu5vPH18bE2iiIkfAAAlxYvKaYwLi9tehiUZYwsF3bfvXxroZ
KhJ659EwshrmgfFpFZdbendWfnl7r/r4+jlTnU10lOXkFJW1rBw8YxdvaupE
c2kpKzj47fGVbXMnmSv2OtKeLmhZzUzKPHH5VveHnl26H14+qT9VsiTUT1dB
AgteiZtPUFzR0jM4/VAjCt/NthzsvFK2dLaPnpIo989ODC8ibT42IOsEo5e0
soiDTxpLE/xdlMg4ZOwk1Synxm48Xd/6+sfO3m+fPn54/frVy5ev3rxHf1Xu
gJ4f/Nx9pao4JshTWUakh4LcBBl1s8mxqyuvM5RSsYiDnZeObUqJ9xvjrKuu
KCxA6Kc/ICIyit7BcyrvMuE+C2ZzsLuycKmrpRqmLw1RMnaMzyq5Qxelf3vV
dix/haeVjggBw8nBiSEIqxnYRyzKvonqabEkH3zdcXJ/wcqF8SHTp0zwHT81
IGLD3qouOnt631a/Y2mwlbYMjqdnzUdAQsFxYlj+OZQzPKzgYFfdsXljh8vi
EN3hFlOznLF0R9MTuj686ywvSB9nZShKwEIyIiiu4OgXhm6SihUc7LpenhA4
WkWMH1F4PkFZ69Ezc47W/bSN5H1XQ2lhRsqieXFzFyQmZ2Tln7xwDd3kNCs4
+LGtdmP0NFstBTI/DsOHJ0uoOnpGFJQ30S9hfutuPbIlZbSZDhkHSSMnn6CE
tuPEhB3VKFZq2ZSDL1pL1iaMNtckYbn6OTGssJThiCkr9tYxeP6LNRz80nhs
s7+LsQiO2mw+orKJ69wN+28wfMrjVxlQDn7sKN2e7OmoRyLwgHcmkOWtR83c
fOASgwcPWMLBj+0VG+dOdDFRkBDu2d7AwcHDw83Lw/FDgTg4KLKK3jPZkoPv
7xSnBVpoiiDN5cJTrEZP3XGm/22et6v2xPpYK4n2LBdw8WCllPQmzkqqbkWz
LsKifTLvup+2NDddOn+2qvL0pcvXun82pvcP63KWTDbXoPBScS8goeTiH7Gr
BuXGV1Zw8Gnd0XmjbaQxVCvmxCsYuc3LrvhZHd9dPJTt62BKxoMH5uCnyNr7
huSdQTNJxQIOfrtSmu3nYkLqndXlpiiZjI9ad66l/6Tnh+eP7t2+efPm7XsP
Orpfoz+Dx5J50TePzh3Ymb504Zzw0KDAGaHhc9dkH2ntT7jXF0s2TbQzEe0Z
hWGcBIqKrW/strMoDJstOfjtenlhtK+LsqggQkEuOjcG0Nd0mJCwvRrVcugP
YQkHP3Yey5znYqiIYJADK6BobD998fqistMXLtc1XGm8eu3G/Udd6JNAOhlI
DnbdrkiOGqelINwzDlwEBR27WUu3N3UyeoaYJRx8XF+Q4GOrKU6EOJ2HlyBM
kVdSNDHR0VGjCAhyD+vJPzhFZZV8Zkafucd+HHxen5PooS+H710CEFYYNSXh
TEt/Te9qPL58mqO2JIG684dLRFplzLQ5R1AtiwxGXbUPzWcKoyfbyYtSd9Fw
8Igq6fmELa64ifIUHis4+Pr2ubSgERoi1BUZHn4FPadZybvps/Lvnx4fy13q
ZqbesxFzGIeguLKbf+S+S21o/hbzOfisIj/JxUy1N4fg5lcwcAhbUVDX+pzq
1L6+f/Oy6/Gjtvtt7e1PXr5hQuEsFu2T+fzqedudm00N9bWXLjc03X7ymyWY
7nO713rZ6AvxcSFzhWr2fnPzz/9vcPDNg7p1iaEWGnI4Hi5ObowwRUxdXUGe
gsP25CIcvAJiqjY+sduqGCxFwQoOfmyv2zh7opGMcO+sPA+OoqRlNcZ3WkhY
+OzZsyMjo2Pjl6xIy9l1oAbtmTuaDCAH/zmzO3mco6Yg1W/hhRXtPaIKyplw
1TIrOPi5rXpb3FhrTQkxUbKkkpqxm9fMuPiU5NgZnsYqMvy83D17r0Vl1fxC
4y88QLvPlU6Yy8FvT2o3z3XXkerdGSAkrukTtOrXLTD/NJavnOCsI9I75Ssg
JufsF7arGs0O6gHm4Ifu9tqy7cmR4001xBHXxU2kaFq7x2YU3UM7ucCSfTIv
7x5aH+NkKIfj5eTkwYsrGI6ZFL+tqKazNx/5cPPCoYRQbzUZEhXlfJIqxpPC
V52/g+b4GvM5+LalaHWgpZYYskGaEyOkZGAblJhWuH9/cXFhTnZmWuqKpUuW
JCevSMvYuqfkfOtTRlE4WPVFv3Y170wJt9GQQlbTuQTEDUZOWXWoAUVmy34c
fH56V6qfi5EoETOMk0dQTM54uPu0qRM8rFVkRbC83Fw8BIqiqUfk+oqnjLWW
FRxsu3hgtpeDNJG2OZELR6JIKatp6urq6Opoa2vr6hua29iP8ZkSk5Sxt/Qq
IyntgHHwTeu5tGgfXTlkAzlOXtshasVuBo6s/RDW5IONe5cGjXexdBoxekbc
4s37Smsa6i6d2r1qlouRkhAWyMHBLSar4x++8spjJkTCzM4Hm7YvnmioIECd
/+AgiWt4Biw6d6+/WXdcOJjgYa8q2HsqgSAiY+czM//MXRTtHzgOfnx05nhx
xvL5gb7OhuqSeMRz8eKltMw8Zi/bz8A5dNacm/h86/y+xJAxWooieDxBiCKn
a+LqHxi/et3W7du3b16/KnKGr7GWLNILPEnC2N57aXbpE1QKxXwOPq3btsDT
SEkQCZM4eIUllfTsR3lPmjzRx3usq7O9lYWZsZGxiamVvdPYyTPmrsvZf6OT
oSJ9g8TBT9cqdkT62sn27SjFiyk5TppdWNOK4rvYjYOdDaVLwrw0ZYW5ODh4
IFa0cI5IWL5l48q5k6zAFeN4ubixwvJ6I2YtLWlnbHqRBRx8e7Ek3dNWl59u
ZwYvjl9QuKciizCpp5pDbw0HJU0z2zHTZy0vOHQV9RLbQHHwQ93BzCluhmSq
0+UTkLUdM3vnydtM+WqWcPBT17XyosLcrXsPldW3dCAB+os7Z7bEjTJTFsT0
AIZXXNZ42uzMG0zYLsr09cEHhzOjbbSlkEieSJF39J65vbKfNb2t27dxmr2R
GLZXz/BkaVvv4NxKtubg3eo9iZFTHK305MQF+46DDSOIyTtNid56ooGR5XMW
naN/9+ja/i3JU0bpK0oJCgoKiUkqauuZ2zm4uLk621qaqMpL4Pl6usFPEtA2
tw1btO78bZQTVEzn4PvWs+vD3fRkCL1bKzhwBCExWSVVTS0NNVVlORkpMYqw
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
JHtF8BhLBeG+DZm8wloWngmZKFfPWXIfffe9Q9lLXCy0CNSNCFxYATFFLbMR
46bFLFyevj5tzfKomZMs9FXwfXmFgJiqs090IarSfN9ZwMGu6yeTI/z0lMT7
XaLNSxSW0zR0GTs+eNacBQsXp6xYuXrNGhjljHUbsrLz9xw803gL5bkutuAg
yNtXzzofPerofNL1z8tX7z9+/gnxX149vnQgJ8zBXBaPUAZP0bL3T97V+AT9
vg2m75N50XJp66JZVloKWOpqJjdOQExOzcjKaey4SdOmT5vg5W6hp0Yh9Lkw
Lry4hpl31Kqyq2xZX/Ttg+K1UabqEkhjhcS0xs9cXdfB1F0yA8jBJzUH54+0
lO2twsQjJmMRELkV3WpUP2H2+uDX2+eLYv3tlSjUYhkc3PzC4so6xtbObi6j
R9kOt1BTksbz9l3qhSdpmbnEpBbcYKAjLNgn8+XepaMrIycYKktiwBA4uHFE
YRlFNUMzK3sHR3sbK0MNZXH+H6Uv8ULiJvbeKdmlnWiPAjP9/GBbfdnyCB9d
BREeakE1fhJFVcfIzcM3LCo2MXFBdNj00cONFSi0FathJEkNN7/4PWfQ3Hv1
nUUc/P7tTl15ytwZRpoKWD7eYZw8fESSqJyypqGphbW1mamhsrwE7RQqN15Y
y9wtbvVu1IVJmM3Bl2cLV/k66gvj+m8L4eTFCoqIKSir6eobmpiamfeJhaW1
vctY/9CkTQeb0a0asgsH/5vcP7cvdqS1HFIsiJMgrus6Y83h+wxcOcH8/aJf
X105uT8pwt9YXZ6I5ePi5sXgicIUCRk5BUUFeUkxYZoHG8aNFVHWs58Wl1XW
iLpYOGs5+Lp1X3qUhZY0NR7jEZUxnjxrw9XHDH3lrzJgHGyvKo52MpPqvZWe
R1TafPrsLbfY8L4JeAKPr+3fuMDbWlucyMfFwcHFw4cXIJHFxEXERAUECLQL
qXlxJFV9y8D4VSeb0JSRoQlLzk28eVR9ePu8YF9DNTlBHJaXlw+L5xckCZPJ
wkLEnopQNLeGI4nqmdvHLN1Ydw99lSLm15N58/BMSVbEJDt1uZ4KiDx8wBCy
jLySlo6evp6umqIs+f/YOw+4HNv2j2vvvfeeVkaR7FEkK5vILlLRHlRCyMpI
ZEcyHjISUTIrJJWICilFi2Tv/6/7quu51fM+L/e8ev/37/18em+XW89xXudx
HN/jvK5zSP29daeYjEq3viNDtyQytnjwJ7s4CE+qzbx4PNRrds9OJnKSEkLC
IiLiklKycnLyctKS4mQnCInLG1vYzPaLTM1jfCU6azn4o/rBviXz+pho/L0x
XLMap0eKiktJy8jJoSWysrIy0tJSUpKSUjJyqjpmNqPmrj1+l5GJPm2HgzW5
KRHThrRXoR0mIiKn3c1h/rqzZUws8mPH+sFvbyozUo6tDlw40qa7obqKrJSk
hLgEJC4mKtScwsSk5fXadxvl4heTfJOZdTXs5eDH52djg4YjGyspKChpdew2
zD1oD0vAQS+OcbDs2gnfoX10xYjBuLimfu85i2JZMueaDesmvpblpu9bG+hk
39NMV1lGSlxEVFREFOm46RERn5C4nJJOJyv7hcEbL2Qz+CCLFJvWD36sKb2W
dHh1gPvo3j2MNdWBPzFREWEhQf6mIBAA3VV0ja3sJwSu33nzEVMFFjv2F22o
LDh/ZIvf/Ak9u5goK8oihKWQfJF2pSRFhcmV3HzSCqoWPQcsDt+SxcRDdnZx
8OfPLw0vs1JPrV/qPa6ftamWuoKsjCQSkhgGiMJCQsKiYlKKKrqdrezdAjek
3GJkqh4p1nLw47PsKN+5/SzM1BTlQTlpaWkZGdlG7jWpkX5SksipcCgBwqNQ
L0op61g5zFh/Kpex5YRthYOfy+7sD5o5zNLMQFtL16izzbCZQVEXGFszRYhN
6+i/v6u5n3XpcMzGYPe5jkMHdu3U3kBPV1NDXVVVRVVNXd/IrL/9OO/lUacz
CpjaHZXt82Te5aUeXB7gMXO686y5C4PDtyRevMfynQU4xsHavPTVsybZmBhp
KKtqapn06O3oE3qAivNkmvS+rCDj1IEtYb6u40cM7NrZXF9PR1NDQ01dQ0PH
0NxykOMMr7U7TmQXsQDk7FtH/60BgXD5yI7NIV4LJ46y796lk4G+nmajdA2N
u/SzG+fqv2L3ybSiKuaOT2PbuUsNVcU3Lh7fvGbp7Cmjrbt3NtRvjGIV5caD
RDEOUVRWMTBpP2zctJVb9mYXMcVx9nGwUR9eP7p97a/YLWE+C6eOHTmgj41l
925dunTtbmkzeKjjnIXBW/aculvMrCOx+Llow/O0xEMbV60I8vfz9lq8eJGH
x8IF813mzp7p7DR50njHkcOHDR7Qp2f3rqZGhtpammqqqqpqGlpGHS3tp3tu
v1jI2MubtsLBn59rc88f2Rm1ZlVExNqNMXHH0nJLGD7DtlHs3E/me33F07zM
yyePHNy2eePqiBXLwkKR2JeFr4yK3nnqwtXiSiYZ2Ch6Dn782PR2mIXrBz/V
leXdzrx69XrW7bySZzXs2F6Hc+dN1JVdPhq/ZfWq8LDwiFUbd+47kZXL1ONE
UuxbR/+utuxe9tXTx+O3R0etWR2xfPny8BURazZE7044c/VOcR1Tvv+32Lyf
zI83L8vv3c5ISjwWu33b+vXr1qyJXLtuU8zO+NMp1wuevmTJTiBs4mCjvjSU
PspLPXsidlvUirAlvl6LFi5wdZk313X+Am//4PVbY5Mv36ysZ7YR7OUg8Z+o
Kn9wJ/PC2ZMJ8Qf27oH2HYw/djblam5h2VvmTjMnxPJ5Mp8aXpWXPi169Ojh
w8IH9wvu5eXmZN++mXHjanrahfNJpxKPHY7fuyt2S9TGyNWrVoSHL1sWvnz1
hi37T6YWMpoz2gwHoY9val48r6h8Ufv6PfNpmQP7qn399P5VbXVlxfOyRpVX
vqhqeM+qs/vYzkEOiHMcRF80vH5Z/ry87PnL6lcfWBH7hNi5r1qjvn358PpV
zcsXlRUVcPyq2vr3rLO9UZzZV+3Hty8Nb+pra2tramrrXjd8ZFkQNIqNHCT0
7RN6oPRx8YOC/Ny7d+7k3MnNLyh+Wvb6HWuawQEONuvH58+fPnz48PHj528s
nfLG8XN4v3/98uHd2/pXdTVVVS8qKp6DCi9r65lZV9+WOMhScWl/UZaJx0Eq
iN0cZLe4tb8oC8V2DrJZHOQgu8T58+hZLh4HeRzklngc5Lp4HOS6eBykgngc
5HGQW+JxkOv6X+UgCMjjIMfE4yC9eBzkpHgcpIJ4HOS6eBzkungcpBePg5wU
j4NUEI+DXBePg1wXj4P0IjlYVFTEEtvYqn/hYHR0NI+DHBCPg1wXj4Nc1/8A
BwsLC3kcJEVw0Nvbm8dBDuh/hoMI9n/kIBrIXfN+R//CwYSEBK6a9lv6Fw6i
a9ouB6OiotAv/wMcTElJ4a55v6N/4SBiAXmVu+b9js6cOcNCDuJXtS0Ouru7
3759m7hSVVUFDiIngIPfv7N4T2mWC5iAnfC01hx0cXFJT0/nqnW/pX/hYGho
KI+DHNB/4iDsR9cUFBRw0bbfVGZm5n/iIH5++cLaBZesF9iHm/+PHEQst2kO
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
meCc5GBd7tnwiX0MmzYjEVLV7jV70S7GDg+lFzs5+CYtPmJgdyPydXPfsXMP
Z7JsGxlS1OHgz7pHR9d6DrLQlaQdMywqqaBn2mXICMe5C9w8F86ZMqq/hZEa
OWNcSkm/z4g5WxJvMjx5lh3r6F/mX94a5GLdQU9cRLAdH7+whIyypr55F6ve
/QYMHNC3Z7cOuupy5DajotLKXfuODNmS+IyhyYvsmCdTfvdiJIZ7hmrCAnyN
+JBR1Dfr2MfWftwUJ2enyaMH9+1koPn3SEtQUqODzaSATZdKGBxOsZiDXytT
YgNGWBtJ048FCUuFGyeTqKpraGpBmhrqairKSooKjW/g9Ew7D5/mvu8Sg08V
OMvBn29L0qMX2XXRJh4S8cspdx4/IzLjEeN7LLKFgz9/lty5GOE/p1t7PTER
YT4BITFpBTU94w6W1r3797extjI11JJsngvEJypjbNnfPWJHXhWDq6LZMU/m
VVHmrlC33h30xYT4ac9tpJV0jDr37DtsxOhJ48aOHNjXwkhHSoSfbIJRt74u
YVtvljESyZzkYEVmot9w66Zt1RqP9bGe5bnzEdMPGdnIwW8vTm/3t+moSdxq
MXlt+2meKfcZWSDw76IQBxvX1u1ZPKGvEbFAik9AQlpeU0fP1NzUzFhPQ0la
uHmynLiMZtfeY5ZsPFLIRA+yZV+1L6/upB5ftnhGTwsjeRlxYRERUXFJaTl5
RSVkXTkpcRFykoOojFIHy37uoZsyGN0biC3rJt6/uH56j/cshw4GqmKiQoJC
whLSssrqGjp6enramsrke6nG1CCmbNB50FTfHefzGS5FWMvBL5V3dvhO6Wmg
RH9kO5GoBASFRERFxcQhMVFREaHGrV9p5wgLCsmq6fYZMzvmXAFjTeAwBz+X
Xo/1srfUIw65FWk8nmz+5tzyP34WR4pNHPz5qTbz4l8hi2f26GQsJykhhEgQ
l5SSlZOTl5OWFBdsDgN+UWndDpYTPMNO3iphuAns2VftTe6lE8sWzbDqaCAD
ZqMB4pKyCggFDW11NWUZKTIXCYhK6ne0mrJo2amsYsbs5yQHyzMSfe376DZt
mC+moWcze1HsQ6ZX0rKRgx/LTm3z7WuhQ5t2xa+g1X6i6/KbDCy3/m+iEgd/
vnuedyo2fPbwnsZqchLCQsLwPgkJKSkJcTFhsnyUUzbo3mti4KqDdx4zNeeB
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
R2bJ3dPwEAAis2fPhvCAJWVjqyAf7HcfPXAQmAKR8Jo1a7g/kgcO5ubmQvfp
x0GwRkBhTU3NwBbvd4Tcw9vvPnrgIKTkCxcu5P5I/mef++j7chAgDn2q79n7
XCvkHl4obT8OwjsQ0DJ/9j4H9Os9vAgHoWtAVsiSHWFsFXIPb7/76OHJQ43+
lItEf72PHuHgn3KR6E+W3sMLHATbA6Ry+bVriOrr65HLRs+ePYu8g3AQIvmc
nBxuvvkOUVdX19q1a+GBQzzP6OwXLlwIoavvTgSu1dWrV8Fa+nGwsLAQwsiE
hIRf99dzocDmwWDACTD2Qbe1tQEHIZLvuxOBawUcTE9PB+qtX7+e8SbCwVmz
ZnH/FO1P+p5f8MCQPfXlYHZ2NgS0QEPuH9hBrrkBm09JSWFMBSIchHr13YnA
tWptbYUuANTux0HwTtAXHj16NLDF+x0dOHAAOjLYPPMchNj4D+JgXV0dcDAy
MrIvB5cvX/6ncPDVq1dQToi4gIOMJTEIB0NDQ/8UDkIABp29HwehUomJiX8E
B6Hj/9EcfPDgweLFiyES7sdBKP8fxEHwwP/GQS6/AfYnfX4wPz//Vw5GRERA
X/5TOBgXF/encxAMBmye+Xt4BznISf0bB0PpGuQgZ/RvHATT+nM5WFVV9Qdx
sKGh4d84CD8HOcgB/SMHwf7/IA6CCxrkIPLOIAc5rP9VDsbHxw9ykGMa5OCA
q6Wl5X+Gg4PjooMc5LAGOTjgGuTggGuQg9ygQQ5yiIPfv7J2DeogB7lBgxwc
cA1ycMA1yMG+Yj0H3z+/3dRQc3h/+e5dpaWlu8v3HKo+dvnGfZasAOMYB++d
PbG/aHP+mlU5a3N3VRx9zCIYcoSDP7oe3W2+cKK26mDFgX0HDlRUVddevHrz
xTvW3NrMbg6+e/PqybOnT54+ffb8+YuXr7q63rx9++79+w8fP378hOjz56/M
VYVDHPz+9dP7N6+eP+m8d/fmtebzpxuqDx/aU7aruHjHzl3llSfPd6J19hzg
4MeXj69fOl9z5HB5WVlJSclO6McHDteevXr/JWt6Agc4+LKzvaG+Bh749qJt
W7duLSraUVq2v/rY+buPWXBkE/s5+LXz9pXaI/uLi7YUbFifn5e/YWNhUXH5
kdrzd5+ypgkGhIM/3j2+0FC3f++eXbv2Hjxy6totpjaKcikHPz5vqjmwMTN1
TthUr3HuY1ycQa7uHl6+AdELUtdtKz994wmTv4EzHHzV2pCfPNfXw8VmlKW9
s2vUwiUn21iT5rCXg5+6bpysKV2/Jm3BnOlBPpPGe3i4u3l4jvX28YuKnr98
9cY9R07fe8UsDdnKwc6Lh7ZvzF62JCU5OSk5JSU1bXF6+pJly5YtX75ixYoM
0Ar4KzNrzboNJQfrrr9C+VtYy8HvL9vOnayp2L9nV+nOHTuKtm3ZvGnj+rzc
nNUrM1csTU9NSlwQFzcrIiJoqt+EsZ4uzk4Ojo6u47wiE1YcuIzS1bCVgy/v
Nx8p35aZlhAVEjhx3Ngx9CP9nVxcPSZMDoiISc3M31N55inT2/vYysH3T25X
lm9bnBA31WeSq4uzvb0dyMHR2c1j4tSgmSnL8vZWXnzFHEzYysFXD64eKF6f
GBvhPcHD0d5utLW1lZX1aBt7F9fxfsGzUjMKDhxtYf6gAc5z8OvztvKtOTPC
Ajzd3VzGjJviH5udV/OEiQSJCzn4puPank0rZ02daGOir6ksLyNFo1IpVCpV
UkpaQVltuJG584SpMYtz951m6ghQTnDwXUdVbrqvrZm6DE1CTExORcvVf8au
M6w5ubQvB/vuH2Seg6/vX9mzaVVskI+LlbneUA1lBVlpKZokjSYlLa2gpDJ0
uOEoO9cpwbOXrNtec52pI1/YyME37QezF4SMdbQyMTLQ19PXNzA0NDI2Nh7Z
LROT7p/wJ6ORJqajndyD4xbvPteB7vewlIMfLh/OS5gd6DXO1Rl8lp2tjc1o
a6tRoyzNzU1NRhobGerrD9fR0daAFlGQlqSRJcTFyRR5dR37yREbjqI8JJ9t
HHx349TenNToyR4OI/V0VJUUZaSlaTToyFQqTVJaTlFtqJ65zRj/sLi8ooMP
mHPE7OPgs9tntqxO9h3vYqCrLScjTaFQyGT4B/5Nk5ZRUNMcbjHaLXD6gg07
Dj1g4gRQtnHw+93LB/OWzvFyGz1cWxW8KJlMlpAAoxGXkKBISsuraeqNsh0X
Epm6edfJp8wlzZzm4PvOo1tWh4x31lVXpgEZaEq6hm4zFhTdeIb+K7mNg8/b
zm9euWiSi5WmgpQIAYfFYLBYQUEcTlAQgxEQwGJxJFGyrIq2qf2EqOS8uptv
/vs3/ovYz8FvrTU7F/i4DpMhY3mGgIhkGYtxwQXHWDNozCYOvrt/eeuqRd5j
Rg9VkhUnEQSxWAz81f13t6AhiCRRihR4XyPbsb7RGRtqb6GnFfs4+Lq1bkXo
RDMNBYowiSCEJxCIJJIwQyQSiUgg4PF4orCotLKW3eRw1BxhJQe/P6wuTJjo
aKymKEUWFxMVFeknKDmRQMIL4gT5+XmH0MXLT6IpmnkEZZZfQDdCxx4O/mhr
LF4e62Nvoi1LFcXjwIhwQgSisLAIVEBIEP4oKEQQpkjKD9Mz9wqcU1B+jpnh
RTZx8NPjK4UrF3rYm8hLSQhiBHj5+AUEcXiwI0JPFfAEEaqUoo6BpVfgrLyS
WtSHH7GJg4+aq9YkhTpb6shQRKD8/AIYHB4Plk/AC2EEwJVC+UVp0qojjOyn
hMZvKj+D3pNymoNdFys2xPq46CpKCtH7Aa+AiLyGTWjsFmaicq7i4NfnLVvW
JHnam8hSRPjoHV1QiEiRlFVQVFVRkqWKETF8PEN4eDFC0Pu1rdwDl26qfoZ2
cI7dHOxoqs2aG2KhrUhAajJkCEZU0nDM1FWHWLP24G/joqzi4KeHh9cvneJk
rkgV4UcKzY8liEpAKigjI02jAhhxAvzQpQQJEI1o6FiNnZqUv/su2qEt9nHw
Zm3RNFdLeTECD1ILHj4BDKY7kBKA4vPz8fLy0P8DrwBGTFrJakLI+mqUh+uy
koOfHhzMm+dgoilOEuwpNtg6Lzhg/u7CYwXhb34+DO8Q/p6moTePiKyGzeTI
jVUoOy87OPj5ycV1i6fbj1STIAoghSQIk+WV1UcYmUBiq6uiQCYKCfBBi+BE
yTI6Ix3C4teeuot+SIs9HHx9qiwrwMNMjkxAHjSfIIECOaCOnpGx0TAVRQqJ
gOHjx2LxYmSZoQZWfjPTys6jPD2MLRx8eb0ke57nKB2aCBYJmPDCEgoq6oYj
Tc1GGqrKSZMEsXy8/BgsQYKqoGvsEDhnxd5L6CnCSQ62N5alz5hooilDYHQD
HqKMtn1YWvk9JsIpbuLg+7MH1oRMsFKgkZD6YQkiqkP1PLyD5iWkpKcmzgr2
MtNUFMZieHn5cSSy2girgNisE7dRjqqwlYMPrtTmJM9wGDlUQkjgL58lTNOx
80ndeZYlJx6yY36w49yBBQGeWjLivUXGCEur6FiPmTxtZlz8wnmxUT4e1hoK
VBxWALyYkIiEos7I8dMTShrvo6sC2zjYdbxoiZvZUBIG4QkfnkSWlpWXl1dQ
UJCXl5OTBahLSUlKSsrIKWjrm0wMiys7fw/db2IlB78+ProlxdPGQE6KDHE7
SVhUXILcPYooIyuvoKiopCwnL0+mSuIEcOAAkIrxYkUUR1j7Ja07gdYFsIGD
P67VFgRPsJQl4xAbEiTStPUdAiIXZK3duKVg48rkuX6OpspkYSx/tx+mKg6z
mzIn/xj625HYwcHPnedz5k81UqPy9lJQRl3HbUpo4vKV+fl52anxgW6j1SUl
6MNVeAkpZRNHn+QN1c9RlZ8NHPzRWl04Y5KNMpXQ2wTUofr2wVELVuVuKMhf
mxob4WqoI0UQEuhGIZEio27i7JuYf+QR2pyCYxx8euPE2uTptoZqYjjev4JB
AREFA7cZq6seM/HN3MPBzw/P58b7m2hKYXqwgVcaZhwck7zryImb7fc77txs
PLJryQw/I01FEWESUYyiPGzkuNAFW0+2oystuzj44/W147tWzA+2NxlKFRYc
0kd8RKqmxYR5BcdZcqUTGzj4sm5LmqeZNrE3gcWS5fXdgxauKz567uqtO3eu
N5+rKF43y9dFQ5YsiOHnFcAK05SMnf3Ttp9BNz3CLg6+vl26dJqFtiRiSLw4
qqqOvV/InMTk9GXLVqxYvnzZ0qXpixenpaWlL122Om/jgWONqAe1WDo/+LGl
viQpLmKyt9cELx/fgOCwiJkxcfMTklIWL10GfyUtWjg91G+0gaoUgZ8eXfGJ
SWtYj5+Vd+gy6kCYDRx8eHj9bHsj+V5HhVPQMp8ev6bydMuzrg+f37/puNZY
ujJ+grEWDS8INoSXkB/hHJC08zzqGTZ2cPBZc+WisHHDFChIVxCXU3cJii08
UH/r4bO3b151tJ4vz03zMRsuQ8IL8PAJ4sVUh1uFJaxtfo4GJKzn4Pt7ezNn
OOjJC/UMKwgpaVtExq+uamh+8uLN25dPb5ypLUiJdtTTEMMJQlYoSJRQ0rH0
ic6oa3uPovw/OcXBDw+bN69c6GqtTxUR6utXh+Ak1CwmxG04zsy5/NzDwZt1
m6ePtZAW6UmgRGQ0nALmlh67/Fe+9+Hp6QObo3zHmxobDDcxd5gwJWZp7pGr
KBeOsoOD7zta929bEx3oaaqrLEHC8vyttYbwCZFVDd1nrzj4+Pt//6r/KtZz
sOvGztTQURq0ngbgFVLSHz175Y5z9//i9ruHLeVrk9yMtCXwUDteDIGqbuwR
veJAB6olc2zi4Mf2hlVhHrqSJPrzFxCT03PyTymqaGht63j67AV87YsXz589
e/a0ez/Fi7cfmNqFw9r1op9f3T/feKL6aE1t3YnTZy9caW693X6v8/GTZ8+f
P+q819R4bEv2wrGjdSRJAnzdoyVkbROXuKzSFib6P+s5+OZaUaqXkSry8Ifw
C0mZO03fVtnch0afbx3bmTDJUpNKwPDyCAjT1K294wpPoq4EOzgILrdsU3Z0
mJ+zrZW+obHd2ClZO6s6/xrH+Xr7eFmS9+ihNCKme5JWUFp1+JSZixruoplk
YzkHP7efzg71GEbrSQYFSApW7tEl1df6PIhPN47vSwzy0JQlY/n5eAVw4jIa
1hMi1x1BOUvOCQ6+uXdw4wofZ0s5mujf3SpUkKZjN2XJrgvMLPbhFg5+f1i5
fo6zkYIQb08yqG7sMD93z52/W9a7x7er9+8u2FSwcfuOvVXHLrc9/Iq2tKzn
4JfHFfnL/d1ttRVoBCwf+AEwMRzfEMYwNh9WTHGYfXjCzrusuBKN9Rx8db1s
efR4Mx0lqriYqLicis4Yn9m7Tt78+4c+XKrYFGprIkfsHvXiERBRGOoQvrC4
7TWaKrCJg51n98WOtVZEknF+ooKe3fRlOy/cRVXE/yZO7qN/evPMhoXho4fJ
kwS6J8kpSjpuocn7zjJ1uRvrOfjySmGS1whFImLzBDE1l8lJdS1/y/ZeNFVm
htoPlyF0T3YSKepWk2ILjqMbVPzJrvnBH0/u3ThdX11WWrxlW9H+oyce/T1c
enT5yLJgB11pZJKKn6Y4dHJEPLotUSzn4ItLhxM8rZV65s94hOWMvOZsbPo7
i749vV6cFWs+QpUgCGEvH05EWsdyQnxOFbpWYD8HX54ty505wV5DliIgwD+E
h68vB4XEpI1dA3MOM3V/Lpdw8MeTCxvnTTBSEkEwKCgsaeHqW3D4XH9ifP/y
CuL5rjcfvjG7eY3lHPx450zmdG8DJWmhbgby4AjCcgryhvraukrCIrjuCR0+
DElO3SI4ZuMNVuwgZMO46OvW+oqinMz0pMSEhYnpy1eXVDT8MoT7o/XojkhH
C3kCnTK8JHkth/AFpe2ohnrZw8HvTQc3+NgYSnRPow3hFRSDgCp2VfG5mx1d
7z5+/vLly1fUodM/iJMcvFlXGuPlqEomgi0JEMg6Vp6phUceMreei/UcfHe7
NCt8pAYF6cgkCTWnSTH7z/3NE3Y0QDJlpSGB685qRaWGO/qllp5FHRuydf/g
t69fv3z7dfjm85XqzZFjTWSRwSserLS60dQ5GRc60IwtsJyDj07vnetoJodF
WgBH1bYLXXags18lfjyrLFpiazqUKIShh+iiyjo24Qlbb6OKFtnMwW83T5Qk
T/M0UJESwmKGYHB8RGEevr8WixHJspbjQzccY+rWey7h4IuWqiRfO3WJngk1
ElnB1nN60eEzDx4/fdzRfvFsQ+Xhg2Xle3ZXVB+/0PLkHQsGFlnOwVfXapb4
O2pLieIwWKKYlLaepW9IRNLCWUFuI9Sk8Fi+IXz8QtJKBn4zll/oZIErZss+
+m8fXz1++ODunbt37z969o9se9tYmjPZUl8cQ+9lfCJKI1xnLj3UiWpwkT0c
fHZ0U7KTsQaev3tkjhdLVRpqMSlkzuKMVbnrupWXl1e4pWjf4ZrWeyy455dz
HPxwb8+qec76KvTZW15xBR2PiPQjzUzt3/zJlvnB5/UlS13MNYS6Fynx4EVl
R9pMSl1bfuNRD4++dLbuXzF/vJ6qBHyAh19UTtPBd1bRSe5aJ/Ofdf9qfebC
aSO1ZHvWYuIkNE1cZ68sR7foleUc7DhZHmNnIov0UF6ijJ5L5JqjvyR6b47t
ynSw1CUiC/l4cTKqhlNngWtCM8PBVg4+vFabvSDQUkdBWBDDK4An0RTlR4wc
pjdMTEyY3sV5hGnytpPDd55BuVoPEZdw8NbJncEupjRCz9wUiSJnZjsuYWnG
mjXZqYnzpgX7Txg/zn3shEn+02ISlxSWHrj5lNkTjVjOwdfXj62OcDfTVlJW
1TRymBSbnldRU3/q6K7MaE8jdQoew8PLi6HKaU2ctuBEOzObdXo0IOeLfu28
siUhwkJFGmknHhxZx9o7ZWsDuvqwhYMvWrenBJlqUHssiUdYgqZpoG9pZ2Pv
0L01fbSNjY2Ti9tk/9CE9DXlRy52MZdPcYyDjy5XxAeOUUVWAAqKDrX0SNtS
xSwF2bNv4s7FAwlhTlrywhgMP5Yorqxl7OkTkZ61YWfxvj2bN69aED3Z0kCR
RI94hURVR9rNzth6jYkREs5x8OXNC8crtm9cGRc51VxPgySImBiOIj/CafKC
rWiXvLKcgw8b9sQ6mspg6IOHfESZEQ7TMyp+WUv5qqY0w9FSl4BDEit+qrzW
pDBwTWgSQvZx8O2DyxuWx9qbaIkRMLy8WBGq6giLCVMjY0P8PbXVZLuzCx5e
USlFl6kzDl5lZrkot3DwQuXGsaP1hXE9A784ioSK7ggbZ0cHB1vTkQaa6iqy
sjKS0rKKalqG5qMnBYRlrN/RxMwhDmzg4LeHTbuXzgwcPyE4Mn5tcWXz/Zff
f/54+/BKSWbEqBHyhO5VM3zi0spuAbMPNzN7KNzPgeHg8zO7V4Y5GUsL9TST
EFVltFfk9uO30H0dOzjYdb1uWZCLNgXfO2qCERKiSNPkFOXk5bq3QFLIZDJN
SkZFfaiZ9ZjA8IUFJdXMHKbBKQ4+q9mS6GGuRqQ7LZKUlmtIypErzGOQPfvo
392B6C9isoWGMplIlhCXVtTQMbKycXF3GetuY2s6VEOG1LMKAENVMvWfu72B
qREtDnHw29OTW7Lmh3g7W43UUJIRwiAQxBNEtczspi8vqEc3JPKTDRx8frkq
xXu0sjB9uTSvEE3DzCdmdf/dje/u7lo7z8pAtQeDQ3gkZFTcA6OPXEPjmtjF
wa47+/PSJ9gY0USEeIbwEsRk9czHRSflFe0syV403VxfjSQkwMMLTlXFM3hO
zU3UM8zd4g4Ofm2oWOc8agResMfB8hCFRORk5dTVlNRUFRQVpKRoIsIkQZAQ
QZwiqaGj7+oVuGTdztZn6AdIWb9O5nvX7YaqyorKs01trxnl+vroYP680fpK
eLpVkqjydt7hJY0od6v1Fcc5+P76ic1JoY7DZXt2dw7hEZLVtfRPyT//BGVO
xQ4Otp3cFeZqRhVizKTz4QgSNCl5RQVFOVkpcVFhQWz3dnocnkSRUtQ1tJ4S
Onfr3kuoT4jkDAc/3G3Inj1BF3nyPELKBo7zcw+yYnCdXeeqvbp/rrxwcaiv
k7qmkqgEWVSCKikpKyslKyUhTsIydtTy4uW0racl7TrP1FIfznDw3e2G1TP9
bYar00TwvevAAeZSChoT5qbvvYZyD323WL9e9P6FDXGT9eSQtRYCotIaNmPD
c3ac6ZvptV86sjBivLq8BGOWTVRS0ck3aheqZVfs4eCLxl1rIz2tlSnCUBEM
QULbyG52cl5N47UbVxqLs6JtjdRJkDfx8JNlIJNd1MDc6kPu4ODn4/vW2lsO
F+rl4BABPoyYuIScospQ3RFmVrbOLrajLdQVZUlCOAxWUFiMrDrUwH1KZE7x
SdQjjOzZP/jr6p2umqLFtsbq9OmSIULi0uaewQXHUCZQfcVZDn5oO1u0dI6H
mRaZsSWSQFGy8AzPPXQJ9cYDNnDwx+UjBV72RqK9AwsYvKisiraBtct436Dg
0GCvcS666orCOCwvD58AFi9OkR8x0il8bk7DLZTD7Bzh4PdrVRuDXYwouG4T
4ifJWnrOLD5xhyVfza7zRX+8uHyyfPHcQANdNRKJIIARxOHwBCE8DoPps/+Z
V0hS2dB1alLuzqZH6GnFGQ4+OLNv7lTPESqyBAwjxOLlEZDVNvBatObIAyY2
37B+/+DHh7VbFo831RTtXirDI0ikaoyw8Z2WWrizvrX96YsXT6+dO5qVOtNq
pCZB6K/W6J5l8wovOnkHRRXYwMFvN4+XJIW4j1CkQCV4sET5YSb+cSuqL96F
kPXTk2ulK6ZZD5fFd4dUAlQ5Pd+oVU1MDYtyCQc/1e/LsevLQai6KE1JZ+QY
3/DE7Lxtpbu3b92QEhtur6dFIQgJAgrFJbUNbIJisupuoCQhp+5d+nB8d5ad
qTaOzkEBYUk9J7/ley4z/+0c5OC7Ww1Fy2LHWg6nEXtXafHjxYeaOsVm7rjG
xGITduSDrfWlswPG6WooU8hkqpSstp6Jd+iczI07D9edajh96tDe4uULZzob
aFOEBPl5+DBYoqSctp1H+NriS+iyK05w8MPdPStn2uhII8cCiCkaeMfmXWAi
AekrdnHwy9MT+/LDfRyVZCS6j7HjEyAKi0lKy8jJykjTyCJEQT76CgcBkoTC
UCNXn7DlG3e3otqE/pNTHHzYVJOZGOsz3t3SWE9aQpSeEvLwCkgoaVtPjV5R
jvac9p/sOVft/oUjK2ZM1FOmCPLz8QkIiVEUhxvaTfCJmLcwNSU5MTJ0iqXJ
MAlx3JA+O5xJVHmbSdO3HkdzLAnLOfiwuTZ7QZCljgJBgKf7QEr5YQ5BC3bU
t/R00q5rO1N9LLTI9LMaBKUUzQJnb7jO3Ko3buHg3hw7C10ctjc+4REQV9C2
8Zq1ZufRax0vPn77/uHN8+aTh1fGBJmoyxNxghgsniyjOdozPKccJVM4xcGv
jfvWOpvr4OiBMA+eomk1KX5rA1NTm3RxiIPfXjZVbE6d7mkxTJLUO6DFI0hS
HW4WsiDjWDNTK8HYwcF3D68fKd+xKmNZclJiUkramg3b6s63PHvf25qfX18/
Xbk6LsREQx6PFeDh4ceTaMOMxsSmldxDNazCAQ523axNm+aqThVCBkVVjF3i
C2qYmgvpIzZx8GnrsYz4EFNdJSF6j8aLSGjq6Ht6+8fMi09atDAmyn+M5VBZ
CgGHFxKhSGkMN/bwi1yzsxbd5Vccmh989/RS48mD+8oL89fERwXbDtOQEBTC
YohkaTUTR6+YjC3n0G5lZsv5ou86T+5dFz3FWltBHA9pA44oRpZRURumZ2Bk
aKCnqaFEphB5/jrxEckHFey8w7efRHMbDms5+Onh5Y0r4hzNhooJ0cNuLFnd
YnJSYdVdxpjNk4tbFowzURXpXnPBi5dRtQ6J3cbEef/d4hYO7suxBw5iegMU
LFHNyC5m5a5rT/pM3Xx+1rBrbZC1gWz3cUb8QiSpYSbj5mdWPEZlgBy7h7ep
cvMUawMxLNKmYsrGHtFra5i4IaRHnODg24d1xflxPq7GqjTGaeG8gkSlYUZ+
0SkVjcxenMGmffRfP759+vjhg/v3Oh4+fvv5lywDrKgsN8jRUFa0exKRH0NU
UDcOjF5xAdWZOOzn4I+rlev9HMF+EAxSTVwDt9Sx6J5rdnHwec2WxV72+lRk
qQaGoKJjHBq7aNfhutbbdzrut109d3R7zkIfez15ColAwItRpLSNRgfGrai9
iWaxIif3Tfz49uX1086m+kNr54fbDFOVIBKJwhJy6iMcvcPXlJxCN7bOpvsm
3j++VlW6Oi50rLGOKkVcDAoq0n1gLYVCpVAkKWQpMaIE35A++9FFJRWdfaP2
X0Qz0MBSDn46szvb381MVrzn8DR+ory+bUTW1prrD+kP5+vrW6fKUvxstGn4
7uLzkWTUrP3nbrvK3CZF7uDgl4b9uU59OIglkUe6+ORXNvVbB9N5Zn/KZGtN
avf+Cn6MiJK2XWT8dnS7EDjGwdv1JeH2IyWRVdb8wvI6jhFp5feZ7p3s5uCX
V/f2blkdOs5xmBwF19tZIPhQ1TWeOjt536lrzD8gdt9H/296cGZ/sq+1liT9
xA0eAZq81sSw+fW30ZwFwHYOfnt0aN08Wz0FZFAUT9VwC0qtv8n8cEKP2MHB
D/fOZM3y1lckI4M7BJqK/ZTY0pqLb/8KSb4/vFaXnxhipq0gDOkKDk+W0xw9
MXLtoWsoxkY5v3/w5+eXlw5tjZk4Sl1KlIDDkcQltY3tohata0Z1+Q377uF9
//TWqSOl2Wnzpk50MzHU19TUUFNX19TW1jMysB3j4D7OxkSXJt5zAB6vuLSa
Z1DM0RY0ETorOfimvSQ92GqYFGMdAj9eWtvALXhGYuaa9eAc8levmD/dx0pb
rucATl4CVdHYbWrKjgNn7j1Fv1SGOzj481Ll5snWBqK9s+gECWlbr2m/LiR7
e71mZaidrhR9gpQHL6syKjSmEF1GzDEOdp7dt2CsuSKJ7sl48DLqliHztt5m
egchWzn49dXd0sJsHw97VWky4+AGHElC28Bs2rz0Q2daWXFC6oBxsKv5aIaf
3TAKHqmauLSyZ1A0us0s7Obgj8eX18/11pMXppeUj6pmHpS4HVXa9M9iBwfb
T5dN8xgl2XPpkoDUUMvIjNL+J+99e3q8ONvLQo9GFOLj4ceJyuiM9knYfApF
zQaAg91nEJ7InTfZSEOKIMgvIIiXVtGdGBZf1YxmuJqt99F///Di1tVzR/aX
bVqftzIrKyMzc1VOzqatW3aX7di8LjXEyVBVAhl85KfI6XhNTzt9B81R2yzk
4Jf7F/Jme+jJExiJKg8/iSqjoWdkaWvv6OToMNpipI6qnDiO4ZYEhckqembu
QeFzl69af7CuEV3n4BIOtp3cFelkIinYUzsSRdbBJ+LAL2dof7hdtybCfoQM
0nY4aSWLkOiCW6hmSDnGwZfNlUsDrDV6LuPFSCoZTJ2VeeUJs+fCsZGDbx4c
2rJqqoe9spRE73wtH1FMVs90zJyUnPoraGYQ/lEDxcE3LbXZwfa6kj2r5USl
lDwCZ1Wi2jnFbg4+b65c5GOnLILsBcOrjnRP2HSchSelsoODFysLPEfrETA9
o1qqZu6pxQ2/LKj80VJVFG5vJk/svhWh+wh6k3HR2ZWP///djuUcfNV86fjB
A3tKQeUHjpy8eucf7kn73HGxMMnfVEuKfgkWn5i0iovfzFJU+6HYysGf3UdR
fuh69erFy1cvX77qev3m/cePX798fPv87pmKTTPcR6mII9tABKVUTQPm5KHb
2cxCDr650bAiwGXoX/t/4fFihAiiZApNSkpaSpIqIUrCCfRZdDyEFyMkSpNR
1dUzdfaYvHB5btMTNOPTXMLBZ81H0/zt1MSRk4q6r24fPT6kuKG/y+26fjQj
zE5HCrmoFCetYhUau5nL88EP7cdXRzoMk0IuouGlyGl5hSecRrcso4/YxcEv
T0/tWBc1zklThtI7e8BPIisbWXrHL9t+jrnNqv3Ejn0T7ZfOVO7fW7JjR9H2
krIDxy62/YMTe3blcHqgjRa1x9jEZdTGh8Ydu4lmRIjdHLxRty3A0UgCmRzE
iRs6+62vRnkpwD+KDRz8fubAOhdznZ6l31gRdYuxC4tO/+qbbtQURzmYy+Hp
A2AYMSVDj5krK1FcgcdiDr5/UL06fbav91gXkOfkgOjl+TVPfpk6ft12anX0
BD1FMaSWIrTuybUyVBsh2cfBL++7Hnfcud7SfK3l5ot+DfDt5Znda/3sjGh4
ZL6GpKzvNDNj3wNU2TMrOXj7Yla4r6m6ogSJgAMJEQhEYWEREVH4QSQShHAY
vn7X+EAYghUiiFCoskP1rELmZJ2/j+Z+Vy7h4NdHTVuSAoxUJJCEUEiEamAz
PmX90X6pXnvDzpkTzWR6LqsnyGnbhyfvvovq1iyOcfD7o4uFCd76SqK9o3Dd
px/Uokti+4g9HHx/7UjhQj83fUUaY3xegCg51Hzi3KU7GplcmvyLWM/BJy1F
yxeFeE8c4+jk6OQ20TcqZfW+tv5D0F9bqgqnuxlJ9lxWz0dV0fOdvfw8qkOS
2czBT6fLV44x00ZCKKyIjJ1XxN5LnUx/7V9ixz28Fw9tHG85vOe6A4ywor5D
WHrJrf6d9M2ZXTmTLfV6DqrFiqmajY9ZV4viiBwWc/DJtR0JIc4GmgqSVJqk
nKaulU9YWuXlfpvTvjfXFkVNsJAV7bkrVUxGfWxwbHUrmmyKLRz88uR45Z71
a7PTUhLjFyakZ+YeOnfn79VsKUmZaaMpj0z98xEkDRx8s8ovoNsHycr5wa5H
VUUFKXPnhAUH+vr6TJo0caynh4uz/ehRpiN1h2qpKEiTRbB/u25iCD8WJywm
ISmlMEzPNnRO7uVONK6bSzj48+vjuu3pHqYayB3i/DhhpaHm3hGLd55o+2s1
aNet/evmOhsp9p7KJKZhNi5uXQ26Q8o4xsHue/2WhY3svddPmCbv5Bu55yL6
DUeI2MHBzgsHM+b4WGjJEf+yND4RaQ0Hv7j1ZfW3HrJseQYilnPw452zayKn
jtJWl6FQKFQZFW0TV9/YvP2X+pLwa+eVHWkzRmvJ9GSD/AQVQ/sZmbva0USR
7ObgiyObEq30FPl7BklUPYMST7Sz4tauXrFjXPT2iV2RjiY0xFvx4qjK+mP8
4wurWvr62NdtZ/MXTBupLIlUjZdIHe4wZUnpWRRDWizm4KubZUvCRg+TJWH5
efmwIhQFE9sJi1Ztvdr512N/1n5udXKEyVDZ3p0HGBl148A5qy6j2jrBDg6+
bju9PH6mm6ONkaG+vqGJvbvPvBVb/7p67NvzC3tyZriaypN6OC4srT3GP7Hi
EsqT+li7b+LNo46WK5fPNJ4+ceJ4bW1N5ZFD+/eWle7Yujk/d3XGkvjoME87
IykyiXGqjwhVarjpKBe38QHBMRlrDz5A1T+4hYPgQBr3LJhqo0yh36LMixGl
Ketbj522ILNo7/Gr19vbrp47kLdkmquJvGiP9WElFM3HhW2oRnntFOc4+PH+
njUxpkNle1JdcelRE0K3nEB/wD4i1nPw5Y3iFXFuJj3bU3utDCMhq2bp6jN7
YXrO+sIdJbvKQLt3lZbsBO3es/9YY9MTtAd8sZyDPx5e2xYfaqkuSxDg4+ER
wItKaRra+85K31ze0Pbw9edPn57evly+JnWKlQGNcV26hJy5Z+C6w5fQtTd7
OfgJLCfadJhMzzympI739Kwm1lzu3SN2cPBl6/HMMBdtGnIdOi9eXE7HbExQ
7PJte0/duPes69WLtiunNi5f4G6qK9a7PhwvpWo7ZUbJaTSbuFnMwe/PG3au
mDxKB7m3ix9LlFPTdZkUmLp64966xgtXm+qr96xImmVrOkxYsKfwvEIUXcux
yfmH0W2GYgcHX9w4uXial76KnBiRSBIWl1PVtR8XmJK94cDR+tMna8rWL5/t
ZasjLczbG+qq6jvOXLHrFto4lwP38P749vXz+7fPH965ULcvY66vvqYMspaE
F4tT0TUKmZtSsL28pv7i3Ucoj0jkHg5+edqye+18u5Ga9CPQeSAlpMprGlg4
T/KdPmfO3DnTg8aOMlIh986f8uBlhlpMScg93YFyPRjnOPjtyaFNyZZ6yvzI
/ejCNMMxU1cfambyW1nOwdvHd8zytlehEP826DCEjyBKUdaCgMvGyWWMG8h1
jIuzk4O9vb2Do/uEyTMXZR7sP2r0u2L9uOjnZ6d2rJxqpU/FIQtLBEVpSsNN
HL38Zy1KW5G1Yln8rGluFgZywr0bQQSICiMsg5Nzz3aitCL2cvBV67a0IH0V
MmLxElL6flG5rcxvPe0jtuwffN1+eP1CdxMNEfomel4MgSyjpm/u5DU1akFi
alrKolnTpo421qEQsL2tQFLQtw5cvPESqiNlWL5O5uHl6szZPvoqNPqQLR9e
RALs38rZwzs4LCwizGeim9FwdWE8Yxc6lqqk5xGasv8cyiN+2MHBL49atqVE
jdKWx3cvKeEVJIgpqOtaO7pN8Q8M8vMeM8pIXUqktwICYlI6DpPmba9FH5lz
4j76Xr3vvLIjY4b5cEWEg1iihInD2NUllW1PmBqt4h4OQuvdPHdk6YJpI3VU
iThBXj4BrJCwBE1ORVVbZ+gwTWV5CvGvOSsRaW2rsTPXHbyM+mA/znHwZ1dt
8QobIw0MskCZRNO1m5yyvZHJ4S0Wc/BTx6HcWBcjZcLfx97pITGOJCpOlZSS
7paUJI1KlhAXExMVl6DIq+s4+kQVHL2OrgrsWC/65OqJ/MRISx1VQvd5zjx8
WII4VU5Nc7jxSFNTY4OhqgoS+F73OwQrrqRjHzBvS10L6m0gbOXgt4fn8uI8
h8kisR8vWdrIPyrvOvdz8Of3uxeOZM4NNB6qKCSIGcLLj8GRoCOraujoGxgZ
6OmqKsoQcX9xRExRx3bq3IJjrei6HOv3Tbx/dGp/QbS/s7YiFYfl5xfA4IXF
aLLySuoaamoq0pISggKMpRr8wjR1c6eQrKITqJuFLfODP16fr9g0a4KlKpW+
tJ6HT4goQpORU1ZRVpKTliAyRnz4iWQ1E5uQZRuOdaKaF0DESQ5CrluaEWU+
TK7nwg8xOcdJkfvOMHVlyU/u4iD4wRfnju1bOj/SzkhXSlwEh6XfMEEgEgl4
nEDvhhE+IQk5LVO3sCWbjqLa7NIjDnLw47mKDd62I2miwoIQmUmrjXQJSCo8
he4UKYZYy8HPD86ti/Y2VpT4+2FL9C7EL4AVxOGEhIRwuO7LGvj5eXnpQ9f8
GFFJBQvPoFy0uS1b9k18fX2l7sCy+RF2RjqSYiKCYEI4AklYtJvcwuB9GWtg
8WSloRbeUVnlJ5nppWzl4Of7DeuiXXRlkQFGrJSCadDM/OssuG3pL7HrfNFP
z84e3Z08J8TMYKiEmAjYD7QCkSQiKgqNABFKjxvmwRKpysMsJkVllB7vQBuL
sGP/4LvHN6p2r58b7m08XJ0sJgzGj8Pj8QSCEE6QjzFpgCFS5LVMXUPS8g/d
YGIZNZvWi7590LR/Y2qoh4mWjBgRK4DBYKAP44UgMEHGpbofPlle28Q1NC3v
yA3mLoLjKAefX9ueEmCqQaPvQ+MVl9QaH5R6CvWQbq+4i4MQyHx40XSqemNG
SugkVyNdTTkZKSqZLC4mKiIMEiVTZdV1LCYEz8/ddfwOmvM//hIHOfjz3oXK
lGl+o80tTc1tx0wIjE5Zt+80d62TedfekBE91XK4ujRFQkxMTFyCTKXRJKUg
B5SRke2WjIwMPRmkUSj0dFBMVIJCU9Ic7jwlamM1F+WD3frw4sqpqoKstOm+
40z0dRTlZWlUMCIJMXDCJFK3FdHkNXStJ4Yl5O0/jW6hOENs5eCPJ5e2J/va
6yvJUCQkpZQNTN3nJG69zdJdleziIMQjb56crTu0ZkVykM9YY31dRXk5KUlJ
arf1dBuYmDiZJqusbeowZVbKxoONqNbq9ohN++jfPrtzsqps5ZJ4/0ljjPWG
KSnKS0lJUsjkvwpv4jA5clF+2Yl25iJatu2b+P709tmDRasSo/zdzAyHqSjJ
y9BHc6jda8ik5FWg/N5Ryfnlp+4wGZFzmINvbu/PnuE5apiSDFVSSl7X0D58
7trmR8we7MFtHOzWj48dN5qO7ivJyUyfFx0VEjjV18dn8mQfP//QmbGLVq4v
qbvwy1r4/784ycHvrzpOHdxftHX79p3lh2oarrQ9Zf7uuL4c/PixZ1AD/bjo
mwe1+4rXZCxNTlqUuGhRUnIy9MrUVPiRnAxvLVqUsHDhgvnz4+Ji58yZPXNm
VGRkRFTUjLj45DVbyi+iZQk799F/eth2re5wef6azIR5c6aHBk7x8Z40EeTt
FzAtel7qmoKy45eZu7GMLvbOD355fL5i44rEmNkzZ8XNT161rvjE+fvMfuff
xT4Oduvbh7s3rx49uCdvTXbSwnkzIsKDg4IC/AODgkMjZ8UkLM7aWHLwTGsH
EwNy3WLjeTKfX7e3Xqw6UJqfk5WatDB2zmyw+/DwyKjZcQvTstYXHzx97QET
I1I9Yus++ndP7lw+UbW7ID87PTVx/lzovXPmxMTNi09etnJDyaHTLR3Ml/8n
hzn48+3NU/u25GakpySlpKSvzt1afZIFO2q5kYN0/fj09tH99ubLFxobTp44
fvz4iVON5y9fb+98zUTo2Fec5GC3vn55//7jZ9Z9K4s52L3r9vWjhx33799/
0NHR2fmQrs7Ozg5wlffu3QM/39Z2++bNG9dbW641X716penq1eYbt+8+e4se
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
uSAu0MNaT12ORhEj4PEiDGMqwFyxwhKoMsrG9sPiFq0+X83W3R/8wMEfb5pP
Fe5Yvmh+YnzstKipkRHhoZNDgoPHjhzpP8zL08lhiJWZqbamhpKigqwMXUqS
JkGlSkhKK2kOdAmMWFtcjWxKcomDIB9etFw9e3RN1qJpk4OG2pvpa6koystA
w+l0GWU1rUEuPlFJ6XtOXG9jrxoAt84PfnlVXXZ6c9biiLEjrEwMVZQUZeid
z5wKATlFQoqupD3QMSA0efWec2zn7HPrHP3rtjvniwsyFsQH+Tib6GspystK
S0lSKeJiYiQSSUyCJq2ubeg9KjxjbeHtB4jD8S7hGQe/PW84ujl3XkJsRNiU
yMi4uanZ+4/dZD9nkfcc/PGm4cSGuVFjfT1dXT28RoSEJ6/Zxtd1tr+33diR
OsbNXFVBVlpORdfSddysrGIEVeX/k3Dtvokfn189uXn++OYVS2JDRrtbmuqp
qijKycpIMy0ohSYlraql7+4/PjV725U6tjxaLp6j//TyXuXFQzvXpM2NDwka
7mRnraulqaQgLycnp6yqYWHvFjx11uodR6ua2bmxpFP4goPAjlftTffv1dXW
VFXdrrx1s/z61UuXLpw5XXL08KG9u3Zt2bAhZ2XW0vQlqQvmzUlOmjEjIS4h
YVZKas7mfTeaEcby3ONgp3z/0Pqg7kpp8Z5teTmZ6YsXLoBJvnDRkpW56w8U
l9Y2cSDbrCcHP3zoWp3k0Dn6z633a0qLi9bnrkidl5wQFxMVGTllSkRkVOys
lPQ1m4ouVDQhOTb/m3Cvnsz3D+33bl85um97TsbipBmxkVNCQyYEjwseN3FS
aEzi7MzcTSUXK59zoi4WD+9d+vGipamm8lZ5+Y1blTX3Hz7jyA5VH3Dwx9cn
tVfOHjtYVHjgyNFTl6/XtbF3bQPX82S+td06sSU7bc7spNnzF2et33H8Rj1H
pn+XcI+DDPn09MGdq6eO7Vq/JnNR6pxZM+JjY0DpYuLiklLmrVy76fj58tZX
7Nk67teT+fjqSUPNjdITRwryN6/KXpmxbNmyjOWr1q7fe+jEjdqmt5yIzfmE
g/9Fvn39+uHdu5cvOp4+fdLyuLnpQeO9e3fv3Ll7r/Hh8zfItxW4y8Fu+fTu
VfuzJy0tjx8/bnny9Pmb9xzbX+cmBxny7fOL508e3K+vra6qvHWr4lZldW39
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
Nm/Zum37zoJde/bs3b+/sOjgwWPHis+dO3/t2o2qqpp79+63PG1HNt484OCH
jqazxfuyl6VOj5g8KsB/2DDvYT6+o0aPnRozc+nKjQdPlj9j44QcVzn47nnj
uRNFG3KzFs5LToyLhS+MiU1Inrt45Zr8QyeuNrM1d34Ktzn49fWTinMndm1a
m5m2MCVpViJY/IQZSUkpi5ZkrttYcOzUTTY7wnUOfnpx++yxjVlL4iMnj/L3
9fQY6ubm7u7h5TNi9ITIhNTMDUUnKzrY88l5zMGPT+r2bMiYFj4hMHDUxIio
xavzLz9g1yfhNw62VpUsSYkd6e/t6GBva2NtaWFuamJsOFBfR1tDVVVRTlaK
JkERp1BpsuoD7UfFrSppQerO8JSDn9rObMqc5ONsoK4sLSVNV9Yx85w4Z1sZ
OwfkfuFgj/ODnODgu+pTO9Jigj3tTLQUZaWoFCqFIgFC6/xPUoquoKJuaGHn
FTgxafmG49VtiP8MNzj4rbkyPzluzFBXe2trKytrG1u7Tng7Ojm7uIL6D/Xw
8PTy8vHxGTEiYNy44NDJ4VOnTotPmJmanrnryKknfz6XuMzBTw8qitdnzg4e
6WVjYaShpiwrKyMtLU2nyygqqegamAx28g4OS8zZUnjnGUJDxjUOvqsvO7I2
PWn8KB+HQVYmRgP1dHW0tbV19QxMzKwdXLzHTopJX7PjfC3yycMSbnLwY+O1
E5sz50eODXB3GGRpamxooK+vp6evb2BoZGJpNcjF3W/c5Pglq3ecuN3yHenf
4CoHv7Y/OLxtTcyEQEcrMy1VZVm6tKSkJA3+k6bLKihr6JnYOQ6bED5r7fZD
D14i7gFvOfjyYfGG5RPAlmqqyCso6BhbjoyYubusic1v5TMOfrx6cNU4P0dN
VXmqOFkUhEgkEgh4PA6LxaDRwkJCAgNABIQwRElVI/fw+XsakBaT5iUH71/c
nzLRz0hFBo8ShNYLi0qp2fhH555lp3BYTw5+4CgHn5QfWxY3boiRmqSoiLDA
ACEhYTyRRO1UHhpZTBSLFRHB4cWokopaBoO8gxIytt5oRfisuMHB9lunFo/x
s1BRlCSRRAlEURKJTAa/iSpBA4JLMSBCl5WVVVBQUFFRUVfX0NLU1h9oPMTN
J25B5rXmP55M3OTgh7oLBUtnjHOzG6goI0HE4zA9REQESyCK0aQVdAwtfYJC
l2850IzI3nOHg68qD25dGBHkbGmgJCNJFiMxFZnQKUSSmDh4Ulr6Zs6+Y+KW
rD1SwW6xEa5x8ENdacHSuGAPO2N1eWkK9IJIhH6QQEShRySyuIS0jJKmvvkQ
76DI+asKyxBWD+MiBz8+Pbkle5Kvm56SnBgeixIWRqHRIlgsFoeDCYQRweKJ
ZEm6kr6x7YjgKTnbD7YijQp5x8GXzWe2ZEf4OGvL0rDCgoLCKKqcivuYyD1X
HrD5xfzFwS8tR9fNcrXSJhPQAxgiICgkzBAUGoXBimBxWBwedIkiKatuYucX
s2DbPaSbSDzj4JfWW/mLo12NNcgYQWanBohQFM19p606w04JYG5x8P3jwxlJ
w610pfDCzMbiRKmqWnr2Lp4Bo0b5eDjrqiuK4rHCaAyORJHTMHIbNS13bwUy
BeIGBx9fPTrbz02XRsEKCnTNoM4pBAagEx4gGAxMJfhfdCdOOn9gRcUk1PWt
xkenX37wx7UoucfBJ7eKl88c52CqKiGKYXREGEsQo0nRO0NCSSoRLyLU2TGM
KJmmbmA+Iixx+zkk1Yy5wcEHF/YtDh9pp6tEwWMEBAQEUViiGAXcKAmqOLHL
GosQxSTk1fVtPQJj0jddZm+rmUscfFp5PHNGsIOxGo2IYTrfGBxBXIImTZeW
okmQiHiYQig0Fk+i0lV0LVwCpqduuNKEZIWaexy8f65wVrCfnrwUiqnJQhgS
VVJeSVlDW0tBQVZMFI+CocDggOc6RpaB4Qk7ziK8eo83HHx+v2J3bvokb2cd
WRqmy5IOEJNS9Bg39Ugluxe78BcHO2q2zRtnpSmJ7rJhaKK4pKycvJKSsrqG
xkBTExt7e+ehXr4BQRPDY+amrT18tgZxMM8rDr4s25cV6m2tRMENYAmGomjq
My3nNDv7u1zaH3xZe27heF99aTJzBARFyJqG9pNiUjbuLDx5qqRoz9bUxPAh
AzXFOw0ahkim61t4xC3cef8Nkr/FDQ62VZ6eN3m0la6mnLRU5zIu2N/OMJDe
KdLSkjSKGFEELTSgp6BxZHX9QaEJORWP/7iYHrc4+OLe3uUzh9no0gjMtgoS
xOhaBjZ+oyfFJs6cGT9t9DAHNTkJNEpIUBhNkpA1sh82Y8VeBGaY8xx8Vr1t
4TR3Y3VKNz1I0sq6Fo6+gcETJwT7utppKEjiMCghYTROFPyogU4jwpZvO8fO
DhtXOPiu+VBmkp+VLg3X5bsKY0Xl1bQHuXmPnRQaHhbi7+WgpSKDE0HD88cQ
yHRVA2f/8JyCMgQg5BYH3zYfSJ851FCDINBFQTG6qqXr8PD42YuWLZufkjjW
z0FDQQIrAh4hliIlZzrEa0bW1vuI9tm4zcGXbQ0niranzpjq5WClKk1F91Be
cbqa36S40np2bxXhKw5+bipbHe1lqEBkTj6MuKyO7bCJUTPmL16Wk7tmy44d
e4sOHj1RcvZCWfmtuoetbO1P84aDbbdOpkWPMlWTwvQYuwFoipKhd9SSYgQb
UizhEgfvlu4a72ZNw3ahQkLJIGDqosMXql8xQr7vHzoqzh6YFx6gqySNhbBK
RFRBw2x8dNq1ZiSeMDc4+Lm96cS+nSuXps2bm5KcnDw7OTlpdhIo44yEhNjp
UZMnjPZxszPWkBDDCXQPhiCJpmDlNGJx3tFnfLM/ePfUjtiRLmo0Qtd8IUjr
mw+LnpNz6NSV2vp7dZXXDm7LCR/hpCpDxWLQWKK4ir7VuLi0i3+eLcBxDjaU
bp/m76Dc7fVhJRRN3MfNyNhYVHLuwvmzhdvWJIYOH6hOx4mggCAEspSm8ZCJ
8ZkXGpDnOXCDg09vlyQFD9OQFO2aIwIYWU3DkWHxa3YUnrty7frVi4d2b5wV
OdpQUx44IiCExotJ6Zo5R8/Pq//zOcslDn55fCsnYbKlhjzT8oiIy5u4jV+Y
t+9ydUPL07b7dTeKtiyb6G2uKEnAoAQxOKKijklQ9Lxz918h+Fvc4+DzhrIj
e/JSZ0f7e7sY6WrQyMRffVghSQWDoMi0Gy3sXovAVxx8WX1yUZCDJlWEGYpI
a1uNTlhRVHrz/uNnb95zNtuaJxx81ViYlTzMSpeK+3X0UOJKuu6Ryfsevkf+
3VziYPnR9d6DDHHMNVFhvJaVe+qWkp6A+PLszu7sWYNMNAlYsAAYKUWdkeGz
zjUgSfnh0rmJj29etT5ubmpqegD/PXzY+eLBg4b6u1UVV08f3b02I2Gch74S
rWvJAUOkapkMDp+94kItkuicKxx8eX9XaoyznjK+a7pgFbRtJ8/KPVvRzFr9
eNVctXfNPF8XG3UVRTlFZQML++CY+Ucqn/zpn+I0B5+V5M0eaqaO74qi8CrG
jjGZ2680dM2gDx0PS4vyIgNslaWIaGEgIY4mp+XgF7666BZi7eYGByuPbwxy
tWCpLVZSeVDg9I1HLrW87Wrm51ePS4s2RgQ4KkmTO4NyDF5e3XBs1Nyypj/e
YuZWPPj60bEdaxMjxrs52OoZGJo7DovJ2Hnj0c+Fm5bbp1YmjjLVlMahBQSE
UBIKGp4TYvZdf4TgT3GLgy/v7lmZPHG4q6m+hjSNAtG3wIBeIiKjajUxbm0d
21fT8BUHH18tSvSyUyZ2ujBCWDEta4/E3EO1rWzQ4j8L9zn49faJbTEjXdSl
SL2GT0CYrKjpNCVxeyMS56tLuMbBPC87AxGGARDEihs7Bqw59qsx/PDo0Pq5
DhZaeIwQ9ISmoBUQPqP0HhKI8Pwc/efW+rJdOdEBDmrMMRHEEOW1zUZMnVd4
EeGM5QYHn9wsnhHkoUolMmcLhiRv6zF5w6Ebv4ZM3x/cOrM2a0lCXMy0mLjk
1KVb9p9AkDPGYQ6+qt0+f4yFGkWgy42StfOetuv8vZ4fedt8c2tapK2+IkFE
eICAEE5MSs/KM37p7gdIT39wgYPfb5/cPHmEs7qCtKgoUYwmo2s7NGbl3rqO
XzZhnt+5tCppvKmmLBYlMEBQmCav7jcp9nj1H7si3Nsf7Hh8r6z05J6Cres2
bNxWeKzy8S+G9OOjm1sWTLLWlcV2Or0CZLqy65ipBZeRJJxwiYOPbhyOD/bW
V5Eh4jBCQsJojAgOKyL8SzhIlNdxDJ+3+wHbiOArDtad2THe2UISh2YokbiO
zdBZufsqGlpevHrzsqPjedvTZ8863n1Cnt/bU7jNwVf3r2bNDrPSUcShGM6x
0E8YCqBIiur2YXGbG9iw9FziYP3l/VM8bSUZuoHCUQxsfeauLnnaw1n/8Lh8
/bwQM03pzs13AbS0mtGY6CVXHyFZ1+I9B+sv75sX6WWkxkhZEkBR5LQdRk5f
d+gq4hV2LnDw8/WiVSMcTMgizJhKiKpg6BeWfuq3WO/7x1cPGu5WVd2uqqm7
/6j1LaIJy2EOtl7Ni/ccKIdlznOihI7vhPTLjb1I9OLS3pWj7YykCCKgEsIY
ooKWxdiY9CuPECa0cCMefH7/xp78NQvnzY6Pi42fkZSWs+nsnd47UJ8f385f
MMVaV565h0CRUfaeMP3o7T9Of+X2+cFPnz68+/APRvPZrZKl4X76smTGPBOg
yGp6j487fAtJ+i53OPi94uTmQA9bGQkxEREsiSKppKZhbmVjY26oQCExl0oE
MWQlE8+orOI/dj5+E37i4LfrR/J8BhuTRFCMeFBUxcAiIDR24dLMFStWZKSn
L164aPGS9JWr8woKj16/w26CEHc5+OXpyc1LAhyMJUVFBAQFsWSKpJqGgiod
K4YBIAqhSAqqdpNjNtSzcYCQSxx823Rz3exJFupSOCFBmH3KOjajwlK3HrvR
8qZTkz62N5TsSJvoaUonoRhL12QNc9dpGbsbEDnzPObgt2fVOzMShlqqkxl2
GkuWMR4yckHekUZEST5M4TwHv7QcWpXgYKTchUEBEbqGxZj4lSev1TW3Pnn8
6EH93drbVbcrb9fcaWh+/ordoj6c5eCXh+dXT3fWpzMTGQQpdOOgiNVVv6Uw
3Dm1Y6qztSKRkYMigKYpaHtNSDhYgdCYcSlf9FX7k8aG+rq62jv37j95+Q/z
+3X95eypgUZyVObiKUUW4sG4U3V/fBaqT+qqfWqtO5iZEmChS2WuNQpiFbQs
x8dkXX+I5HFxh4OfrxdvGOvnrK2prq6l7+AZED1r3orsFQsSQ20MNMjYzjkm
iJNQt/GPX3+O/Ru7+YmD70r3ZLpY6+OY+XyCaLKUnK6xxeAhDg729rbW1pbm
FpaW1vaOLn6jxsWmLNlxsKSVjSoCXOXgg7IDs0O8tWTFhQUFMaIUVUMz77FB
/sPtVVSkRETQwiiinLLFhGmra9jIcuJaPZmX1w5viBllqyNDlCAQ6HRVU1vP
cRGz0lbkrl27Kn1u7Bgva3U6c7caRZHVcQ6I3lSCMN2atxx8W344J8LPRpHC
2H1GEZUHDgqfu7YMWaprt3Ceg09vb0oOMlendq3/CIlIKeu7+IfMnLtw8aLU
OUkzYmOmR02Pjk2cvXDp6h37zj14xtaF0Zzl4OeH51ZNd9Tr4qAwTc5kTOTq
mt+M1P1ze2PdBqkQmblKAqJSSvYjwreUNiDrQh/VF/1afSI/0stOltgFfUkV
w6Bpadce/bFHyFMOfm+vuXHh4K7NS2dN97czVRDtitxJEnI2LqOWbT6FbGGE
S+uiDeXHlqYmx8TPWLh8dWHxueq7DQ215fvXL3SzMxIniDCWRSV1HUcv3HuD
/THmJw4+O7ohZbCxGiutHSWCp9CkZGXlZGXokhIS4mSymBiZSpNSVNU0s3UI
mhS1emtR8x8f+eoS7nHw29OqbYujnQxViChBQRReTtPYNywmIzd7fmKw+UAV
UTxGWBhHVzQcE7noejPyNCfu1VV7fvfitmWxo6y11akkKokiI6+mZ2w5qNMb
sTMz1JSjEZgmGkuSM7Ufs3DtUcQ1jXjJwRd3zy5LCDRRk2BMLgExOR3XCUm7
LtSz+bUc5+Dbu6XpE911pbqz3QcIkSjSGrrG1naDB9nZWJga6+vpauvo6hua
2Q3xHDspYXX+gQcvkWeQcZaDX1sur0t0M5BjHpkQosro+4UsOH+/d9BaV7Ij
wtVWnmHKOicSRdbUY/yyAwhTZfqEg28fXM9LibDVlO0+modXNXaKStuFIO+V
hxz8WFWyKTVh0vChQ0y0VSXxXc9fhEgdaOUYv2jtzSaEmswlDn5/97SmqrKy
pv5JR3fDPj45sXWRm42eKHPjhiRl6jl+ZTFCP7yn8BEH3zXuWxFjrS/P2gkV
EEaLilOlZeUVFORl6FJkEhGNQgkJCWNweKqUjK6R5cgJMRv2XUO2wc41Dr6+
XpQV5mUhJybSmZMvqTrYOyxr66HzF05vzogdYq4lhscICaGl5LVGhiddfIA8
GOEeB180Xtu1YtZwax1ZEg6LgodNokh0VmKhSYgTsajuwUHTVa0j5m680YR8
aY53HPzy5MSG+cMH6ZAZSeSCeMmB9qMW5Ze0sBVLdQrHOdhSfmSm7xBVkghr
NxmDwdNpdBVlFTU1VWVFOUkahQgiSqZJKegaWgcER+TuOPwM6Wzl8P7gy+qd
acHmGhSmsyFKUxnsG7r6aOUvm1Nfn53OT/O31qd0l5VAkaR1HUYnby1D5tLy
noPfn98rXLVgxCAjKkagG+XyNt7j1xwqRzAOPOPg92dV2xZEeNvoK9LEMD+z
FYRlVM3CZy2/UI28sA/v6sl8f1q8cY6TuQaOYYcw4nRb/8lbLjay/8V8xMGO
6m0Lg801JVhnDPBiFGUtPVtXr9ETJ4eHh44e7jlQU5mExQgKACFFxCVkDcyd
w+JXnqtDQhMucbC9+lR67EhjFQmUwAAhnLi2hfuMjB03G548f1x/cF2Ki6U2
CYcS6MwuU/MPiz93H7mp5xYHvz0tO5gbP85dT57CSAAQQosQSWJUKkWciOuh
PUJEZQPHqWm76pDWtfvBQw4+vn54ziQvTWlmBiZKWt0ieOaqSw1IlxJ6CMc5
eKe0YIKLlRTu51lhFAorJSmrqWNgamvv5O5mP8hCWYGOw4qgMVgytbMSSNCU
xIIzCF1iDnPwe9uZnQvdrDQ6UyjBVSLStCxcQudkn6hgZeN/ayw/mjpt1EAl
SZa7K0iU0rAbmbj+ArJFOR5z8FtH4+H1y8a52SqIdVfGEMAr6tlOSll9/RES
n5BnHHxedWp+6AhTTXlRVmGrTgwSNIwck1YUsLM/wDsOfmranzXVVr8rDMdT
5ZyDIooq2S3N94O/OFhTsDjEyURJgoQVwWDEqJI6xpZjI+NXb9t7+lLZtatl
x4t2LU2a5m6sI4ETERIQRKHxUnJaDl6hK7dfRTD/uMLBdw+PZqf4WmlTRAQ7
zxSoGPhELjx6g2EEvnac3rbYzUqHhO1MF5eQVx0eGnumAfkGL3c4+O3Ohd0L
pg630JYlMKYaGkuSklXV1jW3sR5saaQvJ0EW6l4IomuY+0akFpQhT1jiEQff
PjqYkeRhpMbMMRMWlbEaOjnvEAf2FH5wgYPlxRt97E1IIj8PnIqIUtUNLHyC
p87LWpu/q2DThpzEqcEmempEHBYt0lkJxGSwZ/zSLXcROSQcP0d/7+rBWRM9
1KRIjIRcHE1B08Y9YHpKxpaCQ6dOlRwqWDs3ZtwgYzWSSI/0abykmk1A3Nrz
yMablxz88PTenrylY4YOVqJ2H7EfIEiW1nYaHru5uArZui7vOFhzfmncVF8X
B1M9dRqpC+ICKIKyrsW42EX7rzcj/mbecbDj9uaUUaaqzBzXAaKSyt4TY0vu
/v+6d+lL2+XC3HmxoWMDhvv5+AaOmZCcln2irLKddYD+0+vaS8ezYidYqMnh
UeBOCuGIkrqm7jHztzf+uRHgBgfrS3fNGO2mISkKwyRCopk4+y8rON2dE/rx
UuFKj8GGJDx6gKAQVVbZa3zk0Srkc48bHHzffH3V/IghJqokxvqhAIYgr2E4
dOTk5IXZGzblr1+VNTMy2E4X/hUlJCxCklI2dhoZt2znbaTTkDccbL5SNGv0
UNWuCifC0prWISkbbrZwpl4Qpzn45dKhXDc7Qxya5bEL05T1XIPj1xSerWvp
eP/l86v2x5dL9s2eMkpPmY4TwYjgReU0jHzDZh+sQHJ3A8c5+KX93uENi0fa
GdEJOGFBYRECWUZZy9TG0ctn5JjRo3yH2pvoqVB7rPoyOahqHRC7ht85+KLp
Vn5O6nA3O3kJEqvxBLKyuX3w4twTj5CuLvBuf/B125WSE3u25a/OTIsPGztY
R1Ucg0ajsBKyqlZuI+OXb73einCjmWcc/Pzw8qrpHgZyXRAn07VHhC28gigM
7yV8xEGww20NlVcvnC05WXLy1MUr5U1Pf8Pbh6cXd+dMGGwsQ8CCpRBCEeTV
zcZOW3L1zx8Fxzn4+fGNjfMjh+gpMUpCCkgo6wTGLj5Tw5oDr88X5ngMMRYj
iAgICpGl5Ab7jM4uOt+GNFOGCxz8VH4oJ9jbik7uWpSjKmh5hyRsKjx799Hz
dx8+vX7ecrP0cEbiJAsdJSIejyVSZDVMPILiNhyoQdYFXnDw0+NDq2d5mKri
ukyutKnbxNzDN9ktw9QtnObgp3NFq5xtDURQXeGSoAhJ18Z9Tt7B+h73pX5/
9ejoxjQfS30JAlZYGA0OibXP5KyDtxGgnRt1th/fvrB5UaKftZECRQyPxRGI
YhKSdAUFZVUVJQU5aSqVjMeL9FiYGyAEHLQaEZt7DtkpIt5wsPn2mTVL4r0c
zOkU4k+AkxSNrUclL91f9Qh5qhKPz018fPvm2ePG66cPrZw5xUFfjUokEklU
BU0j18DIlbsuI0uU4RkHX9WcWBQ0REOcuSwqKCFnMjYq5zY71/Z0C19x8N9I
y7UjqWOctCWZWYvCEvJaPiGJx6r/OCbhNAffXN2dETLUXJaEZi43yOmYhM7L
Onmtuq395YtnLZVlJ1YuiDI3UMVihAcICODJEjoWg8dFJ2dv2HGo+ELtn5+o
5zwHX9/btSRssL5MFwVRJAM7r/StRx/13Dj40nH1yKZIf1tlaTGsCFaUImdo
7TNjSWEzonoOPODg0+oTyaHeapJdJcooyiYBcTkXmzgWI3Cagx9LD+Q42uhj
utORcGQZh+ET91zurVC1p3ZGuVoriuKEBghiSHRdh9Gz8y8jWBnlzr1LHxrL
S7dnpYYHuJvqqsvRpWgSNBpNik6XkVNQVFLTUNM11NFWpxFwIl0cpKlaj4hd
w7ccfH/30t6MWSEuVno0MSwrTidSVUxsgman761oYCse6ZPzgz8+vbh5fGdi
kKuWPA18WhKVrmPuHDEn91YbkiolPOPgk2tFM71slPDMXQO0lIptSHw+gpqu
v8tfx8EPjWV5iYGmql0FIsl0Zfdx03b/+eI2hznYdmtjwhhrVcnu+6KEpVV1
3AMnzJi7MCMjY0nq3Onhwc52xhLkrsrJwiI4mqySvpmNy1C/4JD4lXnHn/6h
vnKcgx/uXVga4qndjQwsWcV11Kzjv51ubr9zPnvGKBMNOh6DQmNJSlpWIbHL
byLKvOQ+B99e3JXhP0RflIkVYTEdO79F20s5eB6DC/FgjhNwsDuJhCyt4ReS
fOm3C6EeXz0yN2CIlkRnBUwhvISa7Yi4PCQc4do9vF+f3rt96sD2rMVzoiYH
j/DxHurm7unlO3LcpKiE5DmpC+Mix5lqq5AYvBciSKrbBiSsO8+XHHxdc2rb
4mkB9kYqFEL3qAhhKfLalp6T5686fPshu0sLfcNB6FjD1XUpEy10FYhYNEqE
QFc18AuddfgWkuCKZxy8f7Yg0slCpivPByer4zxlUREbh89+yl/Hwa8tNzen
jLXQ6CIOSUrJbWxU4c0/ztbgLAff151OH+2iRWa5iwMIFEl1PUMr285zX1bm
JtrqytRuCDJAKYjBEchUKTkFDRPLoVNnrq/5w+0djnPw+c1js30GK3VfO0iW
MRoZteb2byf9P8Pznz/RSqezrKKAIFpaSS8wYvaF+0hy/bjNwe9t1etnTDRX
kmD2CE9Tdx8z+8gNDtyBzhJOc/Br2eG1/8femcBD/XV/POsshhmGse872ffI
lqyVRFmiTYtUUiREWixRKpWIShvaREppVamoqChJhIqktGnf/8cMk+h5/vWd
+Zrpefm8fj9pjOne773nvs+5y7kuljo9WRQ5RaR1J85ZV92vFVqvFi7xsFYW
pEZUWLKCucfCLecRbLpCjYNd+tT5rLG2qrz03Kni40VFXRfFXL52s+buvarK
S3s2xdib6wjyYaiRlZiW3cQVuVeRTcqhycHO2rO74+e6W2nLCOJ6ri/CCcio
6btMCdmw/zwjeRHpQoODbx5UXTp97PChvIN5BUUnL91u/k3E+u1pTc7qOZa6
cnyAFQ4uQQlFh4nzchCdQRgwDt46ttXbSl+QZh2cAvJGrgs3nWb0yiWq2JCD
H9+8aHtwv6G29mHrb44Gvm0u2xTqoS9PovkEJEnlsf4hJ/6WIszm4Ovbp5L8
bNQE6cfrus4bEIWERcXExURFhYUE+XC/3LxEbUduXiwfSVBURXPYlHnxZX+5
cZnpHGy/dmTxKAtpDG3OgVtY1shn/ub+e2DeNpdvCvMyUCRTOyMnRUbDOzDy
UiMb3TdB16MrhxeMt+vJ+MEjq2W9IHF/ExNOS/wU0/eL1pzPneZgQu5pBYq0
rlfA6op+G8Pvnt0zw8ms+65kLFnF0jNs20V2igdp+v7pXee79+/7zLV9eNpw
KDXa3lSDn+rYY0iSZq7+aScQjj/o3Udffyk7cYGHtba0YM++Hl6CoIqume/8
mJxT1zuYdP8NChxsL81JCguY6DF2FMTgE6ctTNpysq3fY/jQUpkZ7WeiSqGN
WfyicnbegbsvIsnqM1Ac/Fiev3GUhXb3NSAYIXWrCSuykdz52F9sxcH2GxcP
78xMSVgZHRYaFhK+en129aO+QW/TlbyFE21lhLrTGVEUdX2CEsr/PhMCczn4
9m7JhgB7XUk++qko7q5zd0QhMllYWIRMFiLy8/H0uXaCCysgJCanqGYy3CEw
POHyX4ZUTOfgi+pTK31sFbvnELmEJIeOnhxReKPvvGjDpf0LfGxkyDSsc4kp
6k8OTrrRimSJBGUOvrmYu3qshSZf9wVLwiYOvluP3WTsM/uK6Rxsqz61fLKd
Ys/jFRJXc/YOOVje5zacF2d2rhptpk5bJ+EgiOo6TEo8hOQkCEoc/P6h83HT
vRtlpWeKjp4rvfziVyN+/+hmRvh0EyVxmrHwU5ScfIMLryO58ecHahx8dPPo
ukjfEQZyPy/Q5uWTG2o4ZeGyQ+ermOhMMZ+Db+8dXB0w2kJTQVpMXEJGXdfS
Z/by4n4LHM3lhxZNGikv0j2FJSCu5Dw5uABRKwwUB1+f2RM/wliVtiLGwSei
7+SXUsSgq9YtduLgi4t7koJ8R9uaGegO1dTTMx3lPmN1RvHD3pcTvazPT41w
NFLsviaam0/R0G7u6r0Nfz+lwlwOfm29mRMzbZSJuqKUqJiYqKSUtKKSsq6e
voXFcDs7BydnZ8eRI8y01cX5cPSDYdz8YkoG9r6zQhLWbTlWWvm3O02YzsFP
j65nLvbRlyHRuEEgS5uMHL90Y/btJz8drg+tt7NXhdjpyHcbDwdeXsd2blw2
+9xH/1Mv6/asnGGmQqGVFC+iOnryspJahu5u7i+mc/Dz4+qdy6eZKIl0nxQW
lDSyGRe1fs/dpz9XYJ/Wlq5Z4KctTaZVDUeWt5kwZw8iTx4NDn54VFawe2P8
0rB5M/2nT5m6eGnc8eu9y/b11qnd89yspAVorOcWVzSeNH/D9X4e7x8KDQ6+
aijbEh/kZK4m0uveVxxZwnTs5OTdhXdamZnxj/kcfNdYsH6unb4sEcfNxYUh
UWRN7TyWbdx99+lPQ/7Udmd/UpiDvmLPfdRcIgr6XvPAG0dC+AHi4LcnR7cs
sdSVp7lPPESxYW7+W0vuMeWz2YmDHRez43zsDWQoJDwWgikRRQ3TcX4LN2zP
q6xtevHqZVtDVWHGKn8XMylS9/Qjliw9zHVKalElAhNi8j6ZL8+rT+7fmpIY
v3L5ytjYxKTVGzZu3LY9K3fv/vyCwiNHCvNydiQvCXLWUhHp3gPBQ5DSspkU
taOw9F4LkklF5u8X/fD4zM5Yt2HqAlR/ixtHlFXTG+UzPXbT9sIL16pr714t
PZm2KtLdyoDScz8pN7+4of3E1XsvIVvZQZWDL+6eXTnVWZmWVXsIJ0XJfFrU
7jomYxCFPNtfn5XuSx5vpS1IPUrPjRWQVdUd4zNzzZbsy1V3W9paaypKNsWG
2hupE3oyGogqGnjPTbrYgGQEQ4ODTZeyl8z2tDHTU1dWUlXTtHIaG560ubSm
iTpl8L6hojhx0RRjZfHu4vMKDTVzi9l8AvE0I/M5+KG1KC3W285ISrD3OUdO
fjFZI4dxQVGx6TuyDx89frbkXPmV8orr16uqb92919j2HOEdeCjMi74oz1s3
0VZHmJqEkwvDL6OiM8bHf3X6znPXqhqbG29dO7dtzVJPGyNx+s4fHpKKsXPQ
2oP3EVVigDj4tvHAuiAzTSlaDIQVkrD1DjhQ+ZApn81OHPxcdz4n1MtWSYR2
nTUXgSSmpm02ZrxfSMTSuLiVkfNnuVkbywv3XNPNxSerY+Efk3qlBckMMfPP
0X983dHW0tLy6HHbk2cdzzvfvPn0+Sef33c8LDuUMXuESU96YRxZZbhnRNZV
pClG0ThH31xRnBDkpasoxsvVdbUovxBFaaiejYvbxJlz5s4Pmuo7frihlig/
faGTV0zRwD0woRjpQXpUOVh3Pnuqk0n39PkQnILRqMiMEmZjEJV7eFuqTict
9NFTonQlnOfoagVVbUNnd+95oeFRUZGB0ycON9QUwvfspCFQdKzGxWYWP0XE
ETQ4+ODKwUU+juqSwnwYXhyeX0pRzXbMhJClcZvS0zati18ww9NMq2fne9e1
fRouPkvyShFOiv5AgYMtFUcip47VkCL/uo7BgSOSZdW0h9mMHD12nKeXF4x1
U6dNnT5jRkDgnJDF0Wszci/XI7lXG419Mo+rTycv9NFXpFDzMXASSCIqWvqO
Y8cHBC0MWxwaMM3HxlRHnPhzU5+ghJrdhJCs0wjXswaIg0+rtkd76yl0JzHg
E5FxmTz/+B3G7x7sEjtx8Me7lqp96yJGm2iSqVcQcnDyCghS5JRUdQ0MjQ31
hyrLi/DTPTReITmtkX5hO8/eRpYZBP376PvqYXnBUk8rZSFqFTj4RDXspsYf
QjCjSxMqedXetl4o2Bo8eZSmgjgey8uDwRJIQmLScopqGmpqqrJSYgTMz6yQ
AhRFc6cpa7ORbFOkCU0Ovruct85lmEY3s3mJuiO9UwqrGPjA3wsNDv5431Z6
OCPY11pdhojl4eThxRCFRGQVlbV09XR1tBRlJfgw9BtZ+CQ1TccvXH3yNkJX
BA0Ovr5fnh45zVRVgpYcDsMnIKWgbGA6zNrG2txUX0VODNfTiXBEUSOrsbFp
R5CdP6WJyRz89vxMVqybxVDSzwyvPX43L5ZfkCwm0ZX3X15OTl5eTkFBXkFB
QVlVTc/UyjMgfM/5BgTlR+XcxPvHFw9vWeBnoy4niOXl5OaFgZQsLa+ooQXS
VJCVFPiZMH8IH0nS0Mp12aZD95HmCh4YDn5ovLQpyFlLotumBUSV3aYvOX8f
ie/RX2zFwR8/Pt2/emrzsoWjTfWkBIkYGAJgKOYXEBQUJBEF8PTTxRh+ioLW
cM+5yftLHyOdThl4Dr66c2btLAcdKQLtyhBpLYdZyw81sRUHwSrb6k4e3BY5
b4q5oZY4hUzg4+Mj8EMT8PHhebh6soDw4IWlVEwdfcF2ahlI5oAmB9tP7oi2
M1Tk7cagmJX79NzLjQx84O+FCgehFR7fPp6zZr6fg66yhCABB4JWECAS+QnQ
Cj2pZjBEaTWDUTMjtp+5hRgjqOyT+fS07HBGkJeViqQAhLQcnJwYHJ4oKEQW
EhLoSrbWA0ESRdvEJjRuc2UjQ0MZczn4pe1WZri/mZJ4PwwO4eTi5sVgcXgQ
NAgWi+Hl5eUBYXB8IlJK1u4z0otvIyg/SucH37TdLt6fsmjWOGMtBWFBfih0
VxcSECBAF+L+mbUP4gwDc7fwhO2Vjcgz5g8MBztrzyZPcRgqQguFOISldLxn
r65oYfjOGKrYjIPQETvrrpTsTlk1b7KnuaGugqyMuLiYKIUi0nXjgZAQWURU
WkHDzMFn/orMo+UtDCRyGHgOfmm5vjtqspOhipykuJScuomt1+KEAw+Q7jxD
796ltx0Py0uK0tbGzZ3mbWdmpKmsKCstJSEmJiIiTBahiEnLa5jYegZEpO49
de8pQ50QRQ5+f3J21xJ3O20pUaIASVBOTcczYNHpu8w8OUgTShwEvWy5dfrQ
ttjQWW6WplqK8lLiYvD4BUkkARjMiEIUcXktA4dpCxL2nq1ixF1Aab9oZ0v1
0V2r509yMdCUExEi4HGADAwvD4aHG8ML2BAQFJNVNrJ3X7w6o7yO0Xkt5nLw
XfPVtaHTLXXVJUTIJBJJEIYcYRERCkW0R91DUZdjzg/OIRYLZOSnSCnZjPNP
P85GHPzRlU+0rrR4b/LKRb5u9gba6nIyUmJiolB2EolIJJJEKOLKGrqu3gFr
thyqbmbIFRmgeLChPG2ur42GoiSZTBGV0TZynBORychV5r3Fdhzs0pf2xrsX
ThzZmpqyPCo8aE6A/9SpkyZNnjJ1+ux5CyNXrtmyt6is9ndnC/9GA8/BHx/b
rx3ekRIXvSQ8YumKxM3bDpVVIb8xBD0Odunbh9bG2kuni7K3pq1dFRcTtWRx
2KKQkNDQxZExCWszcgsvVTd2IsnA9IvQjAff1106sClpyYJ5swJmByyKjNm+
/1g7kw589RZ6HAR9fNl66/LZg9vSVy9fGjIvcNoUP28vzwmeXn5TZi4Mj0vb
UXitFmlm5B6hd37wxaPbJUey18ZFzJw0bqSlgZaGsqKCkpKStoGRzSj3SfOj
Vm3PP133hAnnD5g8L9rZcubw3pSkhKVRSyIjIiK6/g+H9l0UGrJg/vx5cwJn
zZwOo9FEH0+PcWNHuzjZ242wtR3hNMo9IDjm0CUkEw6o5pP5/uF5w60rx/Ky
NyYnLAkLmTN7lv+0KZOnTPafMWvh4qh1aVmnLlU9QzolRdcArQ92tl3Jz90M
w1HEkqgly1ev21ZUUsvwINQttuQgVd8+v3j6uKHuzo3Ka2WXL1+6XHbl2vXq
O/UPn7xkQnpxlnAQusfLJw8a7t271/DgUXsnA2siP37l4IcP3U4B0zjYrW/v
Xj1/0vKw6X7Dvbq6u3X36hsfPH72iinP/wfa5yY+PG2+dws6T+X167X1TZ3M
yqz9q1DlIE3vXzx72FBXdf3a5YsXzpWUnDtfeqWiqr65/T0zeiiq5+i/vX/R
XHfzwunCvbszNm9KWb9uY2pqVnZu4ekLFXWPnjFnPguFfTKf3rxqffSwqamx
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
ipqVZ1jWX5sATWzJwc6LOYkeVkO7U4lyCaibuy7fcZLB2w36iAUc7Nr5U5Qw
Y6S2DBHLPYSbFy+jouc3f9nlZiQ7nAaQg58uF6Q6W2h3HzjACqlZe8bklDN+
dIX5HHxRtWvpeGNFIm0MwxEVHT2j+yeg/fjoxvZls0w1ZPh4wZfHiCtqes2N
vNCIxMtiGQd/vCnJW29vqcNHO2yPE1a0GB+S+dfjMKocfHL38pZVYaNtjSWE
+emToQJkGT1T5/lL1526Vs8UG2P2OfqOE7tibYxUeHtuvBKR0vGZnXijre+5
lNbywmgPaxVyFwc5sGQFY7fgNcWP/35Sjukc/NJ4bcMMT30JIc6eiV1ZNe2x
vtMWLYletiw6bEGgj6uDvpIUgaf757w4PjFpOR1DsxH2Y3wmha7dfOZvrzVH
8T76z6/v37pcdGD7hjWxUeGhwfOD5gcvCItYEpuwKilxxfxpY7SVJfBU/5yH
KK7j6Leq4AaydSY25ODXxzczwqYYyZFpzcQnouI0MepIBXO2idLFdA62V1eW
HDl8IHdvbu6BgqLSqsbfzJG8qj2zfo6jvizt/DCnqKzqhICwcw1IQqsB5OCb
kn3Jdmaa3SMDn4iuo9/aI33THCEQ0zn4/XF5RoizrlT39BuRounun9Q/EcWP
F/X7koMtdeW7MjIN4RSWVvaYFXK2HomfhS4Hv37++O7Dl9/PjL4+u3+t/XBt
HC1uwQkrW05YtJWNOPjsXllG4qLRNobiZELP1BVOSFrdzHFyzLrcCmTXJf5O
zObgu4uHUpzMh2J7rjqgSOv6zE6+2W8ZoO1qYdQ4K2UitntxynDs/HWn+tHy
/xfTOdhRWRztOkKRj77CyUkUFlMdqmNsampqYqijqSYjLsLH0ythMCcnFs8n
SKZISqsYmIwNjtzzt42DIgdB3z+87Gh72NxYX1cL/9DdunuNTU0Pmu5Vnj+8
NszLVFOcdiINR5Y2d5+RcRYhetiQg00X9weNs5bsPnTOI6tlE5x0kJHjLb8V
kznY2Vy4PnbuRC9XJ2cnZzfvKSFJW8496+ccPrl+ZKXfCA2R7mt6RWTUJgQs
ZnsOPj++PcZKvzu9A7eAqKnrtC2nmbAViukc/Npalr7QSVsS0z2dLqbhOmXp
2Xt9I9fP7TU74gLMNCVpZ1nIUsoeM0NL2IeDr+9fOn04e0fGppR1a5NTMnfl
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
eruPdXRwHuPht2DZlsoWpG7KfxVK5+jfPX9YXnI0NXnlrEkTzI0NlBUVpCQl
xURFRURERMXEFVQ0rF3Gh6xcX3DxFoNpqgeMg59aru9cNm+8jZG2vKyinKqJ
+ZiF0Vn3mJHuHK17l7oyUXTUlJ/bl7EhJmSOt6uDsZ5WVzYKaamujQOSsuBX
2o7yDlm2Pv/MjWeMxbUonh/8+qaxpvzovi2JMSH+Xm42RvqaSkpdGTWk5ZWU
tYdZ2ntNCVy5PvNk5T1GboFl8rxoZ8uZ/Jx1CbGRi8NCQhYuWBAcFDQ3cPas
6dOn+vn6jPcYN9rZ0dZyuKG+nrKSkrSUpLi4uISUjIq20ajJwVtO30XmWqHF
QdCn13evXdibmrxouq+DqaEG9dIlcTBmUYqYuISS2lAH94nL12VeqkGSVpQu
lnDw08PKnZFTnYzUFWSk5ZS1zZ2mRK4vbkH6qNA5N/H18e1L+1NXzfMbZ6qr
0TWXI0wGV0pAgDqNQBSkSCloD3eeEZmUV3qbgZu0u8VmHPzx6fnDm+WlxUVH
CwqOFJ0ovVnH5F3WdKGYT+br+0cNNedOHNm+ZXNifNzSqKjwxYvDFodHxaxY
l5pZcOrivcdMWPDszcEPH7pHc1T2yXx9WVNavH97+qY1a9Ylb9i+M7/sBsJD
On2EHgep+t755GFNxaVj+fsy0zauSVoVFxu7MjY+IWnd5szso2fK61uZ0Apo
55P5+Lr9/u3KkmOHszO3bExOXp2YtHrN+s1pOw4WHC+7XvPkNaO5zpm+T+Zj
54tHzU337tXdvXv3Tu2d27erb9youHLl8oULJadOHj9SkL83O3trRkbKurWJ
qxKgQVbGxa1en5p95CzivXAocrBL3148rL965nhORtqauJXRSyLAlsMjImNW
xG3cknX8/JWWl4wuELCEgz8+PbtRvDdzHYxP8Unr0nYdOH2zAXmCKNTOD359
1nTnfNHBzWsTFi+YM8XXy83V1cXZxWXUmAk+U+ZHrEzLPVrZgGifdz+xGwfp
YsK8238V+nnVvr5++fzxo0dNjY0N9Q0N9xsftra9ese0E8QDx8EufX736vnz
p0+fP3/9EeEBnd8IZQ726MvHzpfPn7Y/efy4re1J18aB98ybYBiovGrfPnS+
ftHR8expx/MXr9+9Z1obDPw9vF8+f3r39s3LF10t0tbW1SbQIow0CMocpOnb
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
CAQCgUAgEAgEAoFAIBAIBAKBQCAQBAh/A6/+m/I=
    "], {{0, 599}, {600, 0}}, {0, 
    255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSizeRaw->{600, 599},
  PlotRange->{{0, 600}, {0, 599}}]], "Output",
 CellChangeTimes->{{3.732724875301553*^9, 3.732724895267782*^9}, {
   3.732724926412333*^9, 3.732724931190372*^9}, 3.732724961744582*^9, 
   3.73272501933352*^9, 3.732725465475233*^9, 3.732729026274519*^9, 
   3.732730205203292*^9, 3.7327307663920107`*^9, 3.7327313022515297`*^9, 
   3.732731996934742*^9, 3.732732130788765*^9, 3.732732168861928*^9, 
   3.732732306668342*^9, 3.7327338507033157`*^9, 3.732734320921826*^9, 
   3.7327345163057003`*^9, {3.732734609525448*^9, 3.732734638997356*^9}, 
   3.732734881657876*^9, 3.732754173205069*^9, 3.732754337650763*^9, 
   3.732757888713892*^9, 3.7329564136623287`*^9, 3.7333062365965643`*^9, 
   3.733306471469123*^9, 3.733870015266077*^9, 3.733871475364375*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Having broken down Sudoku down to its elementary particles that can be \
combined to create a solution, we can next turn our attention to ",
 StyleBox["Conway\[CloseCurlyQuote]s Game of Life",
  FontSlant->"Italic"],
 ", another computer science amusement but a couple decades older than \
Sudoku. This rather grandiosely named binary automaton is the \
great-granddaddy of all other ",
 StyleBox["cellular automata",
  FontSlant->"Italic"],
 " that, well, since then ",
 StyleBox["emerged",
  FontSlant->"Italic"],
 " after it. Conway\[CloseCurlyQuote]s Game of Life is also the initial seed \
of the study of ",
 StyleBox["self-organizing systems",
  FontSlant->"Italic"],
 " where systems that consist of ",
 StyleBox["cells",
  FontSlant->"Italic"],
 " that can only observe their local neighbourhood somehow manage to \
self-organize into a complex wholes by repeated application of local rules \
that determine what each individual cell should do next based on what they \
observe going on around them. No individual cell is given a God\
\[CloseCurlyQuote]s eye view to the entire system, and despite this, some \
kind of global order spontaneously emerges as the sum of these local \
interactions.\nThe Conway\[CloseCurlyQuote]s Game of Life automaton proceeds \
in discrete time steps 0, 1, 2, ... so that each tile is at any given time \
either \[OpenCurlyDoubleQuote]dead\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]alive\[CloseCurlyDoubleQuote], the grandiose words \
used in this context merely to mean the binary states 0 and 1. For \
simplicity, we restrict the computation to a fixed size square gameboard, \
even though technically this is incorrect, since many initial states will \
eventually produce living tiles arbitrary far from the initial position. Same \
way as we did when solving Sudoku, we begin by defining a slew of \
propositional logic symbols to express the constraint \
\[OpenCurlyDoubleQuote]Tile (",
 StyleBox["x",
  FontSlant->"Italic"],
 ", ",
 StyleBox["y",
  FontSlant->"Italic"],
 ") is alive at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 "\[CloseCurlyDoubleQuote]. Since we have to be careful in computing the \
neighbourhood on the edges and especially on the corners of the gameboard, \
the helper function ",
 StyleBox["golInside",
  FontWeight->"Bold"],
 " is used to check whether the given coordinates are inside the ",
 StyleBox["n",
  FontSlant->"Italic"],
 "-by-",
 StyleBox["n",
  FontSlant->"Italic"],
 " gameboard, after which another helper function ",
 StyleBox["golNeighbours",
  FontWeight->"Bold"],
 " produces the neighbours of the given tile for the given time ",
 StyleBox["t",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.7327251584180107`*^9, 3.7327253457663813`*^9}, {
   3.732725510141344*^9, 3.732725518691678*^9}, {3.732725893524905*^9, 
   3.732725947308045*^9}, {3.73272603782672*^9, 3.732726117265243*^9}, {
   3.732726159049*^9, 3.732726161248527*^9}, {3.73273420535314*^9, 
   3.732734258366695*^9}, {3.7327538587186213`*^9, 3.732754039667946*^9}, 
   3.732754877398643*^9, {3.732755994493183*^9, 3.732756193601446*^9}, {
   3.7327576519559727`*^9, 3.732757847845399*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"golLiteral", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], ",", "t_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Subscript", "[", 
    RowBox[{"g", ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", "y", ",", " ", "t"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"golLiterals", "[", 
    RowBox[{"t_", ",", "n_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"golLiteral", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", "t"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "1", ",", "n"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "1", ",", "n"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"golInside", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", "y_"}], "}"}], ",", " ", "n_"}], "]"}], " ", ":=", 
   " ", 
   RowBox[{
    RowBox[{"1", " ", "\[LessEqual]", " ", "x"}], " ", "&&", " ", 
    RowBox[{"x", " ", "\[LessEqual]", " ", "n"}], " ", "&&", " ", 
    RowBox[{"1", " ", "\[LessEqual]", " ", "y"}], " ", "&&", " ", 
    RowBox[{"y", " ", "\[LessEqual]", " ", "n"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"golDirs", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"golNeighbours", "[", " ", 
    RowBox[{
     RowBox[{"Subscript", "[", 
      RowBox[{"g", ",", " ", 
       RowBox[{"{", 
        RowBox[{"x_", ",", " ", "y_", ",", " ", "t_"}], "}"}]}], "]"}], ",", 
     " ", "n_"}], "]"}], " ", ":=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], " ", "+", " ", "dv"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"dv", ",", " ", "golDirs"}], "}"}]}], "]"}], ",", " ", 
      RowBox[{
       RowBox[{"golInside", "[", 
        RowBox[{"#", ",", " ", "n"}], "]"}], "&"}]}], "]"}], " ", "/.", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"xx_", ",", "yy_"}], "}"}], " ", "\[Rule]", " ", 
      RowBox[{"golLiteral", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"xx", ",", "yy"}], "}"}], ",", "t"}], "]"}]}], ")"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.732725351407426*^9, 3.7327254226376038`*^9}, {
   3.7327255406437473`*^9, 3.732725888015896*^9}, {3.732725987624905*^9, 
   3.7327260340779448`*^9}, 3.732726126043977*^9, {3.732728201786145*^9, 
   3.732728234337048*^9}, 3.732729755114442*^9, {3.732731521891865*^9, 
   3.732731569204883*^9}, {3.7327578780171213`*^9, 3.732757911581244*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "The basic rules of Conway\[CloseCurlyQuote]s Game of Life are completely \
deterministic. Each particular tile is alive at the time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " if and only if either (1) it was alive at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1 with two or three living neighbours, or (2) it was dead at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1 but had exactly three living neighbours. Otherwise that tile is dead \
at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 ". Iterating this simple rule, discovered by Conway by trial and error over \
the space of possible rules for such a game, over a large game board will \
produce emergent patterns that turn out to be powerful enough to encode all \
computation, since cleverly designed patterns can simulate logic gates and \
their interaction when executed under Conway\[CloseCurlyQuote]s simple rule. \
In writing the function ",
 StyleBox["golClauses",
  FontWeight->"Bold"],
 " that produces the formula for the state of the tile (x, y) at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " based on the values of its neighbouring tiles at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1, the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " built-in ",
 StyleBox["BooleanCountingFunction",
  FontWeight->"Bold"],
 " comes handy in generating the propositional formula that says that \
precisely ",
 StyleBox["k",
  FontSlant->"Italic"],
 " propositions from the given table of propositions are ",
 StyleBox["True",
  FontWeight->"Bold"],
 ". Note that if a tile has exactly three living neighbours, it does not \
matter whether that tile was dead or alive at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1, which simplifies the formula a little bit. "
}], "Text",
 CellChangeTimes->{{3.732726148160541*^9, 3.732726334357627*^9}, {
  3.7327266469941196`*^9, 3.7327266676480837`*^9}, {3.732726962795061*^9, 
  3.732727126561225*^9}, {3.732731930724278*^9, 3.732731931539003*^9}, {
  3.732734271262453*^9, 3.732734291950132*^9}, {3.732734650202714*^9, 
  3.732734658448669*^9}, {3.732754047931612*^9, 3.732754137504675*^9}, {
  3.73275620689653*^9, 3.73275631558313*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"golClauses", "[", 
    RowBox[{"x_", ",", " ", "y_", ",", " ", "t_", ",", " ", "n_"}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"prev", " ", "=", " ", 
       RowBox[{"golLiteral", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", "y"}], "}"}], ",", 
         RowBox[{"t", "-", "1"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"nb", " ", "=", " ", 
         RowBox[{"golNeighbours", "[", 
          RowBox[{"prev", ",", "n"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Equivalent", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"golLiteral", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", "y"}], "}"}], ",", "t"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Or", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"BooleanCountingFunction", "[", 
            RowBox[{
             RowBox[{"{", "3", "}"}], ",", "nb"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"And", "[", 
            RowBox[{"prev", ",", 
             RowBox[{"BooleanCountingFunction", "[", 
              RowBox[{
               RowBox[{"{", "2", "}"}], ",", " ", "nb"}], "]"}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.732726345734823*^9, 3.732726365797488*^9}, {
   3.732726556075767*^9, 3.7327266396513357`*^9}, {3.732726679112563*^9, 
   3.7327268834053*^9}, {3.732726919758018*^9, 3.732726986259417*^9}, {
   3.732727379038982*^9, 3.732727389677026*^9}, {3.732729803335826*^9, 
   3.732729873080552*^9}, {3.73273106128216*^9, 3.732731113020193*^9}, {
   3.732731806033093*^9, 3.7327318112934427`*^9}, {3.7327319350281963`*^9, 
   3.732731952595381*^9}, 3.73273211009088*^9, {3.732732418901332*^9, 
   3.732732426931573*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "Next, a function ",
 StyleBox["golEncode",
  FontWeight->"Bold"],
 " that turns a matrix made up from zeros and ones into the list of \
corresponding propositional variables, and the inverse function ",
 StyleBox["golDecode",
  FontWeight->"Bold"],
 " that we will use later to print out the solution."
}], "Text",
 CellChangeTimes->{{3.7327271541769247`*^9, 3.7327272106547327`*^9}, {
  3.732727398291855*^9, 3.732727399651963*^9}, {3.732728677033881*^9, 
  3.732728680599306*^9}, {3.732731211047456*^9, 3.732731233590043*^9}, {
  3.732756324157877*^9, 3.7327563272054*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"golEncode", "[", 
    RowBox[{"table_", ",", " ", "t_"}], "]"}], " ", ":=", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", " ", "=", " ", 
       RowBox[{"Length", "[", "table", "]"}]}], "}"}], ",", 
     RowBox[{"And", " ", "@@", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"lit", " ", "=", " ", 
             RowBox[{"golLiteral", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"x", ",", "y"}], "}"}], ",", "t"}], "]"}]}], "}"}], 
           ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"table", "[", 
               RowBox[{"[", 
                RowBox[{"x", ",", "y"}], "]"}], "]"}], " ", "\[Equal]", " ", 
              "0"}], ",", " ", 
             RowBox[{"Not", "[", "lit", "]"}], ",", " ", "lit"}], "]"}]}], 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"x", ",", "1", ",", "n"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"y", ",", "1", ",", "n"}], "}"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"golDecode", "[", 
     RowBox[{"vars_", ",", " ", "t_", ",", " ", "n_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"vars", ",", " ", 
          RowBox[{"golLiteral", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x", ",", "y"}], "}"}], ",", "t"}], "]"}]}], "]"}], ",", 
        " ", "1", ",", "0"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "1", ",", "n"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "1", ",", "n"}], "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"golEncode", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}], ",", " ", "42"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"golDecode", "[", 
  RowBox[{"%", ",", " ", "42", ",", " ", "3"}], "]"}]}], "Input",
 CellChangeTimes->{{3.732727218040316*^9, 3.732727373824469*^9}, {
  3.732728544366713*^9, 3.732728549716661*^9}, {3.7327289001418343`*^9, 
  3.732728912121056*^9}, {3.732729041915819*^9, 3.7327290431785507`*^9}, {
  3.732730495570963*^9, 3.7327306041449327`*^9}, {3.732730996388206*^9, 
  3.732731002034334*^9}, {3.732731448159009*^9, 3.732731454195496*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{
  SubscriptBox["g", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "42"}], "}"}]], "&&", 
  RowBox[{"!", 
   SubscriptBox["g", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "42"}], "}"}]]}], "&&", 
  RowBox[{"!", 
   SubscriptBox["g", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "42"}], "}"}]]}], "&&", 
  RowBox[{"!", 
   SubscriptBox["g", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "42"}], "}"}]]}], "&&", 
  SubscriptBox["g", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "42"}], "}"}]], "&&", 
  RowBox[{"!", 
   SubscriptBox["g", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "42"}], "}"}]]}], "&&", 
  SubscriptBox["g", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "42"}], "}"}]], "&&", 
  SubscriptBox["g", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "42"}], "}"}]], "&&", 
  SubscriptBox["g", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "42"}], "}"}]]}]], "Output",
 CellChangeTimes->{
  3.732728958814528*^9, {3.732729026411705*^9, 3.732729044336513*^9}, 
   3.732730205575213*^9, 3.732730606072514*^9, 3.73273076658395*^9, 
   3.7327310026996317`*^9, 3.732731302558502*^9, 3.732731454854232*^9, 
   3.7327319971057243`*^9, 3.73273213101138*^9, 3.732732169096203*^9, 
   3.732732307004117*^9, 3.732733850905568*^9, 3.732734321135948*^9, 
   3.732734516533361*^9, {3.732734609787133*^9, 3.732734639222602*^9}, 
   3.732734881958297*^9, 3.7327541735749807`*^9, 3.732754337831506*^9, 
   3.732757888799202*^9, 3.732956413996438*^9, 3.733306236794812*^9, 
   3.73330647167933*^9, 3.733870015937181*^9, 3.733871475454351*^9},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.732728958814528*^9, {3.732729026411705*^9, 3.732729044336513*^9}, 
   3.732730205575213*^9, 3.732730606072514*^9, 3.73273076658395*^9, 
   3.7327310026996317`*^9, 3.732731302558502*^9, 3.732731454854232*^9, 
   3.7327319971057243`*^9, 3.73273213101138*^9, 3.732732169096203*^9, 
   3.732732307004117*^9, 3.732733850905568*^9, 3.732734321135948*^9, 
   3.732734516533361*^9, {3.732734609787133*^9, 3.732734639222602*^9}, 
   3.732734881958297*^9, 3.7327541735749807`*^9, 3.732754337831506*^9, 
   3.732757888799202*^9, 3.732956413996438*^9, 3.733306236794812*^9, 
   3.73330647167933*^9, 3.733870015937181*^9, 3.733871475463747*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Everything is now in place for us to simulate a single step of Conway\
\[CloseCurlyQuote]s Game of Life from the given state. Instead of creating \
some initial gameboard by hand or by flipping the random coin for each tile, \
it is easier and more educational to have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to compute us a binary image with its image processing operations. The \
function ",
 StyleBox["ImageData",
  FontWeight->"Bold"],
 " extracts the matrix of pixel values as a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " list that can then be processed like any other list. Because ",
 StyleBox["Rasterize",
  FontWeight->"Bold"],
 " uses white as background and black as text colour, we need to subtract the \
pixel colours from 1 because we want to treat white as the dead background \
and black as the live foreground, the opposite of how these values are inside \
the image. "
}], "Text",
 CellChangeTimes->{{3.732727453364051*^9, 3.732727475666856*^9}, {
  3.7327281326095123`*^9, 3.732728137015785*^9}, {3.732728169160664*^9, 
  3.732728182095236*^9}, {3.732728252999372*^9, 3.732728270245638*^9}, {
  3.732728310462459*^9, 3.732728312573236*^9}, {3.732728628473228*^9, 
  3.732728629024091*^9}, {3.732754146376483*^9, 3.73275415511265*^9}, {
  3.732756339414856*^9, 3.732756493011272*^9}, {3.7333066290195827`*^9, 
  3.733306638154852*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"exSize", " ", ":=", " ", "8"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"golData", " ", "=", " ", 
   RowBox[{"1", " ", "-", " ", 
    RowBox[{"ImageData", "[", 
     RowBox[{"Binarize", "[", 
      RowBox[{"ImageResize", "[", 
       RowBox[{
        RowBox[{"Rasterize", "[", "\"\<A\>\"", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"exSize", ",", "exSize"}], "}"}]}], "]"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixPlot", "[", 
  RowBox[{"golData", ",", " ", 
   RowBox[{"Mesh", " ", "\[Rule]", " ", "True"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.732727487940258*^9, 3.732727801334852*^9}, {
   3.732727888606464*^9, 3.732727892566568*^9}, {3.732727947126052*^9, 
   3.732727997979295*^9}, {3.7327280726202307`*^9, 3.732728126972291*^9}, {
   3.732728158291616*^9, 3.732728164131661*^9}, {3.732728279986717*^9, 
   3.7327282822740107`*^9}, {3.7327283377056627`*^9, 
   3.7327284254631643`*^9}, {3.7327289974361763`*^9, 
   3.7327290064262257`*^9}, {3.7327300274780893`*^9, 3.732730047962182*^9}, {
   3.7327301867297373`*^9, 3.7327301899198303`*^9}, 3.7327303108432503`*^9, {
   3.732730362766292*^9, 3.7327303742782097`*^9}, {3.732730436895829*^9, 
   3.73273043899712*^9}, {3.7327308050073023`*^9, 3.732730844009285*^9}, 
   3.732730916845653*^9, 3.73273095434372*^9, 3.7327310202198057`*^9, {
   3.732731146172317*^9, 3.732731146439982*^9}, {3.732731263907259*^9, 
   3.7327312648310204`*^9}, {3.732731322383359*^9, 3.7327313455088587`*^9}, {
   3.732732159753909*^9, 3.7327321871480303`*^9}, {3.732732227882465*^9, 
   3.73273223390746*^9}, {3.732732367919258*^9, 3.732732381173311*^9}, {
   3.7327324860776567`*^9, 3.732732486402259*^9}, {3.732732533275366*^9, 
   3.73273253356161*^9}, {3.7327325784048243`*^9, 3.732732593254702*^9}, {
   3.732732642597661*^9, 3.732732650112083*^9}, 3.732733842023741*^9, {
   3.732734314391069*^9, 3.732734314442363*^9}, 3.732734511014516*^9, {
   3.732734603405217*^9, 3.732734633920969*^9}, {3.732751860638914*^9, 
   3.7327518757644253`*^9}, {3.7327519273070383`*^9, 3.732751935228745*^9}, {
   3.73275416702687*^9, 3.7327541674573708`*^9}, 3.732754290550867*^9, {
   3.733871449997686*^9, 3.7338714506026907`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggGIQGwI+2I/Sg5N+WCWyzv3hLSgfBoaOvbjMGShxatG0
Dh9a00M9nAebO4cqDQANBAkP
    "], {{0, 0}, {8, 8}}, {0, 1}], {
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 8}, {8, 8}}, {{0, 7}, {8, 7}}, {{0, 6}, {8, 6}}, {{0, 
       5}, {8, 5}}, {{0, 4}, {8, 4}}, {{0, 3}, {8, 3}}, {{0, 2}, {8, 2}}, {{0,
        1}, {8, 1}}, {{0, 0}, {8, 0}}}],
      Antialiasing->False]}, 
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 0}, {0, 8}}, {{1, 0}, {1, 8}}, {{2, 0}, {2, 8}}, {{3, 
       0}, {3, 8}}, {{4, 0}, {4, 8}}, {{5, 0}, {5, 8}}, {{6, 0}, {6, 8}}, {{7,
        0}, {7, 8}}, {{8, 0}, {8, 8}}}],
      Antialiasing->False]}}},
  BaseStyle->{FontFamily -> "Verdana"},
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{7.5, 
       FormBox["1", TraditionalForm]}, {6.5, 
       FormBox["2", TraditionalForm]}, {5.5, 
       FormBox["3", TraditionalForm]}, {4.5, 
       FormBox["4", TraditionalForm]}, {3.5, 
       FormBox["5", TraditionalForm]}, {2.5, 
       FormBox["6", TraditionalForm]}, {1.5, 
       FormBox["7", TraditionalForm]}, {0.5, 
       FormBox["8", TraditionalForm]}}, {{7.5, 
       FormBox["1", TraditionalForm]}, {6.5, 
       FormBox["2", TraditionalForm]}, {5.5, 
       FormBox["3", TraditionalForm]}, {4.5, 
       FormBox["4", TraditionalForm]}, {3.5, 
       FormBox["5", TraditionalForm]}, {2.5, 
       FormBox["6", TraditionalForm]}, {1.5, 
       FormBox["7", TraditionalForm]}, {0.5, 
       FormBox["8", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {2.5, 
       FormBox["3", TraditionalForm]}, {3.5, 
       FormBox["4", TraditionalForm]}, {4.5, 
       FormBox["5", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {6.5, 
       FormBox["7", TraditionalForm]}, {7.5, 
       FormBox["8", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {2.5, 
       FormBox["3", TraditionalForm]}, {3.5, 
       FormBox["4", TraditionalForm]}, {4.5, 
       FormBox["5", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {6.5, 
       FormBox["7", TraditionalForm]}, {7.5, 
       FormBox["8", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.732728098194069*^9, 3.732728127634408*^9}, 
   3.732728164848925*^9, 3.7327282829616823`*^9, {3.732728348121848*^9, 
   3.7327283587119503`*^9}, {3.7327283895958977`*^9, 3.732728425955167*^9}, 
   3.732729026566724*^9, 3.732730070213286*^9, 3.732730205783243*^9, 
   3.732730311490665*^9, 3.732730363661192*^9, 3.73273044019454*^9, 
   3.7327307668003273`*^9, {3.732730805893124*^9, 3.7327308447297087`*^9}, 
   3.732730917348156*^9, 3.73273095492595*^9, 3.732731147080254*^9, 
   3.732731265404851*^9, 3.7327313028423643`*^9, {3.73273133945129*^9, 
   3.732731346085307*^9}, 3.732731997315222*^9, 3.732732131454117*^9, 
   3.7327321692933397`*^9, {3.732732231263434*^9, 3.732732234553361*^9}, 
   3.732732307216936*^9, {3.732732368484558*^9, 3.732732381742957*^9}, 
   3.732732439699278*^9, 3.732732486970908*^9, {3.7327325241341877`*^9, 
   3.732732534108597*^9}, {3.73273257964567*^9, 3.73273259369977*^9}, {
   3.732732644437353*^9, 3.732732650597413*^9}, {3.732733843789104*^9, 
   3.732733851102882*^9}, 3.732734321348269*^9, 3.7327345167482767`*^9, {
   3.732734610088109*^9, 3.732734639427127*^9}, 3.732734882185844*^9, 
   3.732751876961128*^9, 3.732751935757389*^9, 3.732754173793407*^9, 
   3.732754338218686*^9, 3.732757888952552*^9, 3.732956414504356*^9, 
   3.733306237105114*^9, 3.733306471881317*^9, 3.733870017191772*^9, 
   3.733871475690991*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Similarly as was previously done with Snakes and Ladders, we build up the \
constraint formula passed to ",
 StyleBox["SatisfiabilityInstances",
  FontWeight->"Bold"],
 " piecemeal from the propositions known to be true and false from the tiles \
in the given initial state (here at time 1), and the clauses that constrain \
the values of the unknown tiles at the next state (here at time 2).The answer \
is similarly extracted and decoded from the solution of truth values of all \
the propositions used to define this problem, one proposition per each tile \
and moment of time."
}], "Text",
 CellChangeTimes->{{3.7327326749914503`*^9, 3.732732875331315*^9}, {
  3.7327348975258627`*^9, 3.732734928732195*^9}, {3.7327564987710667`*^9, 
  3.732756557017891*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"gol1", " ", ":=", " ", 
   RowBox[{"golLiterals", "[", 
    RowBox[{"1", ",", " ", "exSize"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gol2", " ", ":=", " ", 
   RowBox[{"golLiterals", "[", 
    RowBox[{"2", ",", " ", "exSize"}], "]"}]}], ";"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"formula2", " ", ":=", 
    RowBox[{"BooleanConvert", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"And", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"golEncode", "[", 
         RowBox[{"golData", ",", " ", "1"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"And", " ", "@@", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"golClauses", "[", 
              RowBox[{"x", ",", "y", ",", "2", ",", "exSize"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "exSize"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", "1", ",", "exSize"}], "}"}]}], "]"}], ",", 
           "2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
      "\"\<CNF\>\""}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"golVars2", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"gol1", ",", " ", "gol2"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"golSol2", " ", "=", " ", 
   RowBox[{"First", "[", 
    RowBox[{"SatisfiabilityInstances", "[", 
     RowBox[{"formula2", ",", " ", "golVars2"}], " ", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sols2", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"First", ",", 
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"golVars2", ",", " ", "golSol2"}], "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"xx_", ",", "True"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixPlot", "[", 
  RowBox[{
   RowBox[{"golDecode", "[", 
    RowBox[{"sols2", ",", " ", "2", ",", " ", "exSize"}], "]"}], ",", " ", 
   RowBox[{"Mesh", " ", "\[Rule]", " ", "True"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.7327284890349417`*^9, 3.732728513898656*^9}, {
   3.732728594913083*^9, 3.7327286081701117`*^9}, {3.7327286937034273`*^9, 
   3.732728873180879*^9}, {3.732729010595998*^9, 3.732729012850514*^9}, {
   3.732729059745881*^9, 3.732729126169827*^9}, 3.732729209137216*^9, 
   3.732729417189578*^9, {3.732729460148217*^9, 3.73272946893929*^9}, {
   3.732729505643374*^9, 3.732729518506754*^9}, {3.732729596306973*^9, 
   3.732729659472588*^9}, {3.732729907309162*^9, 3.732729908940493*^9}, {
   3.7327300336283693`*^9, 3.732730100977841*^9}, {3.7327301704075623`*^9, 
   3.7327301738561983`*^9}, {3.732730274463902*^9, 3.732730274817274*^9}, {
   3.73273038267918*^9, 3.73273039682003*^9}, {3.732730451661253*^9, 
   3.732730473890979*^9}, {3.7327306227702007`*^9, 3.73273073913671*^9}, {
   3.732730776520605*^9, 3.732730778584126*^9}, {3.732731369508617*^9, 
   3.7327313867181797`*^9}, {3.732731480395276*^9, 3.732731481685772*^9}, {
   3.732731589812611*^9, 3.7327315985441713`*^9}, {3.732731647969903*^9, 
   3.7327316725458183`*^9}, {3.73273198465257*^9, 3.732731987203746*^9}, {
   3.732732514698532*^9, 3.7327325193489656`*^9}, {3.7327328387738867`*^9, 
   3.732732864015415*^9}, {3.732733646570949*^9, 3.7327336596087008`*^9}, {
   3.7327518234845877`*^9, 3.732751824214755*^9}, {3.732754193443328*^9, 
   3.7327541941340113`*^9}, {3.7338714551873503`*^9, 3.733871455802741*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggGIQGwI+2I/Sg5N+WCWyzv3hLSgfBkhXTy1zRpr7R2n8
NK3DeaibT6q99HYPAH3j/wA=
    "], {{0, 0}, {8, 8}}, {0, 1}], {
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 8}, {8, 8}}, {{0, 7}, {8, 7}}, {{0, 6}, {8, 6}}, {{0, 
       5}, {8, 5}}, {{0, 4}, {8, 4}}, {{0, 3}, {8, 3}}, {{0, 2}, {8, 2}}, {{0,
        1}, {8, 1}}, {{0, 0}, {8, 0}}}],
      Antialiasing->False]}, 
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 0}, {0, 8}}, {{1, 0}, {1, 8}}, {{2, 0}, {2, 8}}, {{3, 
       0}, {3, 8}}, {{4, 0}, {4, 8}}, {{5, 0}, {5, 8}}, {{6, 0}, {6, 8}}, {{7,
        0}, {7, 8}}, {{8, 0}, {8, 8}}}],
      Antialiasing->False]}}},
  BaseStyle->{FontFamily -> "Verdana"},
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{7.5, 
       FormBox["1", TraditionalForm]}, {6.5, 
       FormBox["2", TraditionalForm]}, {5.5, 
       FormBox["3", TraditionalForm]}, {4.5, 
       FormBox["4", TraditionalForm]}, {3.5, 
       FormBox["5", TraditionalForm]}, {2.5, 
       FormBox["6", TraditionalForm]}, {1.5, 
       FormBox["7", TraditionalForm]}, {0.5, 
       FormBox["8", TraditionalForm]}}, {{7.5, 
       FormBox["1", TraditionalForm]}, {6.5, 
       FormBox["2", TraditionalForm]}, {5.5, 
       FormBox["3", TraditionalForm]}, {4.5, 
       FormBox["4", TraditionalForm]}, {3.5, 
       FormBox["5", TraditionalForm]}, {2.5, 
       FormBox["6", TraditionalForm]}, {1.5, 
       FormBox["7", TraditionalForm]}, {0.5, 
       FormBox["8", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {2.5, 
       FormBox["3", TraditionalForm]}, {3.5, 
       FormBox["4", TraditionalForm]}, {4.5, 
       FormBox["5", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {6.5, 
       FormBox["7", TraditionalForm]}, {7.5, 
       FormBox["8", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {2.5, 
       FormBox["3", TraditionalForm]}, {3.5, 
       FormBox["4", TraditionalForm]}, {4.5, 
       FormBox["5", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {6.5, 
       FormBox["7", TraditionalForm]}, {7.5, 
       FormBox["8", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.7327307413201027`*^9, 3.7327307791889677`*^9}, {
   3.732730896610882*^9, 3.732730923231583*^9}, 3.732730965178232*^9, 
   3.732731271466804*^9, 3.73273130539787*^9, {3.732731361963065*^9, 
   3.732731389399452*^9}, {3.732731461154172*^9, 3.732731485968651*^9}, {
   3.7327315925814533`*^9, 3.7327316014916553`*^9}, 3.732731668970644*^9, 
   3.732731890274847*^9, 3.732731972585443*^9, 3.732732084999699*^9, 
   3.732732133905202*^9, 3.732732220000207*^9, 3.732732285039515*^9, {
   3.73273236427855*^9, 3.732732386353368*^9}, 3.7327324445773373`*^9, {
   3.7327325113013372`*^9, 3.732732537465523*^9}, 3.732732597076377*^9, 
   3.732732655988394*^9, 3.73273284264188*^9, 3.732732908230571*^9, 
   3.7327336627586813`*^9, 3.732733784218775*^9, 3.732733851190868*^9, 
   3.732734322872418*^9, 3.732734516895245*^9, {3.73273461018841*^9, 
   3.73273463955374*^9}, 3.7327348823074827`*^9, 3.7327541740571632`*^9, 
   3.732754338378674*^9, 3.7327578890604477`*^9, 3.732956414641802*^9, 
   3.733306237245138*^9, 3.733306472005065*^9, 3.733870017710311*^9, 
   3.733871476286625*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "So far using propositional logic to compute the next step of Conway\
\[CloseCurlyQuote]s Game of Life has not been anything special, since unlike \
Sudoku that needs recursion to try out the possible values for each tile and ",
 StyleBox["backtracking",
  FontSlant->"Italic"],
 " whenever its ",
 StyleBox["forward checking mechanism",
  FontSlant->"Italic"],
 " realizes that it has painted itself in a corner because some tile has no \
more possible values remaining because its twenty neighbours have already \
used up all the values from 1 to 9, the evolution from the initial state of \
Conway\[CloseCurlyQuote]s Game of Life is rather trivial to compute forward \
any number of time steps with nested loop that loop over the time and the \
game board, which makes this problem easy enough to serve as an exercise in a \
first programming course. However, the propositional logic approach allows us \
to do something that would not be anywhere as trivial to solve using \
imperative programming; execute the rules ",
 StyleBox["backward in time",
  FontSlant->"Italic"],
 " so that given the initial state at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 ", we wish to compute the previous state at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1 that would generate the initial state if the forward rules of the game \
were applied to it!\nIn all programming languages, computational statements \
are intentionally designed so that the state of the system at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " + 1 is easy to compute from the given the state of the system at the \
previous time ",
 StyleBox["t",
  FontSlant->"Italic"],
 ".  However, unlike statements in programming languages, the propositional \
logic formulas that constrain the values of tiles between consecutive time \
steps are perfectly symmetric, so the previous satisfiability solver can be \
used, without any modification whatsoever to its structure, to solve the \
values of tiles at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1 from their known values at the current time ",
 StyleBox["t",
  FontSlant->"Italic"],
 ".\nThere is one giant fly in this ointment, though. Even though the rules \
of the game are perfectly deterministic in the forward direction so that the \
initial state of the game fully determines all of its future states, even one \
googolplex steps ahead unimaginably far in the future, the same determinism \
does not hold when time moves in the reverse directions. The exact same state \
of Conway\[CloseCurlyQuote]s Game of Life at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " can be produced by many different states at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1. In fact, it is easy to see that this problem always has a large \
number of solutions, typically exponentially many. For example, any \
individual tile inside some 3-by-3 area that is empty at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " could have just as well been dead or alive at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " - 1. Given only the current state of the game, it is impossible for us to \
tell which one of these result-equivalent states actually took place. On the \
other hand, it is also perfectly possible that no such previous state exists \
at all, because the current state is logically impossible to produce from any \
state using the rules of Conway\[CloseCurlyQuote]s Game of Life! (A trivial \
example of such an impossible state would be one whose every tile is alive.)\n\
This introduction of exponential nondeterminism is inherent and unavoidable \
in all universal computation any time (heh) that we attempt to reverse the \
arrow of time to find out which particular input would produce the desired \
output. Since Conway\[CloseCurlyQuote]s Game of Life is computationally \
universal and Turing-complete, the same phenomenon will inevitably occur in \
our attempt to reverse that game. If all computations were mechanistically \
reversible, any encryption algorithm could be executed in reverse to work as \
its own decryption algorithm. More generally, any algorithm that checks \
whether the offered solution of some problem is a valid one could be run \
backwards to work as an algorithm that finds a solution to that particular \
problem! Countless other similar goodies, equivalents of having a Christmas \
every day from the computational point of view, would rain on humanity like \
endless manna from heavens.\nThe state of each tile at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " + 1 does not directly depend on the state of any of its neighbouring tiles \
at the time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " + 1, but only on the known states of the neighbouring tiles at time ",
 StyleBox["t, ",
  FontSlant->"Italic"],
 "which makes that state easy to compute looking only at the immediate \
neighbourhood. The same simplicity does not hold in backwards direction. \
Given the known states at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " + 1, the unknown state of each tile at time ",
 StyleBox["t",
  FontSlant->"Italic"],
 " is also constrained by the states of its eight neighbours at that same \
time ",
 StyleBox["t",
  FontSlant->"Italic"],
 ", whose states will then depend on their neighbours, and so on, so that \
every tile indirectly depends on every other tile at the same time! The \
satisfiability solver then has an exponentially harder row to hoe when it \
tries to build up a working global combination of tile values that \
simultaneously satisfies the given constraints. When time flow forward, the \
value of each time can be computed in complete isolation from the values of \
the tiles for the rest of the board, which allows this task in principle to \
be parallelized without limit so that each tile could be computed with a \
separate processor for blazingly fast generation of future states.\nHowever, \
the logic of setting up the problem using our previous functions is exactly \
the same backwards as it was forward. The only difference is that the clauses \
now define how the known current state at time 1 depends on the unknown \
previous state at time 0, instead of how the unknown next state at time 2 \
deterministically depends on the known current state at time 1. "
}], "Text",
 CellChangeTimes->{{3.732732923099621*^9, 3.732733484668211*^9}, {
  3.732733586194456*^9, 3.732733602594708*^9}, {3.732733889199457*^9, 
  3.732734193385544*^9}, {3.732734356870606*^9, 3.732734500477317*^9}, {
  3.7327347313523893`*^9, 3.732734848951477*^9}, {3.732753761896545*^9, 
  3.7327537776889467`*^9}, {3.732754208585397*^9, 3.732754265713016*^9}, {
  3.732754352354726*^9, 3.732754475998795*^9}, {3.7327548646273003`*^9, 
  3.732754871312245*^9}, {3.7327565708230143`*^9, 3.732757523630991*^9}, {
  3.732757992499227*^9, 3.7327583416890583`*^9}, {3.733315030646504*^9, 
  3.73331504550485*^9}, {3.733315126966825*^9, 3.733315138049906*^9}, {
  3.7333152429038486`*^9, 3.733315263708181*^9}, {3.733315294831579*^9, 
  3.733315336663623*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"gol0", " ", "=", " ", 
   RowBox[{"golLiterals", "[", 
    RowBox[{"0", ",", " ", "exSize"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formula1", " ", ":=", 
   RowBox[{"BooleanConvert", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"And", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"golEncode", "[", 
        RowBox[{"golData", ",", " ", "1"}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"And", " ", "@@", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"golClauses", "[", 
             RowBox[{"x", ",", "y", ",", "1", ",", "exSize"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "1", ",", "exSize"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"y", ",", "1", ",", "exSize"}], "}"}]}], "]"}], ",", 
          "2"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\"\<CNF\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"golVars1", " ", "=", " ", 
   RowBox[{"Join", "[", 
    RowBox[{"gol0", ",", " ", "gol1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"golSol1", " ", "=", " ", 
   RowBox[{"First", "[", 
    RowBox[{"SatisfiabilityInstances", "[", 
     RowBox[{"formula1", ",", " ", "golVars1"}], " ", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sols1", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"First", ",", 
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"golVars1", ",", " ", "golSol1"}], "}"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"xx_", ",", "True"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixPlot", "[", 
  RowBox[{
   RowBox[{"golDecode", "[", 
    RowBox[{"sols1", ",", " ", "0", ",", " ", "exSize"}], "]"}], ",", " ", 
   RowBox[{"Mesh", " ", "\[Rule]", " ", "True"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.732733612514329*^9, 3.732733775430377*^9}, {
  3.732733863348733*^9, 3.732733863527129*^9}, {3.733871463043112*^9, 
  3.733871463826569*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 GraphicsBox[{RasterBox[CompressedData["
1:eJxTTMoPSmVmYGDggGIQGwI+2I/S9KEfVomsc394C8qHgYF3F638Rao4tcwn
1Rxq+XegzBnq7qdW/NLanbSm6e1OADCcAw8=
    "], {{0, 0}, {8, 8}}, {0, 1}], {
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 8}, {8, 8}}, {{0, 7}, {8, 7}}, {{0, 6}, {8, 6}}, {{0, 
       5}, {8, 5}}, {{0, 4}, {8, 4}}, {{0, 3}, {8, 3}}, {{0, 2}, {8, 2}}, {{0,
        1}, {8, 1}}, {{0, 0}, {8, 0}}}],
      Antialiasing->False]}, 
    {GrayLevel[
      NCache[-1 + GoldenRatio, 0.6180339887498949]], 
     StyleBox[
      LineBox[{{{0, 0}, {0, 8}}, {{1, 0}, {1, 8}}, {{2, 0}, {2, 8}}, {{3, 
       0}, {3, 8}}, {{4, 0}, {4, 8}}, {{5, 0}, {5, 8}}, {{6, 0}, {6, 8}}, {{7,
        0}, {7, 8}}, {{8, 0}, {8, 8}}}],
      Antialiasing->False]}}},
  BaseStyle->{FontFamily -> "Verdana"},
  Frame->True,
  FrameLabel->{None, None},
  FrameTicks->{{{{7.5, 
       FormBox["1", TraditionalForm]}, {6.5, 
       FormBox["2", TraditionalForm]}, {5.5, 
       FormBox["3", TraditionalForm]}, {4.5, 
       FormBox["4", TraditionalForm]}, {3.5, 
       FormBox["5", TraditionalForm]}, {2.5, 
       FormBox["6", TraditionalForm]}, {1.5, 
       FormBox["7", TraditionalForm]}, {0.5, 
       FormBox["8", TraditionalForm]}}, {{7.5, 
       FormBox["1", TraditionalForm]}, {6.5, 
       FormBox["2", TraditionalForm]}, {5.5, 
       FormBox["3", TraditionalForm]}, {4.5, 
       FormBox["4", TraditionalForm]}, {3.5, 
       FormBox["5", TraditionalForm]}, {2.5, 
       FormBox["6", TraditionalForm]}, {1.5, 
       FormBox["7", TraditionalForm]}, {0.5, 
       FormBox["8", TraditionalForm]}}}, {{{0.5, 
       FormBox["1", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {2.5, 
       FormBox["3", TraditionalForm]}, {3.5, 
       FormBox["4", TraditionalForm]}, {4.5, 
       FormBox["5", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {6.5, 
       FormBox["7", TraditionalForm]}, {7.5, 
       FormBox["8", TraditionalForm]}}, {{0.5, 
       FormBox["1", TraditionalForm]}, {1.5, 
       FormBox["2", TraditionalForm]}, {2.5, 
       FormBox["3", TraditionalForm]}, {3.5, 
       FormBox["4", TraditionalForm]}, {4.5, 
       FormBox["5", TraditionalForm]}, {5.5, 
       FormBox["6", TraditionalForm]}, {6.5, 
       FormBox["7", TraditionalForm]}, {7.5, 
       FormBox["8", TraditionalForm]}}}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]}]], "Output",
 CellChangeTimes->{{3.73273383373247*^9, 3.7327338643212967`*^9}, 
   3.732734503766378*^9, {3.732734596879607*^9, 3.732734610567284*^9}, 
   3.732734688662814*^9, 3.732734929238145*^9, 3.7327543191622887`*^9, 
   3.7327543871454687`*^9, 3.732757938030959*^9, 3.732956462547772*^9, 
   3.7333062871484127`*^9, 3.7333065195406*^9, 3.73387006500082*^9, 
   3.733871523139131*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "As the third example of reducing computational problems to propositional \
logic is Problem 215 of ",
 StyleBox["Project Euler",
  FontSlant->"Italic"],
 ", \[OpenCurlyDoubleQuote]Crack-Free Tilings\[CloseCurlyDoubleQuote]. The \
task is to fill a ",
 StyleBox["w",
  FontSlant->"Italic"],
 "-by-",
 StyleBox["h",
  FontSlant->"Italic"],
 " wall using arbitrary 2-by-1 and 3-by-1 tiles, but under the constraint \
that there are no vertical cracks anywhere in this filling. The module ",
 StyleBox["crackFree",
  FontWeight->"Bold"],
 " converts this problem into symbols that say that a tile of length t has \
its top left corner in the given coordinates. The function ",
 StyleBox["noOverlap",
  FontWeight->"Bold"],
 " produces clauses to say no two tiles may overlap each other and that there \
may not be a crack. The function outside produces the clauses to say that no \
tile reaches outside this wall, and the function cover says that every square \
must be covered by some tile. The built-in function ",
 StyleBox["SatisfiabilityCount",
  FontWeight->"Bold"],
 " is used to tally the number of solutions that satisfy all these \
constraints, this number then being equal to the number of solutions to the \
original problem."
}], "Text",
 CellChangeTimes->{{3.7338673221963453`*^9, 3.733867342018754*^9}, {
  3.733867405834956*^9, 3.733867472512958*^9}, {3.733867595448*^9, 
  3.7338676015105743`*^9}, {3.7338678332441998`*^9, 3.733867996056883*^9}, {
  3.73386803738417*^9, 3.733868086631329*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"crackFreeClauses", "[", 
     RowBox[{"w_", ",", "h_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "noOverlap", ",", " ", "outside", ",", " ", "cover", ",", " ", 
        "clauses", ",", " ", "allClauses"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"sym", "[", 
         RowBox[{"x_", ",", "y_", ",", "t_"}], "]"}], " ", ":=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "1", " ", "\[LessEqual]", " ", "x", " ", "\[LessEqual]", " ", 
            "w"}], " ", "&&", " ", 
           RowBox[{
           "1", " ", "\[LessEqual]", " ", "y", " ", "\[LessEqual]", " ", 
            "h"}]}], ",", " ", 
          RowBox[{"Subscript", "[", 
           RowBox[{"s", ",", 
            RowBox[{"{", 
             RowBox[{"x", ",", "y", ",", "t"}], "}"}]}], "]"}], ",", " ", 
          "False"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"noOverlap", "[", 
         RowBox[{"x_", ",", "y_"}], "]"}], " ", ":=", 
        RowBox[{"And", " ", "@@", " ", 
         RowBox[{"Join", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"sym", "[", 
               RowBox[{"x", ",", "y", ",", "2"}], "]"}], " ", "\[Implies]", 
              " ", 
              RowBox[{"\[Not]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sym", "[", 
                  RowBox[{"x", ",", "y", ",", "3"}], "]"}], " ", "\[Or]", " ", 
                 RowBox[{"sym", "[", 
                  RowBox[{
                   RowBox[{"x", "+", "1"}], ",", "y", ",", "2"}], "]"}], " ", 
                 "\[Or]", " ", 
                 RowBox[{"sym", "[", 
                  RowBox[{
                   RowBox[{"x", "+", "1"}], ",", "y", ",", "3"}], "]"}]}], 
                ")"}]}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"sym", "[", 
               RowBox[{"x", ",", "y", ",", "3"}], "]"}], "\[Implies]", 
              RowBox[{"\[Not]", 
               RowBox[{"(", " ", 
                RowBox[{
                 RowBox[{"sym", "[", 
                  RowBox[{"x", ",", "y", ",", "2"}], "]"}], "\[Or]", " ", 
                 RowBox[{"sym", "[", 
                  RowBox[{
                   RowBox[{"x", "+", "1"}], ",", "y", ",", "2"}], "]"}], " ", 
                 "\[Or]", " ", 
                 RowBox[{"sym", "[", 
                  RowBox[{
                   RowBox[{"x", "+", "1"}], ",", "y", ",", "3"}], "]"}], " ", 
                 "\[Or]", " ", 
                 RowBox[{"sym", "[", 
                  RowBox[{
                   RowBox[{"x", "+", "2"}], ",", "y", ",", "2"}], "]"}], " ", 
                 "\[Or]", " ", 
                 RowBox[{"sym", "[", 
                  RowBox[{
                   RowBox[{"x", "+", "2"}], ",", "y", ",", "3"}], "]"}]}], 
                ")"}]}]}]}], "\[IndentingNewLine]", "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"x", " ", ">", " ", "1"}], " ", "&&", " ", 
              RowBox[{"y", " ", ">", " ", "1"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sym", "[", 
                  RowBox[{"x", ",", "y", ",", "2"}], "]"}], "\[Implies]", " ", 
                 RowBox[{"\[Not]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"sym", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"y", "-", "1"}], ",", "2"}], "]"}], " ", "\[Or]", 
                    " ", 
                    RowBox[{"sym", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"y", "-", "1"}], ",", "3"}], "]"}]}], ")"}]}]}], 
                ")"}], " ", "\[And]", "\[IndentingNewLine]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"sym", "[", 
                  RowBox[{"x", ",", "y", ",", "3"}], "]"}], "\[Implies]", 
                 "  ", 
                 RowBox[{"\[Not]", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"sym", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"y", "-", "1"}], ",", "2"}], "]"}], " ", "\[Or]", 
                    " ", 
                    RowBox[{"sym", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"y", "-", "1"}], ",", "3"}], "]"}]}], ")"}]}]}], 
                ")"}]}], "\[IndentingNewLine]", "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"{", "True", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
          "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"outside", "[", 
         RowBox[{
          RowBox[{"x_", " ", "/;", " ", 
           RowBox[{"x", " ", ">", " ", 
            RowBox[{"w", "-", "1"}]}]}], ",", "y_"}], " ", "]"}], " ", ":=", 
        "  ", 
        RowBox[{"\[Not]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"sym", "[", 
            RowBox[{"x", ",", "y", ",", "2"}], "]"}], " ", "\[Or]", " ", 
           RowBox[{"sym", "[", 
            RowBox[{"x", ",", "y", ",", "3"}], "]"}]}], ")"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"outside", "[", 
         RowBox[{
          RowBox[{"x_", " ", "/;", " ", 
           RowBox[{"x", " ", ">", " ", 
            RowBox[{"w", "-", "2"}]}]}], ",", " ", "y_"}], "]"}], " ", ":=", 
        " ", 
        RowBox[{"\[Not]", 
         RowBox[{"sym", "[", 
          RowBox[{"x", ",", "y", ",", "3"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"outside", "[", 
         RowBox[{"x_", ",", " ", "y_"}], "]"}], " ", ":=", " ", "True"}], ";",
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cover", "[", 
         RowBox[{"x_", ",", "y_"}], "]"}], " ", ":=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"1", "\[LessEqual]", "x", " ", "\[LessEqual]", " ", "w"}], 
           " ", "&&", " ", 
           RowBox[{
           "1", "\[LessEqual]", " ", "y", " ", "\[LessEqual]", " ", "h"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"sym", "[", 
            RowBox[{"x", ",", "y", ",", "2"}], "]"}], " ", "\[Or]", " ", 
           RowBox[{"sym", "[", 
            RowBox[{"x", ",", "y", ",", "3"}], "]"}], " ", "\[Or]", " ", 
           RowBox[{"sym", "[", 
            RowBox[{
             RowBox[{"x", "-", "1"}], ",", "y", ",", "2"}], "]"}], " ", 
           "\[Or]", " ", 
           RowBox[{"sym", "[", 
            RowBox[{
             RowBox[{"x", "-", "1"}], ",", "y", ",", "3"}], "]"}], " ", 
           "\[Or]", " ", 
           RowBox[{"sym", "[", 
            RowBox[{
             RowBox[{"x", "-", "2"}], ",", "y", ",", "3"}], "]"}]}], ",", 
          "\[IndentingNewLine]", "True"}], "\[IndentingNewLine]", "]"}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"clauses", "[", 
         RowBox[{"x_", ",", "y_"}], "]"}], " ", ":=", " ", 
        RowBox[{
         RowBox[{"noOverlap", "[", 
          RowBox[{"x", ",", "y"}], "]"}], " ", "\[And]", " ", 
         RowBox[{"outside", "[", 
          RowBox[{"x", ",", "y"}], "]"}], " ", "\[And]", " ", 
         RowBox[{"cover", "[", 
          RowBox[{"x", ",", "y"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"allClauses", " ", "=", " ", 
        RowBox[{"And", " ", "@@", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"clauses", "[", 
              RowBox[{"x", ",", "y"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "1", ",", "w"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"y", ",", "1", ",", "h"}], "}"}]}], "]"}], ",", "2"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"BooleanConvert", "[", 
        RowBox[{"allClauses", ",", " ", "\"\<CNF\>\""}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c10by3", " ", "=", " ", 
   RowBox[{"crackFreeClauses", "[", 
    RowBox[{"10", ",", " ", "3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"SatisfiabilityCount", "[", 
  RowBox[{"c10by3", ",", " ", 
   RowBox[{"BooleanVariables", "[", "c10by3", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.733868005303872*^9, 3.7338680247950363`*^9}, {
  3.7338681003708363`*^9, 3.73386817624959*^9}, {3.7338682201506433`*^9, 
  3.73386823607222*^9}, {3.7338686825931053`*^9, 3.733868834437796*^9}, {
  3.73386966176467*^9, 3.733869668418455*^9}, {3.733869724505234*^9, 
  3.733869750458859*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData["12"], "Output",
 CellChangeTimes->{
  3.733868011829612*^9, {3.733868140213696*^9, 3.7338681768692293`*^9}, {
   3.733868224764937*^9, 3.733868237215296*^9}, {3.733868821582631*^9, 
   3.733868835054406*^9}, 3.733869198493883*^9, {3.733869706595628*^9, 
   3.733869751676702*^9}, 3.733870065202076*^9, 3.733871523319024*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell["\<\
Converting the solution found by this logic to graphical display for humans \
should be pretty straightforward by now. To create a more interesting \
solution to display here than the first solution that uses mainly 3-by-1 \
tiles to avoid violating the constraints, we impose a couple of additional \
conditions that force the solution to contain some 2-by-1 tiles in the \
internal positions.\
\>", "Text",
 CellChangeTimes->{{3.733868195438301*^9, 3.733868268764112*^9}, {
  3.733868308804813*^9, 3.733868424929892*^9}, {3.7338686502729473`*^9, 
  3.733868667894086*^9}, {3.733868842444759*^9, 3.733868887186038*^9}, {
  3.733869122168038*^9, 3.7338691274141607`*^9}, {3.733869610415942*^9, 
  3.73386963503833*^9}, {3.733870067264971*^9, 3.7338701230946217`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tile", "[", 
    RowBox[{
     RowBox[{"Subscript", "[", 
      RowBox[{"s", ",", 
       RowBox[{"{", 
        RowBox[{"x_", ",", "y_", ",", "t_"}], "}"}]}], "]"}], ",", "cf_"}], 
    "]"}], " ", ":=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"cf", "[", 
      RowBox[{"RandomReal", "[", "]"}], "]"}], ",", 
     RowBox[{"Polygon", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "+", "t"}], ",", "y"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "+", "t"}], ",", 
          RowBox[{"y", "-", "1"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"y", "-", "1"}]}], "}"}]}], "}"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"wall", "[", "literals_", "]"}], " ", ":=", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cf", " ", "=", " ", 
       RowBox[{"ColorData", "[", "\"\<CMYKColors\>\"", "]"}]}], "}"}], ",", 
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"EdgeForm", "[", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", " ", "Black"}], "}"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"tile", "[", 
            RowBox[{"lit", ",", "cf"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"lit", ",", " ", "literals"}], "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], ",", " ", 
       RowBox[{"ImageSize", " ", "\[Rule]", "   ", "600"}]}], "]"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"clauses", " ", "=", " ", 
   RowBox[{
    RowBox[{"crackFreeClauses", "[", 
     RowBox[{"20", ",", "15"}], "]"}], " ", "\[And]", " ", 
    RowBox[{"Subscript", "[", 
     RowBox[{"s", ",", 
      RowBox[{"{", 
       RowBox[{"10", ",", "2", ",", "2"}], "}"}]}], "]"}], " ", "\[And]", " ", 
    RowBox[{"Subscript", "[", 
     RowBox[{"s", ",", 
      RowBox[{"{", 
       RowBox[{"14", ",", "7", ",", "2"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"vars", " ", "=", " ", 
   RowBox[{"BooleanVariables", "[", "clauses", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"instances", " ", "=", " ", 
   RowBox[{"SatisfiabilityInstances", "[", 
    RowBox[{"clauses", ",", " ", "vars"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sol", " ", "=", " ", 
   RowBox[{"instances", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"wall", "[", 
  RowBox[{"Map", "[", 
   RowBox[{"First", ",", " ", 
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"vars", ",", " ", "sol"}], "}"}], "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"x_", ",", " ", "True"}], "}"}]}], "]"}]}], "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.733868894858684*^9, 3.733869117119152*^9}, {
  3.733869160970064*^9, 3.733869420066935*^9}, {3.7338695302443333`*^9, 
  3.733869532785342*^9}, {3.733869606097246*^9, 3.733869607400468*^9}, {
  3.733869638576602*^9, 3.733869699726466*^9}, {3.733869763861611*^9, 
  3.733869810316718*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 GraphicsBox[
  {EdgeForm[{GrayLevel[0], Thickness[Large]}], 
   {RGBColor[0.9289062842740924, 0.8490645060889427, 0.5001945959007655], 
    PolygonBox[{{1, 1}, {3, 1}, {3, 0}, {1, 0}}]}, 
   {RGBColor[0.7792722871117217, 0.41840102727542267`, 0.6442592985083195], 
    PolygonBox[{{1, 2}, {4, 2}, {4, 1}, {1, 1}}]}, 
   {RGBColor[0.8615465839144055, 0.5088321659986715, 0.5708870208676218], 
    PolygonBox[{{1, 3}, {3, 3}, {3, 2}, {1, 2}}]}, 
   {RGBColor[0.9425496905197855, 0.8085655947654417, 0.48623626329390773`], 
    PolygonBox[{{1, 4}, {4, 4}, {4, 3}, {1, 3}}]}, 
   {RGBColor[0.5424705652237998, 0.5911240239089823, 0.8288410524163586], 
    PolygonBox[{{1, 5}, {3, 5}, {3, 4}, {1, 4}}]}, 
   {RGBColor[0.766395432320993, 0.42002249996529956`, 0.6543498113737629], 
    PolygonBox[{{1, 6}, {4, 6}, {4, 5}, {1, 5}}]}, 
   {RGBColor[0.8485613808988659, 0.4829103907956731, 0.5838295110923601], 
    PolygonBox[{{1, 7}, {3, 7}, {3, 6}, {1, 6}}]}, 
   {RGBColor[0.34614133391658114`, 0.3383585301616131, 0.3406338346336782], 
    PolygonBox[{{1, 8}, {4, 8}, {4, 7}, {1, 7}}]}, 
   {RGBColor[0.9226868893974699, 0.6686524439135133, 0.5069259837192336], 
    PolygonBox[{{1, 9}, {3, 9}, {3, 8}, {1, 8}}]}, 
   {RGBColor[0.9093247966037984, 0.8496353091890554, 0.5165061447165487], 
    PolygonBox[{{1, 10}, {4, 10}, {4, 9}, {1, 9}}]}, 
   {RGBColor[0.9022800629458659, 0.84984066415897, 0.5223744688648656], 
    PolygonBox[{{1, 11}, {3, 11}, {3, 10}, {1, 10}}]}, 
   {RGBColor[0.5363551857135748, 0.5983830900157778, 0.8336475398578129], 
    PolygonBox[{{1, 12}, {4, 12}, {4, 11}, {1, 11}}]}, 
   {RGBColor[0.9376644792999071, 0.8416788940311352, 0.49243784209753083`], 
    PolygonBox[{{1, 13}, {3, 13}, {3, 12}, {1, 12}}]}, 
   {RGBColor[0.9194611224951842, 0.8493398338737996, 0.5080624974628799], 
    PolygonBox[{{1, 14}, {4, 14}, {4, 13}, {1, 13}}]}, 
   {RGBColor[0.9433255797804619, 0.8033064049107079, 0.48525130314041626`], 
    PolygonBox[{{1, 15}, {3, 15}, {3, 14}, {1, 14}}]}, 
   {RGBColor[0.7810443814772784, 0.7613446821190224, 0.5652458148736547], 
    PolygonBox[{{3, 1}, {5, 1}, {5, 0}, {3, 0}}]}, 
   {RGBColor[0.7854778085229186, 0.7654687439711212, 0.5654572195326704], 
    PolygonBox[{{3, 3}, {5, 3}, {5, 2}, {3, 2}}]}, 
   {RGBColor[0.8736626709118261, 0.5330189640881009, 0.5588107878400338], 
    PolygonBox[{{3, 5}, {5, 5}, {5, 4}, {3, 4}}]}, 
   {RGBColor[0.9153178854421697, 0.6443775008497049, 0.5150360001675602], 
    PolygonBox[{{3, 7}, {5, 7}, {5, 6}, {3, 6}}]}, 
   {RGBColor[0.8989164668783417, 0.5903480140672674, 0.53308671300954], 
    PolygonBox[{{3, 9}, {5, 9}, {5, 8}, {3, 8}}]}, 
   {RGBColor[0.9355014169959688, 0.7294825285777498, 0.4931034853532596], 
    PolygonBox[{{3, 11}, {5, 11}, {5, 10}, {3, 10}}]}, 
   {RGBColor[0.46894039226755735`, 0.4622502791728431, 0.4536133187420408], 
    PolygonBox[{{3, 13}, {6, 13}, {6, 12}, {3, 12}}]}, 
   {RGBColor[0.6424786817529405, 0.4833100589424344, 0.7506609549365372], 
    PolygonBox[{{3, 15}, {6, 15}, {6, 14}, {3, 14}}]}, 
   {RGBColor[0.7739531569751387, 0.4186571991683814, 0.6484608088571452], 
    PolygonBox[{{4, 2}, {6, 2}, {6, 1}, {4, 1}}]}, 
   {RGBColor[0.3296376099587998, 0.7017598796175596, 0.9126804892226652], 
    PolygonBox[{{4, 4}, {6, 4}, {6, 3}, {4, 3}}]}, 
   {RGBColor[0.6351493187626254, 0.6244026286531037, 0.544745023949505], 
    PolygonBox[{{4, 6}, {6, 6}, {6, 5}, {4, 5}}]}, 
   {RGBColor[0.36945143051059665`, 0.36206838901021415`, 0.3642268525833481], 
    PolygonBox[{{4, 8}, {6, 8}, {6, 7}, {4, 7}}]}, 
   {RGBColor[0.6367485412997378, 0.488475493226809, 0.7551011405841147], 
    PolygonBox[{{4, 10}, {6, 10}, {6, 9}, {4, 9}}]}, 
   {RGBColor[0.932483674759432, 0.7110428084203181, 0.49629657321540444`], 
    PolygonBox[{{4, 12}, {7, 12}, {7, 11}, {4, 11}}]}, 
   {RGBColor[
    0.15296126476244543`, 0.14186547173372716`, 0.14510908334448303`], 
    PolygonBox[{{4, 14}, {7, 14}, {7, 13}, {4, 13}}]}, 
   {RGBColor[0.8978066147013125, 0.5866919435087423, 0.5343081697308985], 
    PolygonBox[{{5, 1}, {7, 1}, {7, 0}, {5, 0}}]}, 
   {RGBColor[0.9451671147972877, 0.7908239763368372, 0.48291354863760066`], 
    PolygonBox[{{5, 3}, {7, 3}, {7, 2}, {5, 2}}]}, 
   {RGBColor[0.3233589579875872, 0.6971411373757984, 0.9102961872952698], 
    PolygonBox[{{5, 5}, {7, 5}, {7, 4}, {5, 4}}]}, 
   {RGBColor[0.29448750909509136`, 0.28581885532292906`, 0.2883530724640616], 
    PolygonBox[{{5, 7}, {7, 7}, {7, 6}, {5, 6}}]}, 
   {RGBColor[0.7902102728627883, 0.4275918841899887, 0.634835920421605], 
    PolygonBox[{{5, 9}, {7, 9}, {7, 8}, {5, 8}}]}, 
   {RGBColor[0.729672126129286, 0.4266565547242944, 0.6829647255811572], 
    PolygonBox[{{5, 11}, {8, 11}, {8, 10}, {5, 10}}]}, 
   {RGBColor[0.8702606403751987, 0.5262276439448073, 0.5622016279302402], 
    PolygonBox[{{6, 2}, {8, 2}, {8, 1}, {6, 1}}]}, 
   {RGBColor[0.6469190898513817, 0.47930725370308247`, 0.7472201603401212], 
    PolygonBox[{{6, 4}, {8, 4}, {8, 3}, {6, 3}}]}, 
   {RGBColor[0.9329055435723194, 0.7136206107119144, 0.4958501917552722], 
    PolygonBox[{{6, 6}, {8, 6}, {8, 5}, {6, 5}}]}, 
   {RGBColor[0.8993464270492888, 0.8499261800550328, 0.524818212973611], 
    PolygonBox[{{6, 8}, {8, 8}, {8, 7}, {6, 7}}]}, 
   {RGBColor[
    0.14333177366162864`, 0.13207083729867114`, 0.13536271633688834`], 
    PolygonBox[{{6, 10}, {9, 10}, {9, 9}, {6, 9}}]}, 
   {RGBColor[0.8037453576269968, 0.7824615808027446, 0.566328293974551], 
    PolygonBox[{{6, 13}, {8, 13}, {8, 12}, {6, 12}}]}, 
   {RGBColor[0.6087352582128657, 0.5137280632216583, 0.7768081438451484], 
    PolygonBox[{{6, 15}, {8, 15}, {8, 14}, {6, 14}}]}, 
   {RGBColor[0.6402008944694779, 0.4853633699603055, 0.7524259724761356], 
    PolygonBox[{{7, 1}, {9, 1}, {9, 0}, {7, 0}}]}, 
   {RGBColor[0.6299880097273522, 0.6193672890710983, 0.5419150983648457], 
    PolygonBox[{{7, 3}, {9, 3}, {9, 2}, {7, 2}}]}, 
   {RGBColor[0.5189309590156614, 0.6190659623131488, 0.8473424097609057], 
    PolygonBox[{{7, 5}, {9, 5}, {9, 4}, {7, 4}}]}, 
   {RGBColor[
    0.17099043233471717`, 0.16020383496496682`, 0.16335707611596811`], 
    PolygonBox[{{7, 7}, {9, 7}, {9, 6}, {7, 6}}]}, 
   {RGBColor[0.9420844869170559, 0.8117188721619195, 0.48682682052310544`], 
    PolygonBox[{{7, 9}, {10, 9}, {10, 8}, {7, 8}}]}, 
   {RGBColor[0.5621513064128125, 0.5677626280899811, 0.813372636236245], 
    PolygonBox[{{7, 12}, {9, 12}, {9, 11}, {7, 11}}]}, 
   {RGBColor[
    0.25044029783675753`, 0.24101624554405204`, 0.24377124751711687`], 
    PolygonBox[{{7, 14}, {9, 14}, {9, 13}, {7, 13}}]}, 
   {RGBColor[0.7817854493059104, 0.42051276106769175`, 0.6420941395761306], 
    PolygonBox[{{8, 2}, {10, 2}, {10, 1}, {8, 1}}]}, 
   {RGBColor[0.8731869602285114, 0.5320693243035096, 0.55928493374759], 
    PolygonBox[{{8, 4}, {10, 4}, {10, 3}, {8, 3}}]}, 
   {RGBColor[0.7891701383444302, 0.4267178907740439, 0.635732025157029], 
    PolygonBox[{{8, 6}, {10, 6}, {10, 5}, {8, 5}}]}, 
   {RGBColor[0.43715298514682294`, 0.4309310081667511, 0.43275012048619843`], 
    PolygonBox[{{8, 8}, {11, 8}, {11, 7}, {8, 7}}]}, 
   {RGBColor[0.8121047145380126, 0.4459891179440806, 0.6159732516817925], 
    PolygonBox[{{8, 11}, {10, 11}, {10, 10}, {8, 10}}]}, 
   {RGBColor[0.9139319823435569, 0.8495010090813553, 0.5126683190945732], 
    PolygonBox[{{8, 13}, {10, 13}, {10, 12}, {8, 12}}]}, 
   {RGBColor[0.8077506837404218, 0.7860094886850578, 0.5660688270161134], 
    PolygonBox[{{8, 15}, {10, 15}, {10, 14}, {8, 14}}]}, 
   {RGBColor[0.5281751694707972, 0.60809291727371, 0.8400767639601049], 
    PolygonBox[{{9, 1}, {11, 1}, {11, 0}, {9, 0}}]}, 
   {RGBColor[0.8402974056205821, 0.46967857920994405`, 0.591684466397254], 
    PolygonBox[{{9, 3}, {11, 3}, {11, 2}, {9, 2}}]}, 
   {RGBColor[0.6134039749104822, 0.6031880123852716, 0.5328221368497723], 
    PolygonBox[{{9, 5}, {12, 5}, {12, 4}, {9, 4}}]}, 
   {RGBColor[0.8166753135876195, 0.4498296533803872, 0.6120355538361884], 
    PolygonBox[{{9, 7}, {12, 7}, {12, 6}, {9, 6}}]}, 
   {RGBColor[0.8939667360211191, 0.5740426306709356, 0.538534179032135], 
    PolygonBox[{{9, 10}, {11, 10}, {11, 9}, {9, 9}}]}, 
   {RGBColor[0.5593437276115679, 0.5710952749165918, 0.8155793009618785], 
    PolygonBox[{{9, 12}, {11, 12}, {11, 11}, {9, 11}}]}, 
   {RGBColor[0.8591869453877331, 0.5041217260174452, 0.5732388977330684], 
    PolygonBox[{{9, 14}, {11, 14}, {11, 13}, {9, 13}}]}, 
   {RGBColor[0.7539350032201261, 0.7361270002775265, 0.5639531244092393], 
    PolygonBox[{{10, 2}, {12, 2}, {12, 1}, {10, 1}}]}, 
   {RGBColor[0.8983911063825746, 0.8499540277858766, 0.5256140033625851], 
    PolygonBox[{{10, 4}, {13, 4}, {13, 3}, {10, 3}}]}, 
   {RGBColor[0.48444601348119387`, 0.6564252960936979, 0.872567872332238], 
    PolygonBox[{{10, 6}, {13, 6}, {13, 5}, {10, 5}}]}, 
   {RGBColor[0.4327878748788881, 0.7023137975778381, 0.9050608795484596], 
    PolygonBox[{{10, 9}, {12, 9}, {12, 8}, {10, 8}}]}, 
   {RGBColor[0.305792829134776, 0.297318058738843, 0.2997956084289929], 
    PolygonBox[{{10, 11}, {12, 11}, {12, 10}, {10, 10}}]}, 
   {RGBColor[0.9344339187426365, 0.7229596490482562, 0.49423301049106194`], 
    PolygonBox[{{10, 13}, {12, 13}, {12, 12}, {10, 12}}]}, 
   {RGBColor[
    0.26869304756188106`, 0.25958202530545504`, 0.26224553612243445`], 
    PolygonBox[{{10, 15}, {12, 15}, {12, 14}, {10, 14}}]}, 
   {RGBColor[0.8005720917695454, 0.4362986056206107, 0.6259089260510996], 
    PolygonBox[{{11, 1}, {14, 1}, {14, 0}, {11, 0}}]}, 
   {RGBColor[0.5002589660198768, 0.641229955778378, 0.8620179829924773], 
    PolygonBox[{{11, 3}, {14, 3}, {14, 2}, {11, 2}}]}, 
   {RGBColor[0.8089354642808185, 0.7868896230181521, 0.5655633523550541], 
    PolygonBox[{{11, 8}, {13, 8}, {13, 7}, {11, 7}}]}, 
   {RGBColor[0.328130020245445, 0.7006508568011585, 0.9121079859089357], 
    PolygonBox[{{11, 10}, {13, 10}, {13, 9}, {11, 9}}]}, 
   {RGBColor[0.4139908327865454, 0.7190114200104321, 0.9168842328646173], 
    PolygonBox[{{11, 12}, {13, 12}, {13, 11}, {11, 11}}]}, 
   {RGBColor[0.8006407080264191, 0.4363562617753445, 0.625849811242749], 
    PolygonBox[{{11, 14}, {13, 14}, {13, 13}, {11, 13}}]}, 
   {RGBColor[0.31322927929691413`, 0.6896894781536287, 0.9064494678821213], 
    PolygonBox[{{12, 2}, {15, 2}, {15, 1}, {12, 1}}]}, 
   {RGBColor[0.5904806539936999, 0.5341351800292015, 0.7911066994870284], 
    PolygonBox[{{12, 5}, {14, 5}, {14, 4}, {12, 4}}]}, 
   {RGBColor[0.5629130334428322, 0.5668584443255884, 0.8127739438088194], 
    PolygonBox[{{12, 7}, {14, 7}, {14, 6}, {12, 6}}]}, 
   {RGBColor[0.914822265515702, 0.6427448316899005, 0.5155814586555939], 
    PolygonBox[{{12, 9}, {14, 9}, {14, 8}, {12, 8}}]}, 
   {RGBColor[0.7841711816588691, 0.7642532937224805, 0.5653949140060852], 
    PolygonBox[{{12, 11}, {14, 11}, {14, 10}, {12, 10}}]}, 
   {RGBColor[0.7200300506506173, 0.42839839290144344`, 0.6904778607319795], 
    PolygonBox[{{12, 13}, {14, 13}, {14, 12}, {12, 12}}]}, 
   {RGBColor[0.8769904781390484, 0.8374454451248999, 0.5365283674861581], 
    PolygonBox[{{12, 15}, {14, 15}, {14, 14}, {12, 14}}]}, 
   {RGBColor[0.7291058455748833, 0.7130304249171202, 0.5627691645624655], 
    PolygonBox[{{13, 4}, {16, 4}, {16, 3}, {13, 3}}]}, 
   {RGBColor[0.42781687612114144`, 0.7067295912948485, 0.9081876414271789], 
    PolygonBox[{{13, 6}, {15, 6}, {15, 5}, {13, 5}}]}, 
   {RGBColor[0.6681569206433849, 0.4601624142013834, 0.7307633365958404], 
    PolygonBox[{{13, 8}, {15, 8}, {15, 7}, {13, 7}}]}, 
   {RGBColor[0.8474122322743719, 0.8154727431682255, 0.5491476275882632], 
    PolygonBox[{{13, 10}, {15, 10}, {15, 9}, {13, 9}}]}, 
   {RGBColor[0.810527548216978, 0.4446638730299804, 0.6173320242096587], 
    PolygonBox[{{13, 12}, {15, 12}, {15, 11}, {13, 11}}]}, 
   {RGBColor[0.1490551462894329, 0.13789236431791246`, 0.14115555518660394`], 
    PolygonBox[{{13, 14}, {15, 14}, {15, 13}, {13, 13}}]}, 
   {RGBColor[0.5467592511957682, 0.5860332760772653, 0.8254702861000344], 
    PolygonBox[{{14, 1}, {16, 1}, {16, 0}, {14, 0}}]}, 
   {RGBColor[0.82269363369414, 0.7971101126770528, 0.5596935682187719], 
    PolygonBox[{{14, 3}, {17, 3}, {17, 2}, {14, 2}}]}, 
   {RGBColor[0.9356032090506161, 0.7301045223912777, 0.49299577868095934`], 
    PolygonBox[{{14, 5}, {17, 5}, {17, 4}, {14, 4}}]}, 
   {RGBColor[0.3375832968310136, 0.7076049367675283, 0.9156978433634522], 
    PolygonBox[{{14, 7}, {16, 7}, {16, 6}, {14, 6}}]}, 
   {RGBColor[0.35676263655842705`, 0.7217137656967714, 0.9229811482651904], 
    PolygonBox[{{14, 9}, {16, 9}, {16, 8}, {14, 8}}]}, 
   {RGBColor[0.3089406354716116, 0.6865346384704272, 0.9048208664266714], 
    PolygonBox[{{14, 11}, {16, 11}, {16, 10}, {14, 10}}]}, 
   {RGBColor[0.7986793795148623, 0.4347082170509839, 0.6275395501523878], 
    PolygonBox[{{14, 13}, {16, 13}, {16, 12}, {14, 12}}]}, 
   {RGBColor[0.9409416498543087, 0.7627247221238033, 0.4873471482821575], 
    PolygonBox[{{14, 15}, {16, 15}, {16, 14}, {14, 14}}]}, 
   {RGBColor[0.7209229804938038, 0.4282370853806904, 0.6897820870256955], 
    PolygonBox[{{15, 2}, {18, 2}, {18, 1}, {15, 1}}]}, 
   {RGBColor[0.36970719852734585`, 0.731236127414074, 0.9278968123588986], 
    PolygonBox[{{15, 6}, {18, 6}, {18, 5}, {15, 5}}]}, 
   {RGBColor[0.3913218015519406, 0.7391485736438916, 0.9311430702021649], 
    PolygonBox[{{15, 8}, {18, 8}, {18, 7}, {15, 7}}]}, 
   {RGBColor[0.7977398189494915, 0.7768751095004687, 0.5660419243459874], 
    PolygonBox[{{15, 10}, {18, 10}, {18, 9}, {15, 9}}]}, 
   {RGBColor[0.9248359749313229, 0.8491831561746966, 0.5035851988344049], 
    PolygonBox[{{15, 12}, {18, 12}, {18, 11}, {15, 11}}]}, 
   {RGBColor[0.9446215374193011, 0.7852104387922834, 0.48345344120023015`], 
    PolygonBox[{{15, 14}, {18, 14}, {18, 13}, {15, 13}}]}, 
   {RGBColor[0.8427028640667131, 0.4716998128168875, 0.589612097231152], 
    PolygonBox[{{16, 1}, {19, 1}, {19, 0}, {16, 0}}]}, 
   {RGBColor[0.916090306488844, 0.8494380936311136, 0.5108704163892775], 
    PolygonBox[{{16, 4}, {18, 4}, {18, 3}, {16, 3}}]}, 
   {RGBColor[0.5900470709783047, 0.5346498509120592, 0.7914474814965243], 
    PolygonBox[{{16, 7}, {19, 7}, {19, 6}, {16, 6}}]}, 
   {RGBColor[0.7659226765482364, 0.4201079031604184, 0.6547181841397622], 
    PolygonBox[{{16, 9}, {19, 9}, {19, 8}, {16, 8}}]}, 
   {RGBColor[0.9424651725185051, 0.8091384809199539, 0.48634355549104596`], 
    PolygonBox[{{16, 11}, {19, 11}, {19, 10}, {16, 10}}]}, 
   {RGBColor[0.937119535216571, 0.7393699360601692, 0.49139134652736377`], 
    PolygonBox[{{16, 13}, {19, 13}, {19, 12}, {16, 12}}]}, 
   {RGBColor[0.30814133511753167`, 0.6859466520163013, 0.9045173341742805], 
    PolygonBox[{{16, 15}, {19, 15}, {19, 14}, {16, 14}}]}, 
   {RGBColor[0.9048081888842296, 0.849766968934818, 0.5202685180632508], 
    PolygonBox[{{17, 3}, {19, 3}, {19, 2}, {17, 2}}]}, 
   {RGBColor[0.7835997904806399, 0.42203729680129504`, 0.6405310343338237], 
    PolygonBox[{{17, 5}, {19, 5}, {19, 4}, {17, 4}}]}, 
   {RGBColor[0.7170810660263451, 0.4289311261302744, 0.6927757187075647], 
    PolygonBox[{{18, 2}, {21, 2}, {21, 1}, {18, 1}}]}, 
   {RGBColor[0.7864199055069224, 0.766345101288544, 0.5655021427240554], 
    PolygonBox[{{18, 4}, {21, 4}, {21, 3}, {18, 3}}]}, 
   {RGBColor[0.9039806267600677, 0.6070303490939035, 0.5275133112055941], 
    PolygonBox[{{18, 6}, {21, 6}, {21, 5}, {18, 5}}]}, 
   {RGBColor[0.9380152586048179, 0.744843196306775, 0.49044357721684345`], 
    PolygonBox[{{18, 8}, {21, 8}, {21, 7}, {18, 7}}]}, 
   {RGBColor[0.30482890882027897`, 0.6835099437336973, 0.9032594488127244], 
    PolygonBox[{{18, 10}, {21, 10}, {21, 9}, {18, 9}}]}, 
   {RGBColor[0.302185922167176, 0.6815656929367001, 0.9022557814331711], 
    PolygonBox[{{18, 12}, {21, 12}, {21, 11}, {18, 11}}]}, 
   {RGBColor[0.7214261880607717, 0.4281461810776579, 0.6893899861270965], 
    PolygonBox[{{18, 14}, {21, 14}, {21, 13}, {18, 13}}]}, 
   {RGBColor[0.9208822334128959, 0.6627075534587068, 0.5089121123476407], 
    PolygonBox[{{19, 1}, {21, 1}, {21, 0}, {19, 0}}]}, 
   {RGBColor[0.6893875582554507, 0.4410240589907005, 0.7143120867209228], 
    PolygonBox[{{19, 3}, {21, 3}, {21, 2}, {19, 2}}]}, 
   {RGBColor[0.6149606209078496, 0.6047066661128719, 0.5336756397700784], 
    PolygonBox[{{19, 5}, {21, 5}, {21, 4}, {19, 4}}]}, 
   {RGBColor[0.9399553678322127, 0.82615062429207, 0.4895296514126329], 
    PolygonBox[{{19, 7}, {21, 7}, {21, 6}, {19, 6}}]}, 
   {RGBColor[0.5852766595264733, 0.5403124156028618, 0.7951968682182248], 
    PolygonBox[{{19, 9}, {21, 9}, {21, 8}, {19, 8}}]}, 
   {RGBColor[0.941732667582246, 0.8141035999447459, 0.48727344099277603`], 
    PolygonBox[{{19, 11}, {21, 11}, {21, 10}, {19, 10}}]}, 
   {RGBColor[0.9280316178125922, 0.6862590266695583, 0.5010437999639508], 
    PolygonBox[{{19, 13}, {21, 13}, {21, 12}, {19, 12}}]}, 
   {RGBColor[0.8911805254856365, 0.567989067193744, 0.5413505555041509], 
    PolygonBox[{{19, 15}, {21, 15}, {21, 14}, {19, 14}}]}},
  ImageSize->600]], "Output",
 CellChangeTimes->{{3.733869200465591*^9, 3.733869250797469*^9}, {
   3.733869281394299*^9, 3.733869328102874*^9}, 3.7338694153219957`*^9, {
   3.733869525353415*^9, 3.7338695344669456`*^9}, {3.73386979080639*^9, 
   3.733869810913187*^9}, 3.733870065420248*^9, 3.733871523519761*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "The number of clauses produced quickly makes this problem infeasible for \
the satisfiability solver of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". However, this same problem can be solved more efficiently in ",
 StyleBox["dynamic programming",
  FontSlant->"Italic"],
 " spirit by using ",
 StyleBox["memoization",
  FontSlant->"Italic"],
 " of the recursion that adds up the solutions. The recursion that counts the \
number of ways to solve this problem fills in the tiles of the current row \
from the current ",
 StyleBox["loc",
  FontSlant->"Italic"],
 "-ation. It has the base cases of the entire wall being filled, in which \
case there is exactly one way to complete the job by doing nothing and \
declaring victory, and the current row having become impossible to complete. \
Otherwise, if the recursion has managed to completely fill in the current row \
without creating a crack with the previous row, the positions of the cracks \
in the current row become the cracks of the row positioned ",
 StyleBox["below",
  FontSlant->"Italic"],
 " the current row for the next level of recursion. To avoid the exponential \
blowup of this recursion, the repeated subproblems are automatically memoized \
using the canonical \[OpenCurlyDoubleQuote]Lazy assignment of eager \
assignments\[CloseCurlyDoubleQuote] idiom of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.733868195438301*^9, 3.733868268764112*^9}, {
   3.733868308804813*^9, 3.733868424929892*^9}, {3.7338686502729473`*^9, 
   3.733868667894086*^9}, {3.733868842444759*^9, 3.733868868832697*^9}, 
   3.733869446402856*^9, {3.733869542320346*^9, 3.733869549152132*^9}, {
   3.733870148622541*^9, 3.733870150470627*^9}, {3.733871181430616*^9, 
   3.733871196814395*^9}, {3.733871717833156*^9, 3.733871736741611*^9}, {
   3.733872094370595*^9, 3.733872120375155*^9}, {3.733872231015345*^9, 
   3.7338724100597982`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tilings", "[", 
    RowBox[{"w_", ",", "ht_", ",", " ", 
     RowBox[{"bricks_:", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ways", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"ways", "[", 
        RowBox[{"0", ",", "loc_", ",", "below_", ",", "left_"}], "]"}], " ", ":=",
        " ", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ways", "[", 
        RowBox[{"h_", ",", 
         RowBox[{"loc_", " ", "/;", " ", 
          RowBox[{
           RowBox[{"loc", " ", "\[Equal]", " ", "0"}], " ", "||", " ", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"bricks", ",", " ", "loc"}], "]"}]}]}], ",", " ", 
         "below_", ",", "left_"}], "]"}], " ", ":=", " ", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ways", "[", 
         RowBox[{"h", ",", "loc", ",", "below", ",", " ", "left"}], "]"}], 
        " ", "=", " ", 
        RowBox[{"ways", "[", 
         RowBox[{
          RowBox[{"h", "-", "1"}], ",", " ", "w", ",", " ", "left", ",", " ", 
          
          RowBox[{"{", "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ways", "[", 
        RowBox[{"h_", ",", 
         RowBox[{"loc_", " ", "/;", " ", 
          RowBox[{
           RowBox[{"loc", " ", "<", " ", "0"}], " ", "||", 
           RowBox[{"loc", " ", "\[Equal]", " ", "1"}]}]}], ",", " ", "below_",
          ",", " ", "left_"}], "]"}], " ", ":=", " ", "0"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ways", "[", 
        RowBox[{"h_", ",", "loc_", ",", " ", "below_", ",", "left_"}], "]"}], 
       " ", ":=", 
       RowBox[{
        RowBox[{"ways", "[", 
         RowBox[{"h", ",", "loc", ",", "below", ",", " ", "left"}], "]"}], 
        " ", "=", "\[IndentingNewLine]", 
        RowBox[{"Total", "[", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"loc", " ", ">", " ", "b"}], " ", "&&", " ", 
              RowBox[{"MemberQ", "[", " ", 
               RowBox[{"below", ",", " ", 
                RowBox[{"loc", "-", "b"}]}], "]"}]}], ",", "0", ",", 
             RowBox[{"ways", "[", 
              RowBox[{"h", ",", " ", 
               RowBox[{"loc", " ", "-", " ", "b"}], ",", " ", "below", ",", 
               " ", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"loc", "-", "b"}], "}"}], ",", " ", "left"}], 
                "]"}]}], " ", "]"}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"b", ",", " ", "bricks"}], "}"}]}], "]"}], 
         "\[IndentingNewLine]", "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ways", "[", 
       RowBox[{"ht", ",", "w", ",", 
        RowBox[{"{", "}"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.7338683065521812`*^9, {3.73386993303572*^9, 3.733869933251225*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[TextData[{
 "We can tabulate the answers to this problem for a ",
 StyleBox["w",
  FontSlant->"Italic"],
 "-by-10 wall reasonably quickly, with ",
 StyleBox["w",
  FontSlant->"Italic"],
 " going through the values from 3 to 25. Note how this problem has no \
solutions when w equals 4, since there is no way not to leave a crack using \
only tiles of length 2. The walls of length from 5 to 7 have only two \
solutions regardless of the height, since the placement of the tiles on the \
first row will determine their placements in the entire wall. As ",
 StyleBox["w",
  FontSlant->"Italic"],
 " increases from there, the number of possible tilings suddenly shoots up \
exponentially."
}], "Text",
 CellChangeTimes->{{3.733868429922482*^9, 3.733868623366387*^9}, 
   3.7338719857232237`*^9},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"tilings", "[", 
    RowBox[{"w", ",", "10"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"w", ",", " ", "3", ",", " ", "25"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.7338684585013647`*^9, {3.733868513668442*^9, 3.733868515368949*^9}, {
   3.7338712105051537`*^9, 3.7338712229503937`*^9}, {3.733871287689913*^9, 
   3.733871288296527*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "2", ",", "2", ",", "4", ",", "66", ",", 
   "290", ",", "652", ",", "1586", ",", "9594", ",", "45358", ",", "142704", 
   ",", "419854", ",", "1778422", ",", "7939970", ",", "28421942", ",", 
   "94082988", ",", "360133872", ",", "1478534470", ",", "5578404294", ",", 
   "19730715436", ",", "73368404198"}], "}"}]], "Output",
 CellChangeTimes->{3.7338684704960613`*^9, 3.733869949077507*^9, 
  3.733870074467593*^9, 3.7338715319302807`*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell["\<\
Increasing the height of the wall by just one has a dramatic effect on the \
number of solutions. Combinatorics is the stuff of many possibilities, and \
yet the answers will always be integers as the Good Lord intended for us \
extreme finitists.\
\>", "Text",
 CellChangeTimes->{{3.733871227406402*^9, 3.733871246621089*^9}, {
  3.7338712801806726`*^9, 3.733871294556518*^9}, {3.733871598144074*^9, 
  3.733871627463149*^9}, {3.7338721420418243`*^9, 3.733872202846217*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"tilings", "[", 
    RowBox[{"w", ",", "11"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"w", ",", " ", "3", ",", " ", "25"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.733871252721298*^9, 3.733871285714707*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "2", ",", "2", ",", "4", ",", "98", ",", 
   "468", ",", "1138", ",", "2954", ",", "20932", ",", "121056", ",", 
   "407878", ",", "1282068", ",", "6484448", ",", "32698220", ",", 
   "135084042", ",", "482666366", ",", "2051365490", ",", "10094853172", ",", 
   "41983996110", ",", "166491260832", ",", "698163645734"}], "}"}]], "Output",\

 CellChangeTimes->{3.7338712686567717`*^9, 3.733871379052043*^9, 
  3.73387154164424*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]],

Cell[TextData[{
 "Just out of curiosity, can ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " find some simple function that fits this pattern? Nah."
}], "Text",
 CellChangeTimes->{{3.733871301749393*^9, 3.7338713156359673`*^9}, {
  3.7338713936988497`*^9, 3.7338713942748413`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindSequenceFunction", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.7338713198454437`*^9, 3.7338713256454144`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"FindSequenceFunction", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "0", ",", "2", ",", "2", ",", "2", ",", "4", ",", "98", ",", 
    "468", ",", "1138", ",", "2954", ",", "20932", ",", "121056", ",", 
    "407878", ",", "1282068", ",", "6484448", ",", "32698220", ",", 
    "135084042", ",", "482666366", ",", "2051365490", ",", "10094853172", ",",
     "41983996110", ",", "166491260832", ",", "698163645734"}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.73387138899231*^9, 3.733871549531569*^9}]
}, Open  ]],

Cell[TextData[{
 "To score the achievement point for Project Euler, we need to solve the \
particular larger instance that was required in the problem. This computation \
takes a little while in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", especially when contrasted to the fact that the author\[CloseCurlyQuote]s \
implementation of the exact same memoized recursion in Python 3 takes about \
one second to execute in the author\[CloseCurlyQuote]s trusty old desktop \
machine. On the other hand, that Python 3 solution has to memoize only ",
 StyleBox["tuples",
  FontSlant->"Italic"],
 " of integers instead of arbitrary expressions. The resulting solution of \
there existing about 806 trillion different possibilities to fill in the \
32-by-10 wall without cracks is accepted by Project Euler."
}], "Text",
 CellChangeTimes->{{3.733868451309511*^9, 3.733868454730482*^9}, {
  3.733869556479672*^9, 3.73386957636729*^9}, {3.733869828268448*^9, 
  3.733869865186689*^9}, {3.733870210711906*^9, 3.733870269540421*^9}, {
  3.733870308630681*^9, 3.733870477753499*^9}, {3.7338713297815742`*^9, 
  3.733871358371409*^9}, {3.733871406883601*^9, 3.733871408803051*^9}, {
  3.733871690320984*^9, 3.733871701150131*^9}, {3.7338720453792543`*^9, 
  3.733872063048479*^9}, {3.733872427901208*^9, 3.7338724684982862`*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"tilings", "[", 
   RowBox[{"32", ",", "10"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7338698713964*^9, 3.733869876659122*^9}, {
  3.7338699145315933`*^9, 3.733869916474441*^9}},
 TextJustification->1.,
 FontSize->14],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "45.48230600000000123372956295497715473175`7.678442389033377", ",", 
   "806844323190414"}], "}"}]], "Output",
 CellChangeTimes->{3.733870121032535*^9, 3.733871595181653*^9},
 TextJustification->1.,
 FontSize->14]
}, Open  ]]
}, Open  ]]
},
WindowSize->{914, 999},
WindowMargins->{{138, Automatic}, {13, Automatic}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (December 4, \
2014)",
StyleDefinitions->FrontEnd`FileName[{"Utility"}, "Memo.nb", CharacterEncoding -> 
  "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 195, 3, 28, "Input"],
Cell[778, 27, 854, 15, 41, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1669, 47, 249, 5, 83, "Title"],
Cell[1921, 54, 2709, 46, 400, "Text"],
Cell[4633, 102, 1776, 44, 210, "Input"],
Cell[6412, 148, 2687, 71, 309, "Text"],
Cell[9102, 221, 1282, 44, 67, "Input"],
Cell[10387, 267, 1725, 42, 193, "Text"],
Cell[CellGroupData[{
Cell[12137, 313, 1607, 44, 157, "Input"],
Cell[13747, 359, 1959, 55, 48, "Output"]
}, Open  ]],
Cell[15721, 417, 2423, 56, 308, "Text"],
Cell[CellGroupData[{
Cell[18169, 477, 619, 19, 49, "Input"],
Cell[18791, 498, 801, 15, 33, "Output"]
}, Open  ]],
Cell[19607, 516, 518, 14, 55, "Text"],
Cell[CellGroupData[{
Cell[20150, 534, 726, 22, 67, "Input"],
Cell[20879, 558, 920, 20, 33, "Output"]
}, Open  ]],
Cell[21814, 581, 1717, 45, 216, "Text"],
Cell[CellGroupData[{
Cell[23556, 630, 822, 23, 66, "Input"],
Cell[24381, 655, 879, 16, 29, "Output"]
}, Open  ]],
Cell[25275, 674, 875, 23, 101, "Text"],
Cell[CellGroupData[{
Cell[26175, 701, 319, 9, 29, "Input"],
Cell[26497, 712, 884, 17, 29, "Output"]
}, Open  ]],
Cell[27396, 732, 1374, 37, 170, "Text"],
Cell[CellGroupData[{
Cell[28795, 773, 502, 13, 48, "Input"],
Cell[29300, 788, 839, 16, 29, "Output"]
}, Open  ]],
Cell[30154, 807, 1351, 26, 170, "Text"],
Cell[31508, 835, 2633, 74, 175, "Input"],
Cell[34144, 911, 1059, 18, 124, "Text"],
Cell[CellGroupData[{
Cell[35228, 933, 385, 9, 48, "Input"],
Cell[35616, 944, 707, 11, 29, "Output"],
Cell[36326, 957, 706, 11, 29, "Output"]
}, Open  ]],
Cell[37047, 971, 2071, 45, 308, "Text"],
Cell[39121, 1018, 908, 27, 48, "Input"],
Cell[40032, 1047, 858, 20, 101, "Text"],
Cell[CellGroupData[{
Cell[40915, 1071, 235, 6, 29, "Input"],
Cell[41153, 1079, 657, 11, 29, "Output"]
}, Open  ]],
Cell[41825, 1093, 1204, 37, 124, "Text"],
Cell[CellGroupData[{
Cell[43054, 1134, 514, 15, 32, "Input"],
Cell[43571, 1151, 8333, 257, 153, "Output"]
}, Open  ]],
Cell[51919, 1411, 1219, 25, 147, "Text"],
Cell[CellGroupData[{
Cell[53163, 1440, 2651, 69, 175, "Input"],
Cell[55817, 1511, 1283, 27, 115, "Output"]
}, Open  ]],
Cell[57115, 1541, 1135, 21, 170, "Text"],
Cell[CellGroupData[{
Cell[58275, 1566, 1061, 29, 48, "Input"],
Cell[59339, 1597, 19216, 328, 217, "Output"]
}, Open  ]],
Cell[78570, 1928, 1430, 25, 216, "Text"],
Cell[CellGroupData[{
Cell[80025, 1957, 1060, 32, 66, "Input"],
Cell[81088, 1991, 209325, 3436, 614, "Output"]
}, Open  ]],
Cell[290428, 5430, 3233, 72, 423, "Text"],
Cell[293664, 5504, 3510, 104, 144, "Input"],
Cell[297177, 5610, 2239, 55, 262, "Text"],
Cell[299419, 5667, 2155, 53, 211, "Input"],
Cell[301577, 5722, 632, 15, 55, "Text"],
Cell[CellGroupData[{
Cell[302234, 5741, 2919, 77, 230, "Input"],
Cell[305156, 5820, 1645, 44, 33, "Output"],
Cell[306804, 5866, 955, 20, 29, "Output"]
}, Open  ]],
Cell[307774, 5889, 1437, 30, 170, "Text"],
Cell[CellGroupData[{
Cell[309236, 5923, 2289, 41, 66, "Input"],
Cell[311528, 5966, 4068, 82, 390, "Output"]
}, Open  ]],
Cell[315611, 6051, 820, 16, 124, "Text"],
Cell[CellGroupData[{
Cell[316456, 6071, 3691, 82, 229, "Input"],
Cell[320150, 6155, 3782, 78, 390, "Output"]
}, Open  ]],
Cell[323947, 6236, 7100, 131, 1136, "Text"],
Cell[CellGroupData[{
Cell[331072, 6371, 2224, 58, 193, "Input"],
Cell[333299, 6431, 3071, 68, 390, "Output"]
}, Open  ]],
Cell[336385, 6502, 1564, 35, 193, "Text"],
Cell[CellGroupData[{
Cell[337974, 6541, 9200, 222, 614, "Input"],
Cell[347177, 6765, 377, 7, 29, "Output"]
}, Open  ]],
Cell[347569, 6775, 816, 14, 101, "Text"],
Cell[CellGroupData[{
Cell[348410, 6793, 3442, 99, 214, "Input"],
Cell[351855, 6894, 17246, 270, 470, "Output"]
}, Open  ]],
Cell[369116, 7167, 1994, 41, 239, "Text"],
Cell[371113, 7210, 3322, 83, 287, "Input"],
Cell[374438, 7295, 836, 20, 124, "Text"],
Cell[CellGroupData[{
Cell[375299, 7319, 453, 12, 29, "Input"],
Cell[375755, 7333, 553, 11, 48, "Output"]
}, Open  ]],
Cell[376323, 7347, 524, 10, 78, "Text"],
Cell[CellGroupData[{
Cell[376872, 7361, 322, 9, 29, "Input"],
Cell[377197, 7372, 542, 12, 48, "Output"]
}, Open  ]],
Cell[377754, 7387, 327, 9, 32, "Text"],
Cell[CellGroupData[{
Cell[378106, 7400, 182, 4, 29, "Input"],
Cell[378291, 7406, 530, 10, 63, "Output"]
}, Open  ]],
Cell[378836, 7419, 1364, 24, 147, "Text"],
Cell[CellGroupData[{
Cell[380225, 7447, 273, 7, 29, "Input"],
Cell[380501, 7456, 255, 7, 29, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
